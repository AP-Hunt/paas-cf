resources:
  - name: pipeline-trigger
    type: semver-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      key: {{pipeline_trigger_file}}

  - name: paas-cf
    type: git
    source:
      uri: https://github.com/alphagov/paas-cf.git
      branch: {{branch_name}}

  - name: vpc-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: vpc.tfstate

  - name: concourse-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: concourse.tfstate
      region_name: eu-west-1

  - name: bosh-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh.tfstate

  - name: bosh-secrets
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-secrets.yml

  - name: bosh-CA
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-CA.tar.gz

  - name: bosh-manifest
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-manifest.yml

  - name: bosh-init-state
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-manifest-state.json

  - name: ssh-private-key
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: id_rsa
      region_name: {{aws_region}}

  - name: cf-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: cf.tfstate
      region_name: eu-west-1

  - name: cf-secrets
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: cf-secrets.yml

  - name: cf-certs
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: cf-certs.tar.gz

  - name: cf-manifest
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: cf-manifest.yml

  - name: cf-release
    type: git
    source:
      uri: https://github.com/cloudfoundry/cf-release
      tag_filter: {{cf-release-version}}

jobs:
  - name: init
    serial: true
    plan:
    - get: paas-cf
      trigger: {{auto_deploy}}
    - task: bootstrap-s3-state
      config:
        platform: linux
        image: docker:///governmentpaas/curl-ssl
        inputs:
        - name: paas-cf
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} bosh.tfstate paas-cf/concourse/init_files/terraform.tfstate.tpl
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} bosh-manifest-state.json paas-cf/concourse/init_files/bosh-init-state.json.tpl
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} bosh-secrets.yml paas-cf/concourse/init_files/zero_bytes
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} bosh-CA.tar.gz paas-cf/concourse/init_files/empty.tar.gz
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} cf-secrets.yml paas-cf/concourse/init_files/zero_bytes
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} cf.tfstate paas-cf/concourse/init_files/terraform.tfstate.tpl
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} cf-certs.tar.gz paas-cf/concourse/init_files/empty.tar.gz
    - put: pipeline-trigger
      params: {bump: patch}

  - name: generate-bosh-secrets
    serial: true
    plan:
    - get: pipeline-trigger
      trigger: true
      passed: [ init ]
    - get: paas-cf
      passed: [init]
    - get: bosh-secrets

    - task: generate
      config:
        platform: linux
        image: docker:///ruby#2.2-slim
        inputs:
        - name: paas-cf
        - name: bosh-secrets
          path: existing-bosh-secrets
        outputs:
        - name: generated-bosh-secrets
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ./paas-cf/manifests/bosh-manifest/scripts/generate-bosh-secrets.rb \
              --existing-secrets existing-bosh-secrets/bosh-secrets.yml \
              > generated-bosh-secrets/bosh-secrets.yml
            ls -l generated-bosh-secrets
      on_success:
        put: bosh-secrets
        params:
          file: generated-bosh-secrets/bosh-secrets.yml

  - name: generate-bosh-CA-certs
    serial: true
    plan:
    - get: pipeline-trigger
      trigger: true
      passed: [ init ]
    - get: paas-cf
      passed: [init]
    - get: bosh-CA

    - try:
        task: generate
        config:
          platform: linux
          image: docker:///governmentpaas/certstrap
          inputs:
          - name: bosh-CA
          outputs:
          - name: generate
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if  [ -z "$(tar -tvzf bosh-CA/bosh-CA.tar.gz)" ] ; then
                certstrap init --passphrase "" --common-name bosh-CA
                cd out
                tar -cvzf ../bosh-CA.tar.gz bosh-CA.*
                cp ../bosh-CA.tar.gz ../generate
              else
                echo "The CA cert already exists, skipping generation..."
                exit 1
              fi
        on_success:
          do:
            - put: bosh-CA
              params:
                file: generate/bosh-CA.tar.gz

  - name: bosh-terraform
    serial: true
    plan:
    - get: pipeline-trigger
      trigger: true
      passed: [ init ]
    - get: paas-cf
      passed: [init]
    - get: vpc-tfstate
    - get: concourse-tfstate
    - get: bosh-tfstate
    - task: terraform-variables
      config:
        platform: linux
        image: docker:///ruby#2.2.3-slim
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
            < vpc-tfstate/vpc.tfstate \
            > terraform-variables/vpc.tfvars.sh
            ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
            < concourse-tfstate/concourse.tfstate \
            > terraform-variables/concourse.tfvars.sh
        inputs:
        - name: paas-cf
        - name: vpc-tfstate
        - name: concourse-tfstate
        outputs:
        - name: terraform-variables
    - task: terraform-apply
      config:
        platform: linux
        image: docker:///governmentpaas/terraform
        params:
          DEPLOY_ENV: {{deploy_env}}
          AWS_DEFAULT_REGION: {{aws_region}}
        inputs:
        - name: paas-cf
        - name: terraform-variables
        - name: bosh-tfstate
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            . terraform-variables/vpc.tfvars.sh
            . terraform-variables/concourse.tfvars.sh

            terraform apply -var env={{deploy_env}} -var-file=paas-cf/terraform/{{aws_account}}.tfvars \
              -state=bosh-tfstate/bosh.tfstate -state-out=terraform-apply/bosh.tfstate paas-cf/terraform/bosh
        outputs:
        - name: terraform-apply
      ensure:
        put: bosh-tfstate
        params:
          file: terraform-apply/bosh.tfstate

  - name: generate-bosh-manifest
    serial: true
    plan:
    - get: pipeline-trigger
      trigger: true
      passed:
      - bosh-terraform
      - generate-bosh-secrets
      - generate-bosh-CA-certs
    - get: paas-cf
      passed: [init]
    - get: vpc-tfstate
      passed: [bosh-terraform]
    - get: bosh-tfstate
      passed: [bosh-terraform]
    - get: bosh-secrets
      passed: [generate-bosh-secrets]
    - get: bosh-CA
      passed: [generate-bosh-CA-certs]
    - task: terraform_outputs
      config:
        platform: linux
        image: docker:///ruby#2.2.3-slim
        run:
          path: sh
          args:
          - -c
          - -e
          - |
            ruby paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < vpc-tfstate/vpc.tfstate \
              > terraform-outputs/vpc.terraform-outputs.yml
            ruby paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < bosh-tfstate/bosh.tfstate \
              > terraform-outputs/bosh.terraform-outputs.yml
        inputs:
        - name: paas-cf
        - name: bosh-tfstate
        - name: vpc-tfstate
        outputs:
        - name: terraform-outputs
    - task: bosh-cert
      config:
        platform: linux
        image: docker:///alpine#3.3
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            tar -xzf bosh-CA/bosh-CA.tar.gz
            paas-cf/concourse/scripts/file-to-yaml.sh secrets bosh_ca_cert bosh-CA.crt > bosh-cert/bosh-ca-cert.yml
        inputs:
        - name: paas-cf
        - name: bosh-CA
        outputs:
        - name: bosh-cert
    - task: render-manifest
      config:
        platform: linux
        image: docker:///governmentpaas/spruce
        params:
          BOSH_MANIFEST_STUBS: |
            ./bosh-secrets/bosh-secrets.yml
            ./bosh-cert/bosh-ca-cert.yml
            ./terraform-outputs/bosh.terraform-outputs.yml
            ./terraform-outputs/vpc.terraform-outputs.yml
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ./paas-cf/manifests/bosh-manifest/build_manifest.sh $BOSH_MANIFEST_STUBS > bosh-manifest/bosh-manifest.yml
            /bin/cat bosh-manifest/bosh-manifest.yml
        inputs:
        - name: paas-cf
        - name: terraform-outputs
        - name: bosh-secrets
        - name: bosh-cert
        outputs:
        - name: bosh-manifest
      on_success:
        put: bosh-manifest
        params:
          file: bosh-manifest/bosh-manifest.yml

  - name: bosh-deploy
    plan:
    - get: pipeline-trigger
      trigger: true
      passed: [generate-bosh-manifest]
    - get: bosh-manifest
      trigger: true
      passed: [generate-bosh-manifest]
    - get: bosh-init-state
    - get: ssh-private-key

    - task: bosh-init-microbosh
      config:
        platform: linux
        image: docker:///governmentpaas/bosh-init
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            mkdir -p bosh-manifest/.ssh
            cp ssh-private-key/id_rsa bosh-manifest/.ssh/id_rsa
            chmod 400 bosh-manifest/.ssh/id_rsa
            cp bosh-init-state/bosh-manifest-state.json bosh-manifest/bosh-manifest-state.json
            bosh-init deploy bosh-manifest/bosh-manifest.yml
            cp bosh-manifest/bosh-manifest-state.json bosh-init-microbosh/bosh-manifest-state.json
        inputs:
        - name: bosh-manifest
        - name: bosh-init-state
        - name: ssh-private-key
        outputs:
        - name: bosh-init-microbosh
      ensure:
        put: bosh-init-state
        params:
          file: bosh-init-microbosh/bosh-manifest-state.json

  - name: generate-cf-secrets
    serial_groups: [ deploy ]
    serial: true
    plan:
      - aggregate:
        - get: paas-cf
          passed: ['generate-bosh-manifest']
        - get: pipeline-trigger
          passed: ['bosh-deploy']
          trigger: true
        - get: cf-secrets

      - task: generate-cf-secrets
        config:
          platform: linux
          image: docker:///ruby#2.2-slim
          inputs:
          - name: paas-cf
          - name: cf-secrets
            path: existing-cf-secrets
          outputs:
          - name: generated-cf-secrets
          run:
            path: sh
            args:
              - -c
              - -e
              - |
                ./paas-cf/manifests/cf-manifest/scripts/generate-cf-secrets.rb \
                  --existing-secrets existing-cf-secrets/cf-secrets.yml \
                  > generated-cf-secrets/cf-secrets.yml
                ls -l generated-cf-secrets
        on_success:
          put: cf-secrets
          params:
            file: generated-cf-secrets/cf-secrets.yml

  - name: cf-terraform
    serial_groups: [ deploy ]
    serial: true
    plan:
      - aggregate:
        - get: paas-cf
          passed: ['generate-cf-secrets']
        - get: pipeline-trigger
          passed: [ 'generate-cf-secrets' ]
          trigger: true
        - get: vpc-tfstate
        - get: concourse-tfstate
        - get: bosh-tfstate
        - get: cf-tfstate
        - get: cf-secrets
          passed: ['generate-cf-secrets']

      - task: terraform-variables
        config:
          platform: linux
          image: docker:///ruby
          inputs:
            - name: paas-cf
            - name: vpc-tfstate
            - name: concourse-tfstate
            - name: bosh-tfstate
            - name: cf-secrets
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < vpc-tfstate/vpc.tfstate > terraform-variables/vpc.tfvars.sh
              ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < concourse-tfstate/concourse.tfstate > terraform-variables/concourse.tfvars.sh
              ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < bosh-tfstate/bosh.tfstate > terraform-variables/bosh.tfvars.sh
              ruby paas-cf/concourse/scripts/extract_tf_vars_from_yaml.rb \
              < cf-secrets/cf-secrets.yml > terraform-variables/cf-secrets.tfvars.sh
          outputs:
            - name: terraform-variables
      - task: terraform
        config:
          platform: linux
          image: docker:///governmentpaas/terraform
          params:
            TF_VAR_env: {{deploy_env}}
            AWS_DEFAULT_REGION: {{aws_region}}
          inputs:
            - name: terraform-variables
            - name: paas-cf
            - name: cf-tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . terraform-variables/vpc.tfvars.sh
              . terraform-variables/concourse.tfvars.sh
              . terraform-variables/bosh.tfvars.sh
              . terraform-variables/cf-secrets.tfvars.sh

              terraform apply -var-file=paas-cf/terraform/{{aws_account}}.tfvars \
                -state=cf-tfstate/cf.tfstate -state-out=terraform/cf.tfstate paas-cf/terraform/cloudfoundry
          outputs:
            - name: terraform
        ensure:
          put: cf-tfstate
          params:
            file: terraform/cf.tfstate

      - task: extract-cf-terraform-outputs
        config:
          platform: linux
          image: docker:///ruby#2.2.3-slim
          inputs:
            - name: paas-cf
            - name: cf-tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              SCPATH="./paas-cf/concourse/scripts"
              SCFILE="extract_tf_vars_from_terraform_state.rb"
              $SCPATH/$SCFILE < cf-tfstate/cf.tfstate > extract-cf-terraform-outputs/cf.tfstate.sh
              ls -l extract-cf-terraform-outputs/cf.tfstate.sh
          outputs:
            - name: extract-cf-terraform-outputs
      - task: init-db
        config:
          platform: linux
          image: docker:///governmentpaas/psql
          inputs:
            - name: terraform-variables
            - name: paas-cf
            - name: extract-cf-terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . terraform-variables/cf-secrets.tfvars.sh
              . extract-cf-terraform-outputs/cf.tfstate.sh

              paas-cf/manifests/cf-manifest/scripts/create-cf-dbs.sh
  - name: generate-cf-certs
    serial_groups: [ deploy ]
    serial: true
    plan:
      - aggregate:
        - get: pipeline-trigger
          passed: [ 'cf-terraform' ]
          trigger: true
        - get: paas-cf
          passed: ['cf-terraform']
        - get: bosh-CA
        - get: cf-certs
        - get: cf-tfstate
          passed: ['cf-terraform']
      - task: terraform-variables
        config:
          platform: linux
          image: docker:///ruby#2.2-slim
          inputs:
            - name: paas-cf
            - name: cf-tfstate
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                < cf-tfstate/cf.tfstate > terraform-variables/cf.tfvars.sh
          outputs:
            - name: terraform-variables
      - task: generate-cf-certs
        config:
          platform: linux
          image: docker:///governmentpaas/certstrap
          inputs:
          - name: bosh-CA
          - name: paas-cf
          - name: cf-certs
          - name: terraform-variables
          outputs:
          - name: updated-cf-certs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . terraform-variables/cf.tfvars.sh

              mkdir certs
              echo "Extracting extant certs"
              tar -xvzf cf-certs/cf-certs.tar.gz -C certs

              ./paas-cf/manifests/cf-manifest/scripts/generate-cf-certs.sh certs bosh-CA/bosh-CA.tar.gz

              cd certs
              echo "Creating updated cert tarball"
              tar -cvzf ../updated-cf-certs/cf-certs.tar.gz .
      - put: cf-certs
        params:
          file: updated-cf-certs/cf-certs.tar.gz

  - name: generate-cf-manifest
    serial_groups: [ deploy ]
    serial: true
    plan:
      - aggregate:
        - get: pipeline-trigger
          passed: [ 'generate-cf-certs' ]
          trigger: true
        - get: paas-cf
          passed: ['generate-cf-certs']
        - get: bosh-CA
          passed: ['generate-cf-certs']
        - get: cf-certs
          passed: ['generate-cf-certs']
        - get: vpc-tfstate
        - get: bosh-tfstate
        - get: concourse-tfstate
        - get: cf-tfstate
          passed: ['generate-cf-certs']
          trigger: true
        - get: cf-secrets
      - task: cf-certs-yaml
        config:
          platform: linux
          image: docker:///governmentpaas/certstrap
          inputs:
          - name: bosh-CA
          - name: paas-cf
          - name: cf-certs
          outputs:
          - name: cf-certs-yaml
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              echo "Extracting CA certs"
              tar -xzvf bosh-CA/bosh-CA.tar.gz
              echo "Extracting CloudFoundry certs"
              tar -xzvf cf-certs/cf-certs.tar.gz

              for file in *.crt; do
                cn=${file%.crt}
                yaml_key_name=$(echo ${cn} | tr A-Z- a-z_)

                echo "Converting ${cn} certs to YAML"
                paas-cf/concourse/scripts/file-to-yaml.sh secrets ${yaml_key_name}_key ${cn}.key  > ${cn}_key.yml
                paas-cf/concourse/scripts/file-to-yaml.sh secrets ${yaml_key_name}_cert ${cn}.crt  > ${cn}_cert.yml
              done

              echo "Generating uaa_jwt_signing public key from private key"
              openssl rsa -pubout -in uaa_jwt_signing.key -out uaa_jwt_verification.pem
              paas-cf/concourse/scripts/file-to-yaml.sh secrets uaa_jwt_verification_key uaa_jwt_verification.pem  > uaa_jwt_verification_key.yml
              cp *.yml cf-certs-yaml

      - task: extract-terraform-outputs
        config:
          platform: linux
          image: docker:///ruby
          inputs:
            - name: paas-cf
            - name: vpc-tfstate
            - name: bosh-tfstate
            - name: concourse-tfstate
            - name: cf-tfstate
          outputs:
            - name: extract-terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              SCPATH="./paas-cf/concourse/scripts"
              SCFILE="extract_terraform_state_to_yaml.rb"
              for state in vpc bosh concourse cf; do
                $SCPATH/$SCFILE < $state-tfstate/$state.tfstate > extract-terraform-outputs/$state.yml
              done

      - task: generate-manifest
        config:
          platform: linux
          image: docker:///governmentpaas/spruce
          params:
            MANIFEST_STUBS: |
              ./extract-terraform-outputs/*.yml
              ./cf-secrets/cf-secrets.yml
              ./cf-certs-yaml/*.yml
          inputs:
            - name: paas-cf
            - name: extract-terraform-outputs
            - name: cf-secrets
            - name: cf-certs-yaml
          outputs:
            - name: generate-manifest
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ./paas-cf/manifests/cf-manifest/build_manifest.sh $MANIFEST_STUBS > generate-manifest/cf-manifest.yml
      - put: cf-manifest
        params:
          file: generate-manifest/cf-manifest.yml

  - name: cf-deploy
    serial_groups: [ deploy ]
    serial: true
    plan:
      - aggregate:
        - get: pipeline-trigger
          passed: [ 'generate-cf-manifest' ]
          trigger: true
        - get: paas-cf
          passed: ['generate-cf-manifest']
        - get: cf-manifest
          passed: ['generate-cf-manifest']
          trigger: true
        - get: bosh-secrets
      - task: cf-deploy
        config:
          platform: linux
          image: docker:///governmentpaas/bosh-cli
          inputs:
          - name: paas-cf
          - name: cf-manifest
          - name: bosh-secrets
          outputs:
          - name: cf-deploy
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ./paas-cf/concourse/scripts/bosh_login.sh bosh-secrets/bosh-secrets.yml
              sed -e "s/^director_uuid:.*/director_uuid: $(bosh status --uuid)/" < cf-manifest/cf-manifest.yml > cf-deploy/cf-manifest.yml
              bosh deployment cf-deploy/cf-manifest.yml
              bosh -n deploy

      - put: cf-manifest
        params:
          file: cf-deploy/cf-manifest.yml

  - name: smoke-tests
    plan:
    - aggregate:
      - get: pipeline-trigger
        passed: [ 'cf-deploy']
        trigger: true
      - get: cf-release
        params:
          submodules:
          - src/smoke-tests
      - get: paas-cf
        passed: ['cf-deploy']
      - get: cf-manifest
        passed: ['cf-deploy']
      - get: bosh-CA
    - task: generate-test-config
      config:
        platform: linux
        inputs:
        - name: cf-release
        - name: paas-cf
        - name: cf-manifest
        outputs:
        - name: test-config
        image: docker:///governmentpaas/bosh-cli
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ./paas-cf/tests/bosh-template-renderer/render.rb \
              ./cf-release/jobs/smoke-tests/templates/run.erb \
              ./cf-release/jobs/smoke-tests/spec \
              ./cf-manifest/cf-manifest.yml \
                > ./test-config/run

            chmod +x ./test-config/run

            ./paas-cf/tests/bosh-template-renderer/render.rb \
              ./cf-release/jobs/smoke-tests/templates/config.json.erb \
              ./cf-release/jobs/smoke-tests/spec \
              ./cf-manifest/cf-manifest.yml \
                > ./test-config/config.json

    - task: run-tests
      config:
        platform: linux
        inputs:
        - name: paas-cf
        - name: cf-release
        - name: cf-manifest
        - name: test-config
        - name: bosh-CA
        image: docker:///governmentpaas/cf-acceptance-tests
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            echo "Adding bosh-CA to root certificates"
            tar -xf bosh-CA/bosh-CA.tar.gz -C /usr/local/share/ca-certificates bosh-CA.crt
            update-ca-certificates
            mkdir -p /var/vcap/jobs/smoke-tests/bin/ /var/vcap/packages/smoke-tests/src/github.com/cloudfoundry
            ln -snf $(pwd)/test-config/config.json /var/vcap/jobs/smoke-tests/bin/config.json
            ln -snf $(pwd)/test-config/run /var/vcap/jobs/smoke-tests/bin/run
            ln -snf /usr/local/go /var/vcap/packages/golang1.4
            ln -snf $(pwd)/cf-release/src/smoke-tests /var/vcap/packages/smoke-tests/src/github.com/cloudfoundry/cf-smoke-tests
            /var/vcap/jobs/smoke-tests/bin/run

  - name: acceptance-tests
    plan:
    - aggregate:
      - get: cf-release
        params:
          submodules:
          - src/github.com/cloudfoundry/cf-acceptance-tests
      - get: paas-cf
        passed: ['cf-deploy']
      - get: cf-manifest
        passed: ['cf-deploy']
        trigger: true
      - get: bosh-CA
    - task: generate-test-config
      config:
        platform: linux
        inputs:
        - name: cf-release
        - name: paas-cf
        - name: cf-manifest
        outputs:
        - name: test-config
        image: docker:///governmentpaas/bosh-cli
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ./paas-cf/tests/bosh-template-renderer/render.rb \
              ./cf-release/jobs/acceptance-tests/templates/run.erb \
              ./cf-release/jobs/acceptance-tests/spec \
              ./cf-manifest/cf-manifest.yml \
                > ./test-config/run

            chmod +x ./test-config/run

            ./paas-cf/tests/bosh-template-renderer/render.rb \
              ./cf-release/jobs/acceptance-tests/templates/config.json.erb \
              ./cf-release/jobs/acceptance-tests/spec \
              ./cf-manifest/cf-manifest.yml \
                > ./test-config/config.json

    - task: run-tests
      config:
        platform: linux
        inputs:
        - name: paas-cf
        - name: cf-release
        - name: cf-manifest
        - name: test-config
        - name: bosh-CA
        image: docker:///governmentpaas/cf-acceptance-tests
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            echo "Adding bosh-CA to root certificates"
            tar -xf bosh-CA/bosh-CA.tar.gz -C /usr/local/share/ca-certificates bosh-CA.crt
            update-ca-certificates
            mkdir -p /var/vcap/jobs/acceptance-tests/bin/ /var/vcap/packages/acceptance-tests/src/github.com/cloudfoundry
            ln -snf $(pwd)/test-config/config.json /var/vcap/jobs/acceptance-tests/bin/config.json
            ln -snf $(pwd)/test-config/run /var/vcap/jobs/acceptance-tests/bin/run
            ln -snf /usr/local/go /var/vcap/packages/golang1.4
            sed -i 's/bits=@"%s"/bits=@%s/' cf-release/src/github.com/cloudfoundry/cf-acceptance-tests/helpers/v3_helpers/v3.go
            ln -snf $(pwd)/cf-release/src/github.com/cloudfoundry/cf-acceptance-tests /var/vcap/packages/acceptance-tests/src/github.com/cloudfoundry/
            /var/vcap/jobs/acceptance-tests/bin/run

  - name: custom-acceptance-tests
    plan:
    - aggregate:
      - get: pipeline-trigger
        passed: ['cf-deploy']
        trigger: true
      - get: paas-cf
        passed: ['cf-deploy']
      - get: cf-manifest
        passed: ['cf-deploy']
        trigger: true
      - get: bosh-CA
    - task: generate-test-config
      config:
        platform: linux
        inputs:
          - name: paas-cf
          - name: cf-manifest
        outputs:
          - name: test-config
        image: docker:///ruby#2.2-slim
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            export CF_MANIFEST=cf-manifest/cf-manifest.yml
            ./paas-cf/tests/acceptance-tests/generate_test_config.rb \
              > test-config/config.json
    - task: run-tests
      config:
        platform: linux
        inputs:
          - name: paas-cf
          - name: test-config
          - name: bosh-CA
        image: docker:///governmentpaas/cf-acceptance-tests
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            echo "Adding bosh-CA to root certificates"
            tar -xf bosh-CA/bosh-CA.tar.gz -C /usr/local/share/ca-certificates bosh-CA.crt
            update-ca-certificates

            echo "Running tests"
            export CONFIG="$(pwd)/test-config/config.json"
            ./paas-cf/tests/acceptance-tests/run_tests.sh
