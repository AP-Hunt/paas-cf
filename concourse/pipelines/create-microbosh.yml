resources:
  - name: paas-cf
    type: git
    source:
      uri: https://github.com/alphagov/paas-cf.git
      branch: {{branch_name}}

  - name: vpc-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: vpc.tfstate

  - name: bosh-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh.tfstate

  - name: concourse-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: concourse.tfstate
      region_name: eu-west-1

  - name: bosh-init-state
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-manifest-state.json

  - name: bosh-manifest
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-manifest.yml

  - name: bosh-secrets
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-secrets.yml

  - name: bosh-CA
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-CA.tar.gz


  - name: pipeline-trigger
    type: semver-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      key: {{pipeline_trigger_file}}

  - name: ssh-private-key
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: id_rsa
      region_name: {{aws_region}}

jobs:
  - name: init
    serial: true
    plan:
    - get: paas-cf
    - put: pipeline-trigger
      params: {bump: patch}

  - name: bootstrap-s3-state
    serial: true
    plan:
    - get: pipeline-trigger
      trigger: true
      passed: [ init ]
    - get: paas-cf
      passed: [init]
    - task: bootstrap-s3-state
      config:
        image: docker:///governmentpaas/curl-ssl
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} bosh.tfstate paas-cf/concourse/init_files/terraform.tfstate.tpl
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} bosh-manifest-state.json paas-cf/concourse/init_files/bosh-init-state.json.tpl
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} bosh-CA.tar.gz paas-cf/concourse/init_files/empty.tar.gz
        inputs:
        - name: paas-cf

  - name: generate-secrets
    serial: true
    plan:
    - get: pipeline-trigger
      trigger: true
      passed: [ init ]
    - get: paas-cf
      passed: [init]

    - task: generate
      config:
        image: docker:///governmentpaas/mksecrets
        inputs:
        - name: paas-cf
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ./paas-cf/manifests/bosh-manifest/scripts/generate-bosh-secrets.sh > bosh-secrets.yml
            ls -l bosh-secrets.yml

    - task: upload
      config:
        image: docker:///governmentpaas/curl-ssl
        inputs:
        - name: paas-cf
        - name: generate
        run:
          path: paas-cf/concourse/scripts/s3init.sh
          args:
          - {{state_bucket}}
          - bosh-secrets.yml
          - generate/bosh-secrets.yml

  - name: generate-CA-certs
    serial: true
    plan:
    - get: pipeline-trigger
      trigger: true
      passed: [ init ]
    - get: paas-cf
      passed: [init]
    - get: bosh-CA

    - try:
        task: generate
        config:
          image: docker:///governmentpaas/certstrap
          inputs:
          - name: bosh-CA
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if  [ -z "$(tar -tvzf bosh-CA/bosh-CA.tar.gz)" ] ; then
                certstrap init --passphrase "" --common-name bosh-CA
                cd out
                tar -cvzf ../bosh-CA.tar.gz bosh-CA.*
              else
                echo "The CA cert already exists, skipping generation..."
                exit 1
              fi
        on_success:
          do:
            - put: bosh-CA
              params:
                file: generate/bosh-CA.tar.gz

  - name: bosh-terraform
    serial: true
    plan:
    - get: pipeline-trigger
      trigger: true
      passed: [ init ]
    - get: paas-cf
      passed: [init]
    - get: vpc-tfstate
    - get: concourse-tfstate
    - get: bosh-tfstate
    - task: terraform-variables
      config:
        image: docker:///ruby#2.2.3-slim
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
            < vpc-tfstate/vpc.tfstate \
            > terraform-variables/vpc.tfvars.sh
            ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
            < concourse-tfstate/concourse.tfstate \
            > terraform-variables/concourse.tfvars.sh
        inputs:
        - name: paas-cf
        - name: vpc-tfstate
        - name: concourse-tfstate
        outputs:
        - name: terraform-variables
    - task: terraform-apply
      config:
        image: docker:///governmentpaas/docker-terraform
        params:
          DEPLOY_ENV: {{deploy_env}}
          AWS_DEFAULT_REGION: {{aws_region}}
        inputs:
        - name: paas-cf
        - name: terraform-variables
        - name: bosh-tfstate
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            . terraform-variables/vpc.tfvars.sh
            . terraform-variables/concourse.tfvars.sh

            terraform apply -var env={{deploy_env}} -var-file=paas-cf/terraform/{{aws_account}}.tfvars \
              -state=bosh-tfstate/bosh.tfstate -state-out=bosh.tfstate paas-cf/terraform/bosh
      ensure:
        put: bosh-tfstate
        params:
          file: terraform-apply/bosh.tfstate

  - name: generate-bosh-manifest
    serial: true
    plan:
    - get: pipeline-trigger
      trigger: true
      passed: [bosh-terraform]
    - get: paas-cf
      passed: [init]
    - get: vpc-tfstate
    - get: bosh-tfstate
      passed: [bosh-terraform]
    - get: bosh-secrets
    - get: bosh-CA
      passed: [generate-CA-certs]
    - task: terraform_outputs
      config:
        image: docker:///ruby#2.2.3-slim
        run:
          path: sh
          args:
          - -c
          - -e
          - |
            ruby paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < vpc-tfstate/vpc.tfstate \
              > terraform-outputs/vpc.terraform-outputs.yml
            ruby paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < bosh-tfstate/bosh.tfstate \
              > terraform-outputs/bosh.terraform-outputs.yml
        inputs:
        - name: paas-cf
        - name: bosh-tfstate
        - name: vpc-tfstate
        outputs:
        - name: terraform-outputs
    - task: bosh-cert
      config:
        image: docker:///alpine#3.3
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            tar -xzf bosh-CA/bosh-CA.tar.gz
            paas-cf/concourse/scripts/file-to-yaml.sh secrets bosh_ca_cert bosh-CA.crt > bosh-ca-cert.yml
        inputs:
        - name: paas-cf
        - name: bosh-CA
    - task: render-manifest
      config:
        image: docker:///governmentpaas/spruce
        params:
          BOSH_MANIFEST_STUBS: |
            ./bosh-secrets/bosh-secrets.yml
            ./bosh-cert/bosh-ca-cert.yml
            ./terraform-outputs/bosh.terraform-outputs.yml
            ./terraform-outputs/vpc.terraform-outputs.yml
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ./paas-cf/manifests/bosh-manifest/build_manifest.sh $BOSH_MANIFEST_STUBS > bosh-manifest/bosh-manifest.yml
            /bin/cat bosh-manifest/bosh-manifest.yml
        inputs:
        - name: paas-cf
        - name: terraform-outputs
        - name: bosh-secrets
        - name: bosh-cert
        outputs:
        - name: bosh-manifest
      on_success:
        put: bosh-manifest
        params:
          file: bosh-manifest/bosh-manifest.yml

  - name: bosh-init
    plan:
    - get: pipeline-trigger
      trigger: true
      passed: [generate-bosh-manifest]
    - get: bosh-manifest
      trigger: true
      passed: [generate-bosh-manifest]
    - get: bosh-init-state
    - get: ssh-private-key

    - task: bosh-init-microbosh
      config:
        image: docker:///governmentpaas/bosh-init
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            mkdir -p bosh-manifest/.ssh
            cp ssh-private-key/id_rsa bosh-manifest/.ssh/id_rsa
            chmod 400 bosh-manifest/.ssh/id_rsa
            cp bosh-init-state/bosh-manifest-state.json bosh-manifest/bosh-manifest-state.json
            bosh-init deploy bosh-manifest/bosh-manifest.yml
        inputs:
        - name: bosh-manifest
        - name: bosh-init-state
        - name: ssh-private-key
      ensure:
        put: bosh-init-state
        params:
          file: bosh-init-microbosh/bosh-manifest/bosh-manifest-state.json
