---
groups:
- name: create-deployer
  jobs:
  - init-bucket
  - vpc
  - concourse-terraform
  - concourse-prepare-deploy
  - concourse-deploy
  - expunge-vagrant

resources:
  - name: paas-cf
    type: git
    source:
      uri: https://github.com/alphagov/paas-cf.git
      branch: {{branch_name}}

  - name: build-all-trigger
    type: semver
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      access_key_id: {{aws_access_key_id}}
      secret_access_key: {{aws_secret_access_key}}
      key: build-all-trigger

  - name: vpc-terraform-state
    type: s3
    source:
      bucket: {{state_bucket}}
      access_key_id: {{aws_access_key_id}}
      secret_access_key: {{aws_secret_access_key}}
      versioned_file: vpc.tfstate
      region_name: {{aws_region}}

  - name: concourse-terraform-state
    type: s3
    source:
      bucket: {{state_bucket}}
      access_key_id: {{aws_access_key_id}}
      secret_access_key: {{aws_secret_access_key}}
      versioned_file: concourse.tfstate
      region_name: {{aws_region}}

  - name: concourse-bosh-state
    type: s3
    source:
      bucket: {{state_bucket}}
      access_key_id: {{aws_access_key_id}}
      secret_access_key: {{aws_secret_access_key}}
      versioned_file: concourse-state.json
      region_name: {{aws_region}}

  - name: concourse-manifest
    type: s3
    source:
      bucket: {{state_bucket}}
      access_key_id: {{aws_access_key_id}}
      secret_access_key: {{aws_secret_access_key}}
      versioned_file: concourse.yml
      region_name: {{aws_region}}

jobs:
  - name: init-bucket
    serial: true
    plan:
    - get: paas-cf
    - task: create-init-bucket
      config:
        image: docker:///governmentpaas/docker-terraform
        params:
          TF_VAR_env: {{deploy_env}}
          AWS_DEFAULT_REGION: {{aws_region}}
          AWS_ACCESS_KEY_ID: {{aws_access_key_id}}
          AWS_SECRET_ACCESS_KEY: {{aws_secret_access_key}}
          TF_VAR_AWS_ACCESS_KEY_ID: {{aws_access_key_id}}
          TF_VAR_AWS_SECRET_ACCESS_KEY: {{aws_secret_access_key}}
        run:
          path: sh
          args:
          - -c
          - |
            cd paas-cf/terraform/bucket
            terraform apply 2>&1 | tee ./terraform.output
            terraform remote config -backend=s3 -backend-config={{tfstate_bucket}} -backend-config="key=bucket.tfstate"
            grep -q BucketAlreadyOwnedByYou ./terraform.output && exit 0
            grep -q "Creation complete" ./terraform.output && exit 0
            exit 1
        inputs:
          - name: paas-cf
    - task: s3init-concourse
      config:
        image: docker:///governmentpaas/curl-ssl
        params:
          AWS_ACCESS_KEY_ID: {{aws_access_key_id}}
          AWS_SECRET_ACCESS_KEY: {{aws_secret_access_key}}
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} concourse-state.json paas-cf/concourse/init_files/bosh-init-state.json.tpl
            paas-cf/concourse/scripts/s3init.sh {{state_bucket}} concourse.tfstate paas-cf/concourse/init_files/terraform.tfstate.tpl
        inputs:
        - name: paas-cf
    - put: build-all-trigger
      params: {bump: patch}

  - name: vpc
    serial: true
    plan:
    - get: paas-cf
      trigger: true
      passed: [init-bucket]
    - get: build-all-trigger
      trigger: true
      passed: [init-bucket]

    - task: deploy-vpc
      config:
        platform: linux
        image: docker:///governmentpaas/docker-terraform
        params:
          VAGRANT_IP: {{vagrant_ip}}
          TF_VAR_env: {{deploy_env}}
          AWS_DEFAULT_REGION: {{aws_region}}
          AWS_ACCESS_KEY_ID: {{aws_access_key_id}}
          AWS_SECRET_ACCESS_KEY: {{aws_secret_access_key}}
          TF_VAR_AWS_ACCESS_KEY_ID: {{aws_access_key_id}}
          TF_VAR_AWS_SECRET_ACCESS_KEY: {{aws_secret_access_key}}
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            cd paas-cf/terraform/vpc
            terraform remote config -backend=s3 -backend-config={{tfstate_bucket}} -backend-config="key=vpc.tfstate"
            terraform_params=${VAGRANT_IP:+-var vagrant_cidr=$VAGRANT_IP/32}
            terraform apply ${terraform_params}
        inputs:
        - name: paas-cf

  - name: concourse-terraform
    serial: true
    plan:
    - get: paas-cf
      passed: [vpc]
    - get: build-all-trigger
      trigger: true
      passed: [vpc]
    - get: vpc-terraform-state
    - get: concourse-terraform-state

    - task: vpc-terraform-outputs-to-sh
      config:
        image: docker:///ruby#2.2.3-slim
        inputs:
        - name: paas-cf
        - name: vpc-terraform-state
        outputs:
        - name: vpc-terraform-outputs
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
            < vpc-terraform-state/vpc.tfstate \
            > vpc-terraform-outputs/tfvars.sh
            ls -l vpc-terraform-outputs/tfvars.sh
            cat vpc-terraform-outputs/tfvars.sh

    - task: terraform-apply
      config:
        image: docker:///governmentpaas/docker-terraform
        inputs:
        - name: paas-cf
        - name: vpc-terraform-outputs
        params:
          VAGRANT_IP: {{vagrant_ip}}
          TF_VAR_env: {{deploy_env}}
          AWS_DEFAULT_REGION: {{aws_region}}
          AWS_ACCESS_KEY_ID: {{aws_access_key_id}}
          AWS_SECRET_ACCESS_KEY: {{aws_secret_access_key}}
          TF_VAR_AWS_ACCESS_KEY_ID: {{aws_access_key_id}}
          TF_VAR_AWS_SECRET_ACCESS_KEY: {{aws_secret_access_key}}
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            . vpc-terraform-outputs/tfvars.sh
            cd paas-cf/terraform/concourse
            terraform remote config -backend=s3 -backend-config={{tfstate_bucket}} -backend-config="key=concourse.tfstate"
            terraform_params=${VAGRANT_IP:+-var vagrant_cidr=$VAGRANT_IP/32}
            terraform apply ${terraform_params}

  - name: concourse-prepare-deploy
    serial: true
    plan:
    - get: paas-cf
      passed: [concourse-terraform]
    - get: build-all-trigger
      trigger: true
      passed: [concourse-terraform]
    - get: vpc-terraform-state
    - get: concourse-terraform-state

    - task: terraform-outputs-to-yaml
      config:
        image: docker:///ruby#2.2.3-slim
        inputs:
        - name: paas-cf
        - name: concourse-terraform-state
        - name: vpc-terraform-state
        outputs:
        - name: terraform-outputs
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ruby paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
            < vpc-terraform-state/vpc.tfstate \
            > terraform-outputs/vpc-terraform-outputs.yml
            ls -l terraform-outputs/vpc-terraform-outputs.yml
            cat terraform-outputs/vpc-terraform-outputs.yml

            ruby paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
            < concourse-terraform-state/concourse.tfstate \
            > terraform-outputs/concourse-terraform-outputs.yml
            ls -l terraform-outputs/concourse-terraform-outputs.yml
            cat terraform-outputs/concourse-terraform-outputs.yml

    - task: create-concourse-secrets
      config:
        params:
          aws_access_key_id: {{aws_access_key_id}}
          aws_secret_access_key: {{aws_secret_access_key}}
          concourse_atc_password: {{concourse_atc_password}}
        outputs:
          - name: concourse-secrets
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            cat > concourse-secrets/concourse-secrets.yml << EOF
            ---
            secrets:
              aws_access_key_id: ${aws_access_key_id}
              aws_secret_access_key: ${aws_secret_access_key}
              concourse_atc_password: ${concourse_atc_password}
            EOF
            ls -l concourse-secrets/concourse-secrets.yml

    - task: generate-concourse-manifest
      config:
        image: docker:///governmentpaas/spruce
        inputs:
        - name: paas-cf
        - name: concourse-secrets
        - name: terraform-outputs
        outputs:
        - name: concourse-manifest
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            spruce merge --prune terraform_outputs --prune secrets \
              paas-cf/manifests/concourse-base.yml concourse-secrets/concourse-secrets.yml \
              terraform-outputs/concourse-terraform-outputs.yml \
              terraform-outputs/vpc-terraform-outputs.yml \
              > concourse-manifest/concourse.yml
            ls -l concourse-manifest/concourse.yml

    - put: concourse-manifest
      params:
        from: concourse-manifest/concourse.yml

  - name: concourse-deploy
    serial: true
    plan:
    - get: build-all-trigger
      trigger: true
      passed: [concourse-prepare-deploy]
    - get: concourse-bosh-state
    - get: concourse-manifest
      passed: [concourse-prepare-deploy]

    - task: concourse-deploy
      timeout: 30m
      config:
        image: docker:///governmentpaas/bosh-init
        inputs:
        - name: concourse-manifest
        - name: concourse-bosh-state
        params: {private_ssh_key: {{private_ssh_key}} }
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            echo -n "${private_ssh_key}" > id_rsa
            chmod 400 id_rsa
            ls -l id_rsa
            cp -v concourse-bosh-state/concourse-state.json .
            cp -v concourse-manifest/concourse.yml .
            export BOSH_INIT_LOG_LEVEL={{log_level}}
            bosh-init deploy concourse.yml
            rm concourse-manifest/concourse.yml
            rm id_rsa
      ensure:
        put: concourse-bosh-state
        params:
          from: /concourse-deploy/concourse-state.json

  - name: expunge-vagrant
    serial: true
    plan:
    - get: paas-cf
    - get: build-all-trigger
      trigger: true
      passed: [concourse-deploy]
    - get: vpc-terraform-state
    - get: concourse-terraform-state

    - task: vpc-terraform-outputs-to-sh
      config:
        image: docker:///ruby#2.2.3-slim
        inputs:
        - name: paas-cf
        - name: vpc-terraform-state
        outputs:
        - name: vpc-terraform-outputs
        run:
          path: sh
          args:
          - -e
          - -c
          - |
            ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
            < vpc-terraform-state/vpc.tfstate \
            > vpc-terraform-outputs/tfvars.sh
            ls -l vpc-terraform-outputs/tfvars.sh
            cat vpc-terraform-outputs/tfvars.sh

    - task: remove-vagrant-IP-from-ssh-SG
      config:
        platform: linux
        image: docker:///governmentpaas/docker-terraform
        inputs:
        - name: paas-cf
        params:
          TF_VAR_env: {{deploy_env}}
          AWS_DEFAULT_REGION: {{aws_region}}
          AWS_ACCESS_KEY_ID: {{aws_access_key_id}}
          AWS_SECRET_ACCESS_KEY: {{aws_secret_access_key}}
          TF_VAR_AWS_ACCESS_KEY_ID: {{aws_access_key_id}}
          TF_VAR_AWS_SECRET_ACCESS_KEY: {{aws_secret_access_key}}
        run:
          path: sh
          args:
          - -e
          - -c
          - -x
          - |
            cd paas-cf/terraform/vpc
            terraform remote config -backend=s3 -backend-config={{tfstate_bucket}} -backend-config="key=vpc.tfstate"
            terraform apply -target=aws_security_group.office-access-ssh

    - task: remove-vagrant-IP-from-concourse-SG
      config:
        platform: linux
        image: docker:///governmentpaas/docker-terraform
        inputs:
        - name: paas-cf
        - name: vpc-terraform-outputs
        params:
          TF_VAR_env: {{deploy_env}}
          AWS_DEFAULT_REGION: {{aws_region}}
          AWS_ACCESS_KEY_ID: {{aws_access_key_id}}
          AWS_SECRET_ACCESS_KEY: {{aws_secret_access_key}}
          TF_VAR_AWS_ACCESS_KEY_ID: {{aws_access_key_id}}
          TF_VAR_AWS_SECRET_ACCESS_KEY: {{aws_secret_access_key}}
        run:
          path: sh
          args:
          - -e
          - -c
          - -x
          - |
            . vpc-terraform-outputs/tfvars.sh
            cd paas-cf/terraform/concourse
            terraform remote config -backend=s3 -backend-config={{tfstate_bucket}} -backend-config="key=concourse.tfstate"
            terraform apply -target=aws_security_group.concourse
