---
meta:
  containers:
    awscli: &awscli-image-resource
      type: docker-image
      source:
        repository: governmentpaas/awscli
        tag: b2495d6ed07f680125d19aa7d1701da7efabb289
    bosh-cli-v2: &gov-paas-bosh-cli-v2-image-resource
      type: docker-image
      source:
        repository: governmentpaas/bosh-cli-v2
        tag: 4012d25ceb903b46908a830b8e05773ced1c8f86
    cf-acceptance-tests: &cf-acceptance-tests-image-resource
      type: docker-image
      source:
        repository: governmentpaas/cf-acceptance-tests
        tag: a4abdc079caf1eccb11a6bd2c486469cd9d0362a
    cf-cli: &cf-cli-image-resource
      type: docker-image
      source:
        repository: governmentpaas/cf-cli
        tag: 51c4648c56a18e28a295e73963b65fdbfe76e52f
    git-ssh: &git-ssh-image-resource
      type: docker-image
      source:
        repository: governmentpaas/git-ssh
        tag: 465642da06051a55630d39c899697b678f66a7f7
    ruby-slim: &ruby-slim-image-resource
      type: docker-image
      source:
        repository: ruby
        tag: 2.5-slim
    terraform: &terraform-image-resource
      type: docker-image
      source:
        repository: governmentpaas/terraform
        tag: f810666094e6c65eeb183f9833b231aa24df6811

groups:
  - name: deploy
    jobs:
      - pipeline-lock
      - pre-deploy
      - generate-secrets
      - app-availability-tests
      - api-availability-tests
      - cf-terraform
      - generate-cf-config
      - cf-deploy
      - prometheus-deploy
      - smoke-tests
      - tag-release
      - pipeline-unlock
  - name: operator
    jobs:
      - generate-git-keys
      - show-release-version
      - bump-minor-version
      - bump-major-version
      - bump-patch-version
      - pipeline-check-lock
      - pipeline-release-lock
  - name: tests
    jobs:
      - app-availability-tests
      - api-availability-tests
      - smoke-tests
  - name: health
    jobs:
      - continuous-smoke-tests
      - check-certificates
  - name: credentials
    jobs:
      - rotate-cf-admin-password
      - rotate-cloudfoundry-credentials
      - expire-aws-keys
      - rotate-cf-certs-cas
      - rotate-cf-certs-leafs
      - delete-old-cf-certs
resource_types:
- name: s3-iam
  type: docker-image
  source:
    repository: governmentpaas/s3-resource
    tag: fda60bf4c5f85e96c16f704e128e5ead9e84d30d

- name: semver-iam
  type: docker-image
  source:
    repository: governmentpaas/semver-resource
    tag: ecbdd201e122b44de99a40ac9f24407c1a43b9a2

- name: pagerduty-notification-resource
  type: docker-image
  source:
    repository: governmentpaas/pagerduty-notification-resource
    tag: 2018-11-15

resources:
  - name: pipeline-trigger
    type: semver-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      key: ((pipeline_trigger_file))

  - name: paas-cf
    type: git
    source:
      uri: https://github.com/alphagov/paas-cf.git
      branch: ((branch_name))
      tag_filter: ((paas_cf_tag_filter))
      commit_verification_keys: ((gpg_public_keys))

  - name: vpc-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: vpc.tfstate

  - name: concourse-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: concourse.tfstate
      region_name: ((aws_region))

  - name: bosh-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh.tfstate

  - name: bosh-secrets
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-secrets.yml

  - name: bosh-CA-crt
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: bosh-CA.crt

  - name: ipsec-CA
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: ipsec-CA.tar.gz
      initial_version: "-"
      # This is an empty tar.gz file base64 encoded
      initial_content_binary: "H4sICMtSp1YAA2NvbmNvdXJzZS1jZXJ0cy50YXIA7cEBDQAAAMKg909tDjegAAAAAAAAAAAAgDcDmt4dJwAoAAA="

  - name: git-ssh-private-key
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: git_id_rsa
      region_name: ((aws_region))

  - name: cf-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket))
      versioned_file: cf.tfstate
      region_name: ((aws_region))
      initial_version: "-"
      initial_content_text: |
        {
            "version": 3,
            "terraform_version": "0.11.1",
            "serial": 0,
            "modules": [
                {
                    "path": [
                        "root"
                    ],
                    "outputs": {},
                    "resources": {},
                    "depends_on": []
                }
            ]
        }

  - name: cf-secrets
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cf-secrets.yml
      initial_version: "-"

  - name: cf-vars-store
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cf-vars-store.yml
      initial_version: "-"

  - name: cf-manifest
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cf-manifest.yml

  - name: cf-manifest-pre-vars
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cf-manifest-pre-vars.yml

  - name: logit-secrets
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: logit-secrets.yml
      initial_version: "-"
      initial_content_text: ""

  - name: cloud-config
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: cloud-config.yml

  - name: deployed-healthcheck
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: healthcheck-deployed
      initial_version: "-"
      initial_content_text: "no"

  - name: cf-smoke-tests-release
    type: git
    source:
      uri: https://github.com/cloudfoundry/cf-smoke-tests-release
      tag_filter: "40.0.17"
      submodules:
      - "src/smoke_tests"

  - name: git-keys
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: git-keys.tar.gz
      initial_version: "-"
      # This is an empty tar.gz file base64 encoded
      initial_content_binary: "H4sICMtSp1YAA2NvbmNvdXJzZS1jZXJ0cy50YXIA7cEBDQAAAMKg909tDjegAAAAAAAAAAAAgDcDmt4dJwAoAAA="

  - name: release-version
    type: semver-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      key: release-version
      initial_version: 0.0.0

  - name: pipeline-pool
    type: pool
    source:
      uri: ((git_concourse_pool_clone_full_url_ssh))
      branch: master
      pool: ((pipeline_name))
      private_key: ((pipeline_lock_git_private_key))

  - name: smoke-tests-timer
    type: time
    source:
      interval: 5m

  - name: check-certificates-timer
    type: time
    source:
      interval: 24h

  - name: expire-aws-keys-timer
    type: time
    source:
      interval: 720h

  - name: prometheus-vars-store
    type: s3-iam
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: prometheus-vars-store.yml
      initial_version: "-"

  - name: pagerduty-notify
    type: pagerduty-notification-resource
    source:
      service_key: ((pagerduty_integration_key))

jobs:
  - name: pipeline-lock
    serial: true
    plan:
      - aggregate:
        - get: paas-cf
          trigger: ((auto_deploy))
        - get: git-ssh-private-key
      - task: init-pipeline-pool
        config:
          platform: linux
          image_resource: *git-ssh-image-resource
          inputs:
            - name: paas-cf
            - name: git-ssh-private-key
          params:
            DEPLOY_ENV: ((deploy_env))
            AWS_ACCOUNT: ((aws_account))
            DISABLE_PIPELINE_LOCKING: ((disable_pipeline_locking))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ "${DISABLE_PIPELINE_LOCKING:-}" = "true" ] ; then
                 echo "Pipeline locking is disabled, skipping..."
                 exit 0
              fi
              chmod 600 git-ssh-private-key/git_id_rsa
              git config --global push.default simple
              git config --global user.email "concourse@${DEPLOY_ENV}.${AWS_ACCOUNT}"
              git config --global user.name "Concourse server ${DEPLOY_ENV} in ${AWS_ACCOUNT}"

              ./paas-cf/concourse/scripts/create_pool_lock.sh \
                "((git_concourse_pool_clone_full_url_ssh))" \
                "$(pwd)/git-ssh-private-key/git_id_rsa" \
                "((pipeline_name))" lock

      - try:
          task: lock-the-pipeline
          config:
            image_resource:
              type: docker-image
              source:
                repository: alpine
                tag: 3.7
            platform: linux
            params:
              DISABLE_PIPELINE_LOCKING: ((disable_pipeline_locking))
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                if [ "${DISABLE_PIPELINE_LOCKING:-}" = "true" ] ; then
                   echo "Pipeline locking is disabled, skipping..."
                   exit 0
                fi
                echo "About to lock. This job will fail and this is OK."
                exit 1
          on_failure:
            put: pipeline-pool
            params:
              claim: lock

      - task: self-update-pipeline
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/self-update-pipelines
              tag: 0eff5b6a9c092f865a2b19cc4e75a3b539b82fa2
          inputs:
            - name: paas-cf
          params:
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            MAKEFILE_ENV_TARGET: ((makefile_env_target))
            AWS_DEFAULT_REGION: ((aws_region))
            SELF_UPDATE_PIPELINE: ((self_update_pipeline))
            PIPELINES_TO_UPDATE: ((pipeline_name))
            BOSH_AZ: ((bosh_az))
            SKIP_AWS_CREDENTIAL_VALIDATION: true
            ENABLE_DATADOG: ((enable_datadog))
            NEW_ACCOUNT_EMAIL_ADDRESS: ((NEW_ACCOUNT_EMAIL_ADDRESS))
            SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
          run:
            path: ./paas-cf/concourse/scripts/self-update-pipeline.sh
      - put: pipeline-trigger
        params: {bump: patch}

  - name: generate-secrets
    serial_groups: [cf-deploy]
    serial: true
    plan:
      - aggregate:
          - get: paas-cf
            passed: ['pipeline-lock']
          - get: pipeline-trigger
            passed: ['pipeline-lock']
            trigger: true
          - get: ipsec-CA
          - get: cf-secrets
      - aggregate:
        - task: generate-ipsec-CA
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: governmentpaas/certstrap
                tag: 465642da06051a55630d39c899697b678f66a7f7
            inputs:
              - name: paas-cf
              - name: ipsec-CA
                path: existing-ipsec-CA
            outputs:
              - name: generated-ipsec-CA
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  if  [ -z "$(tar -tvzf existing-ipsec-CA/ipsec-CA.tar.gz)" ] ; then
                    certstrap init --years "10" --passphrase "" --common-name ipsec-CA
                    (cd out && tar -cvzf ../generated-ipsec-CA/ipsec-CA.tar.gz ipsec-CA.*)
                  else
                    echo "The CA cert already exists, skipping generation..."
                    cp existing-ipsec-CA/ipsec-CA.tar.gz generated-ipsec-CA/ipsec-CA.tar.gz
                    mkdir out
                    tar -xvzf generated-ipsec-CA/ipsec-CA.tar.gz -C out
                  fi
          on_success:
            put: ipsec-CA
            params:
              file: generated-ipsec-CA/ipsec-CA.tar.gz

        - task: generate-cf-secrets
          config:
            platform: linux
            image_resource: *ruby-slim-image-resource
            inputs:
              - name: paas-cf
              - name: cf-secrets
            outputs:
              - name: generated-cf-secrets
            run:
              path: sh
              args:
                - -c
                - -e
                - |
                  ./paas-cf/manifests/cf-manifest/scripts/generate-cf-secrets.rb \
                    --existing-secrets cf-secrets/cf-secrets.yml \
                    > generated-cf-secrets/cf-secrets.yml
                  ls -l generated-cf-secrets
          on_success:
            put: cf-secrets
            params:
              file: generated-cf-secrets/cf-secrets.yml

  - name: pre-deploy
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['generate-secrets']
            trigger: true
          - get: deployed-healthcheck
          - get: paas-cf
            passed: ['generate-secrets']
          - get: cf-vars-store
      - task: wait-for-app-availability-tests
        config:
          platform: linux
          inputs:
            - name: paas-cf
            - name: cf-vars-store
            - name: deployed-healthcheck
            - name: pipeline-trigger
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            CF_ADMIN: admin
          image_resource: *cf-cli-image-resource
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping wait-for-app-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi

                CF_PASS=$(awk '/cf_admin_password/ {print $2}' cf-vars-store/cf-vars-store.yml | tr -d '"')
                API_ENDPOINT="https://api.${SYSTEM_DNS_ZONE_NAME}"
                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)

                echo | cf login -a "${API_ENDPOINT}" -u "${CF_ADMIN}" -p "${CF_PASS}" > /dev/null
                cf target -o admin -s healthchecks > /dev/null

                echo "Waiting for ~2mins for app-availability-tests job to start:"
                for _ in $(seq 24); do
                  if cf logs healthcheck --recent | grep -q "availability-test=${PIPELINE_TRIGGER_VERSION}"; then
                    echo "Request detected"
                    exit 0
                  fi
                  printf "."
                  sleep 5
                done

                echo "timeout waiting for app-availability-tests job to start"
                exit 1
      - task: wait-for-api-availability-tests
        config:
          platform: linux
          inputs:
            - name: paas-cf
            - name: deployed-healthcheck
            - name: pipeline-trigger
          params:
            AWS_DEFAULT_REGION: ((aws_region))
          image_resource: *awscli-image-resource
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping wait-for-api-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi

                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)
                JOB_FILE="jobs/${PIPELINE_TRIGGER_VERSION}/api-availability-tests"
                bucket=((state_bucket))

                echo "Waiting for ~2mins for api-availability-tests job to start by polling for ${bucket}/${JOB_FILE}"
                for _ in $(seq 24); do
                  if aws s3 ls "s3://${bucket}/${JOB_FILE}" ; then
                    echo "$JOB_FILE detected"
                    exit 0
                  fi
                  printf "."
                  sleep 5
                done

                echo "timeout waiting for api-availability-tests job to start"
                exit 1

  - name: app-availability-tests
    serial: true
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['generate-secrets']
            trigger: true
          - get: deployed-healthcheck
          - get: paas-cf
            passed: ['generate-secrets']
      - task: run-tests
        attempts: 2
        config:
          platform: linux
          image_resource: *cf-acceptance-tests-image-resource
          inputs:
            - name: paas-cf
            - name: pipeline-trigger
            - name: deployed-healthcheck
          params:
            SKIP_SSL_VALIDATION: true
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            CONCOURSE_ATC_USERNAME: admin
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            CONCOURSE_ATC_PASSWORD: ((concourse_atc_password))
            SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping app-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi

                export CONCOURSE_ATC_URL
                CONCOURSE_ATC_URL=https://deployer.${SYSTEM_DNS_ZONE_NAME}
                export PIPELINE_TRIGGER_VERSION
                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)

                if [ "${SLIM_DEV_DEPLOYMENT}" = "true" ]; then
                  echo "Running app-availability-tests but ignoring failures"
                  ./paas-cf/platform-tests/run_tests.sh ./paas-cf/platform-tests/src/platform/availability/app || true
                else
                  echo "Running app-availability-tests"
                  ./paas-cf/platform-tests/run_tests.sh ./paas-cf/platform-tests/src/platform/availability/app
                fi

  - name: api-availability-tests
    serial: true
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['generate-secrets']
            trigger: true
          - get: deployed-healthcheck
          - get: cf-vars-store
          - get: paas-cf
            passed: ['generate-secrets']

      - task: upload-job-file
        config:
          platform: linux
          image_resource: *awscli-image-resource
          inputs:
            - name: pipeline-trigger
            - name: deployed-healthcheck
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping api-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi

                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)
                JOB_FILE="jobs/${PIPELINE_TRIGGER_VERSION}/api-availability-tests"
                echo "Writing $JOB_FILE to S3 to signal job start"
                echo 'started' | aws s3 cp - "s3://((state_bucket))/$JOB_FILE"

      - task: run-tests
        config:
          platform: linux
          image_resource: *cf-acceptance-tests-image-resource
          inputs:
            - name: paas-cf
            - name: pipeline-trigger
            - name: deployed-healthcheck
            - name: cf-vars-store
          params:
            SKIP_SSL_VALIDATION: true
            APPS_DNS_ZONE_NAME: ((apps_dns_zone_name))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            CONCOURSE_ATC_USERNAME: admin
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            CONCOURSE_ATC_PASSWORD: ((concourse_atc_password))
            AWS_DEFAULT_REGION: ((aws_region))
            SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
                if [ "${HEALTHCHECK_DEPLOYED}" = "no" ]; then
                  echo "Skipping api-availability-tests because the healthcheck is not deployed"
                  exit 0
                fi

                export CONCOURSE_ATC_URL="https://deployer.${SYSTEM_DNS_ZONE_NAME}"
                export CF_USER="admin"
                export CF_PASS
                CF_PASS=$(awk '/cf_admin_password/ {print $2}' cf-vars-store/cf-vars-store.yml | tr -d '"')
                export PIPELINE_TRIGGER_VERSION
                PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)
                export API_ENDPOINT="https://api.${SYSTEM_DNS_ZONE_NAME}"

                cf login -a "${API_ENDPOINT}" -u "${CF_USER}" -p "${CF_PASS}" -o admin -s healthchecks

                if [ "${SLIM_DEV_DEPLOYMENT}" = "true" ]; then
                  echo "Running api-availability-tests but ignoring failures"
                  ./paas-cf/platform-tests/run_tests.sh ./paas-cf/platform-tests/src/platform/availability/api || true
                else
                  echo "Running api-availability-tests"
                  ./paas-cf/platform-tests/run_tests.sh ./paas-cf/platform-tests/src/platform/availability/api
                fi
        ensure:
          task: delete-job-file
          config:
            platform: linux
            image_resource: *awscli-image-resource
            inputs:
              - name: pipeline-trigger
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  PIPELINE_TRIGGER_VERSION=$(cat pipeline-trigger/number)
                  JOB_FILE="jobs/${PIPELINE_TRIGGER_VERSION}/api-availability-tests"
                  aws s3 rm "s3://((state_bucket))/${JOB_FILE}"

  - name: cf-terraform
    serial_groups: [cf-deploy]
    serial: true
    plan:
      - aggregate:
          - get: paas-cf
            passed: ['pre-deploy']
          - get: pipeline-trigger
            passed: ['pre-deploy']
            trigger: true
          - get: vpc-tfstate
          - get: concourse-tfstate
          - get: cf-tfstate
          - get: cf-secrets
            passed: ['generate-secrets']

      - task: extract-terraform-variables
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-cf
            - name: vpc-tfstate
            - name: concourse-tfstate
            - name: cf-secrets
          outputs:
            - name: terraform-variables
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                < vpc-tfstate/vpc.tfstate > terraform-variables/vpc.tfvars.sh
                ruby paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                < concourse-tfstate/concourse.tfstate > terraform-variables/concourse.tfvars.sh
                ruby paas-cf/concourse/scripts/extract_tf_vars_from_yaml.rb \
                < cf-secrets/cf-secrets.yml > terraform-variables/cf-secrets.tfvars.sh

      - task: generate-peer-tfvars
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-cf
          outputs:
            - name: vpc-peering-tfvars
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ruby paas-cf/terraform/scripts/generate_vpc_peering_tfvars.rb "paas-cf/terraform/((deploy_env)).vpc_peering.json" \
                > vpc-peering-tfvars/vpc-peers.tfvars

                cat vpc-peering-tfvars/vpc-peers.tfvars

      - task: terraform-apply
        config:
          platform: linux
          image_resource: *terraform-image-resource
          inputs:
            - name: terraform-variables
            - name: paas-cf
            - name: cf-tfstate
            - name: vpc-peering-tfvars
          outputs:
            - name: updated-tfstate
          params:
            TF_VAR_env: ((deploy_env))
            TF_VAR_system_dns_zone_name: ((system_dns_zone_name))
            TF_VAR_apps_dns_zone_name: ((apps_dns_zone_name))
            AWS_DEFAULT_REGION: ((aws_region))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                . terraform-variables/vpc.tfvars.sh
                . terraform-variables/concourse.tfvars.sh
                . terraform-variables/cf-secrets.tfvars.sh

                cp cf-tfstate/cf.tfstate updated-tfstate/cf.tfstate
                terraform init paas-cf/terraform/cloudfoundry
                terraform apply \
                  -auto-approve=true \
                  -var-file="paas-cf/terraform/((aws_account)).tfvars" \
                  -var-file="paas-cf/terraform/((aws_region)).tfvars" \
                  -var-file=vpc-peering-tfvars/vpc-peers.tfvars \
                  -state=updated-tfstate/cf.tfstate \
                  paas-cf/terraform/cloudfoundry
        ensure:
          put: cf-tfstate
          params:
            file: updated-tfstate/cf.tfstate

      # FIXME: Move this operation to Terraform when this feature is added:
      # https://github.com/terraform-providers/terraform-provider-aws/issues/113
      - task: add-aws-users-to-groups
        config:
          platform: linux
          image_resource: *awscli-image-resource
          params:
            DEPLOY_ENV: ((deploy_env))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              aws iam add-user-to-group --user-name "ses-smtp-${DEPLOY_ENV}" --group-name email-senders
              aws iam add-user-to-group --user-name "metrics-exporter-${DEPLOY_ENV}" --group-name metrics-exporters

      - task: extract-cf-terraform-outputs
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-cf
            - name: cf-tfstate
          outputs:
            - name: cf-terraform-outputs
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                SCPATH="./paas-cf/concourse/scripts"
                SCFILE="extract_tf_vars_from_terraform_state.rb"
                $SCPATH/$SCFILE < cf-tfstate/cf.tfstate > cf-terraform-outputs/cf.tfstate.sh
                ls -l cf-terraform-outputs/cf.tfstate.sh

      - task: init-db
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/psql
              tag: 465642da06051a55630d39c899697b678f66a7f7
          inputs:
            - name: terraform-variables
            - name: paas-cf
            - name: cf-terraform-outputs
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                . terraform-variables/cf-secrets.tfvars.sh
                . cf-terraform-outputs/cf.tfstate.sh

                paas-cf/manifests/cf-manifest/scripts/create-cf-dbs.sh

  - name: generate-cf-config
    serial_groups: [cf-deploy]
    serial: true
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['cf-terraform']
            trigger: true
          - get: paas-cf
            passed: ['cf-terraform']
          - get: ipsec-CA
          - get: cf-secrets
            passed: ['cf-terraform']
          - get: cf-vars-store
          - get: vpc-tfstate
          - get: concourse-tfstate
          - get: bosh-tfstate
          - get: cf-tfstate
            passed: ['cf-terraform']
          - get: logit-secrets

      - aggregate:
        - task: extract-terraform-outputs
          config:
            platform: linux
            image_resource: *ruby-slim-image-resource
            inputs:
              - name: paas-cf
              - name: vpc-tfstate
              - name: bosh-tfstate
              - name: concourse-tfstate
              - name: cf-tfstate
            outputs:
              - name: terraform-outputs
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  for state in vpc bosh concourse cf; do
                    ./paas-cf/concourse/scripts/extract_terraform_state_to_yaml.rb \
                      < ${state}-tfstate/${state}.tfstate \
                      > terraform-outputs/${state}.yml
                    ./paas-cf/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                      < ${state}-tfstate/${state}.tfstate \
                      > terraform-outputs/${state}.tfvars.sh
                  done

        - task: generate-peer-opsfile
          config:
            platform: linux
            image_resource: *ruby-slim-image-resource
            inputs:
              - name: paas-cf
            outputs:
              - name: vpc-peering-opsfile
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  ruby paas-cf/terraform/scripts/generate_vpc_peering_opsfile.rb "paas-cf/terraform/((deploy_env)).vpc_peering.json" \
                  > vpc-peering-opsfile/vpc-peers.yml

                  cat vpc-peering-opsfile/vpc-peers.yml

      - do:
        - task: generate-cloud-config
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: paas-cf
              - name: terraform-outputs
              - name: cf-secrets
            outputs:
              - name: cloud-config
            params:
              CF_ENV_SPECIFIC_MANIFEST: paas-cf/manifests/cf-manifest/env-specific/((cf_env_specific_manifest))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  paas-cf/manifests/cf-manifest/scripts/generate-cloud-config.sh > cloud-config/cloud-config.yml

          on_success:
            put: cloud-config
            params:
              file: cloud-config/cloud-config.yml

        - task: generate-cf-manifest
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: cf-vars-store
              - name: paas-cf
              - name: ipsec-CA
              - name: terraform-outputs
              - name: cf-secrets
              - name: vpc-peering-opsfile
              - name: logit-secrets
            outputs:
              - name: cf-manifest
              - name: cf-manifest-pre-vars
              - name: cf-vars-store-updated
            params:
              CF_ENV_SPECIFIC_MANIFEST: paas-cf/manifests/cf-manifest/env-specific/((cf_env_specific_manifest))
              ENABLE_DATADOG: ((enable_datadog))
              DISABLE_USER_CREATION: ((disable_user_creation))
              SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
            run:
              path: sh
              args:
                - -e
                - -u
                - -c
                - |
                  cat <<EOF > environment-variables.yml
                  ---
                  system_domain: ((system_dns_zone_name))
                  app_domain: ((apps_dns_zone_name))
                  environment: ((deploy_env))
                  deployment_name: ((deploy_env))
                  aws_account: ((aws_account))
                  datadog_api_key: ((datadog_api_key))
                  datadog_app_key: ((datadog_app_key))
                  oauth_client_id: ((oauth_client_id))
                  oauth_client_secret: ((oauth_client_secret))
                  EOF

                  tar -xzf ./ipsec-CA/ipsec-CA.tar.gz -C ./ipsec-CA
                  cp cf-vars-store/cf-vars-store.yml cf-vars-store-updated/
                  ./paas-cf/manifests/cf-manifest/scripts/generate-manifest.sh \
                    --var-errs \
                    --vars-store cf-vars-store-updated/cf-vars-store.yml \
                    > cf-manifest/cf-manifest.yml
                  ./paas-cf/manifests/cf-manifest/scripts/generate-manifest.sh \
                    > cf-manifest-pre-vars/cf-manifest-pre-vars.yml

          on_success:
            aggregate:
            - put: cf-manifest
              params:
                file: cf-manifest/cf-manifest.yml
            - put: cf-manifest-pre-vars
              params:
                file: cf-manifest-pre-vars/cf-manifest-pre-vars.yml
            - put: cf-vars-store
              params:
                file: cf-vars-store-updated/cf-vars-store.yml

  - name: cf-deploy
    serial_groups: [cf-deploy]
    serial: true
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['generate-cf-config']
            trigger: true
          - get: paas-cf
            passed: ['generate-cf-config']
          - get: cf-vars-store
            passed: ['generate-cf-config']
          - get: cloud-config
            passed: ['generate-cf-config']
          - get: cf-manifest
            passed: ['generate-cf-config']
          - get: bosh-secrets
          - get: bosh-CA-crt

      - aggregate:
        - task: get-and-upload-stemcell
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: bosh-secrets
              - name: paas-cf
              - name: cf-manifest
              - name: bosh-CA-crt
              - name: cf-vars-store
            params:
              BOSH_ENVIRONMENT: ((bosh_fqdn))
              BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
              BOSH_DEPLOYMENT: ((deploy_env))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb

                  BOSH_CLIENT=admin
                  BOSH_CLIENT_SECRET=$($VAL_FROM_YAML secrets.bosh_admin_password bosh-secrets/bosh-secrets.yml)
                  export BOSH_CLIENT
                  export BOSH_CLIENT_SECRET

                  stemcell_index=0
                  while true; do
                    if ! $VAL_FROM_YAML "stemcells.${stemcell_index}" cf-manifest/cf-manifest.yml > /dev/null 2>&1; then
                      break
                    fi

                    STEMCELL_VERSION=$($VAL_FROM_YAML "stemcells.${stemcell_index}.version" cf-manifest/cf-manifest.yml)
                    STEMCELL_OS=$($VAL_FROM_YAML "stemcells.${stemcell_index}.os" cf-manifest/cf-manifest.yml)

                    wget "https://bosh.io/d/stemcells/bosh-aws-xen-hvm-${STEMCELL_OS}-go_agent?v=${STEMCELL_VERSION}" -O stemcell.tgz

                    bosh -n upload-stemcell stemcell.tgz

                    stemcell_index=$((stemcell_index + 1))
                  done

        - task: update-cloud-config
          config:
            platform: linux
            image_resource: *gov-paas-bosh-cli-v2-image-resource
            inputs:
              - name: cloud-config
              - name: bosh-secrets
              - name: paas-cf
              - name: bosh-CA-crt
            params:
              BOSH_ENVIRONMENT: ((bosh_fqdn))
              BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
              BOSH_DEPLOYMENT: ((deploy_env))
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb
                  BOSH_CLIENT=admin
                  BOSH_CLIENT_SECRET=$($VAL_FROM_YAML secrets.bosh_admin_password bosh-secrets/bosh-secrets.yml)
                  export BOSH_CLIENT
                  export BOSH_CLIENT_SECRET

                  bosh -n update-cloud-config cloud-config/cloud-config.yml

      - task: cf-deploy
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-cf
            - name: cf-manifest
            - name: bosh-secrets
            - name: bosh-CA-crt
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: ((deploy_env))
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb
                BOSH_CLIENT=admin
                BOSH_CLIENT_SECRET=$($VAL_FROM_YAML secrets.bosh_admin_password bosh-secrets/bosh-secrets.yml)
                export BOSH_CLIENT
                export BOSH_CLIENT_SECRET

                bosh -n deploy cf-manifest/cf-manifest.yml

  - name: prometheus-deploy
    serial: true
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['cf-deploy']
            trigger: true
          - get: paas-cf
            passed: ['cf-deploy']
          - get: prometheus-vars-store
          - get: bosh-secrets
          - get: bosh-CA-crt
          - get: cf-vars-store

      - task: generate-prometheus-manifest
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-cf
            - name: prometheus-vars-store
            - name: bosh-secrets
            - name: bosh-CA-crt
            - name: cf-vars-store
          outputs:
            - name: prometheus-manifest
            - name: prometheus-vars-store-updated
          params:
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            CF_DEPLOYMENT_NAME: ((deploy_env))
            BOSH_URL: https://((bosh_fqdn)):25555
            VARS_STORE: prometheus-vars-store-updated/prometheus-vars-store.yml
            METRON_DEPLOYMENT_NAME: ((deploy_env))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cp prometheus-vars-store/prometheus-vars-store.yml "${VARS_STORE}"

                export VARS_FILE=./prometheus-vars-file.yml

                bosh interpolate - \
                  --var-errs \
                  --vars-file bosh-secrets/bosh-secrets.yml \
                  --vars-file cf-vars-store/cf-vars-store.yml \
                  --var-file bosh_ca_cert=./bosh-CA-crt/bosh-CA.crt \
                > ./prometheus-vars-file.yml \
                <<EOF
                ---
                metrics_environment: $CF_DEPLOYMENT_NAME
                bosh_url: $BOSH_URL
                uaa_bosh_exporter_client_secret: ((secrets.bosh_bosh_exporter_password))
                bosh_ca_cert: ((bosh_ca_cert))
                system_domain: $SYSTEM_DNS_ZONE_NAME
                metron_deployment_name: $METRON_DEPLOYMENT_NAME
                skip_ssl_verify: false
                traffic_controller_external_port: 443
                uaa_clients_cf_exporter_secret: ((uaa_clients_cf_exporter_secret))
                uaa_clients_firehose_exporter_secret: ((uaa_clients_firehose_exporter_secret))
                EOF


                ./paas-cf/manifests/prometheus/scripts/generate-manifest.sh \
                  > prometheus-manifest/prometheus-manifest.yml
        on_success:
          put: prometheus-vars-store
          params:
            file: prometheus-vars-store-updated/prometheus-vars-store.yml

      - task: prometheus-deploy
        config:
          platform: linux
          image_resource: *gov-paas-bosh-cli-v2-image-resource
          inputs:
            - name: paas-cf
            - name: prometheus-manifest
            - name: bosh-secrets
            - name: bosh-CA-crt
          params:
            BOSH_ENVIRONMENT: ((bosh_fqdn))
            BOSH_CA_CERT: bosh-CA-crt/bosh-CA.crt
            BOSH_DEPLOYMENT: prometheus
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb
                BOSH_CLIENT=admin
                BOSH_CLIENT_SECRET=$($VAL_FROM_YAML secrets.bosh_admin_password bosh-secrets/bosh-secrets.yml)
                export BOSH_CLIENT
                export BOSH_CLIENT_SECRET

                bosh -n deploy prometheus-manifest/prometheus-manifest.yml

  - name: smoke-tests
    serial_groups: [smoke-tests]
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['cf-deploy','app-availability-tests','api-availability-tests']
            trigger: true
          - get: cf-smoke-tests-release
          - get: paas-cf
            passed: ['cf-deploy','app-availability-tests','api-availability-tests']
          - get: cf-manifest
            passed: ['cf-deploy']
          - get: cf-vars-store
            passed: ['cf-deploy']

      - do:
        - task: create-temp-user
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: smoketest-user

        - task: smoke-tests-config
          file: paas-cf/concourse/tasks/generate-test-config.yml
          params:
            TEST_PROPERTIES: smoke_tests
            APP_DOMAIN: ((apps_dns_zone_name))
            SYSTEM_DOMAIN: ((system_dns_zone_name))

        - task: smoke-tests-run
          file: paas-cf/concourse/tasks/smoke-tests-run.yml
          ensure:
            task: upload-test-artifacts
            file: paas-cf/concourse/tasks/upload-test-artifacts.yml
            params:
              TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))

        ensure:
          task: remove-temp-user
          file: paas-cf/concourse/tasks/delete_admin.yml


  - name: tag-release
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['cf-deploy','app-availability-tests','api-availability-tests']
            trigger: true
          - get: paas-cf
            passed: ['cf-deploy','app-availability-tests','api-availability-tests']
          - get: git-keys

      - put: release-version
        params: {bump: patch}

      - task: tag-release
        config:
          image_resource: *git-ssh-image-resource
          platform: linux
          params:
            aws_account: ((aws_account))
            deploy_env: ((deploy_env))
            OUTPUT_TAG_PREFIX: ((OUTPUT_TAG_PREFIX))
            INPUT_TAG_PREFIX: ((INPUT_TAG_PREFIX))
          inputs:
          - name: paas-cf
          - name: release-version
          - name: git-keys
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ -z "${OUTPUT_TAG_PREFIX}" ]; then
                echo \$OUTPUT_TAG_PREFIX not set, skipping
                exit 0
              fi
              paas-cf/concourse/scripts/tag_release.sh \
                "${OUTPUT_TAG_PREFIX}" "${aws_account}" "${deploy_env}" "${INPUT_TAG_PREFIX}"

      - task: repoint-and-retriger-branch
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/self-update-pipelines
              tag: 0eff5b6a9c092f865a2b19cc4e75a3b539b82fa2
          inputs:
            - name: paas-cf
          params:
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            MAKEFILE_ENV_TARGET: ((makefile_env_target))
            AWS_DEFAULT_REGION: ((aws_region))
            SELF_UPDATE_PIPELINE: ((self_update_pipeline))
            PIPELINES_TO_UPDATE: ((pipeline_name))
            BOSH_AZ: ((bosh_az))
            SKIP_AWS_CREDENTIAL_VALIDATION: true
            ENABLE_DATADOG: ((enable_datadog))
            NEW_ACCOUNT_EMAIL_ADDRESS: ((NEW_ACCOUNT_EMAIL_ADDRESS))
            SLIM_DEV_DEPLOYMENT: ((slim_dev_deployment))
          run:
            path: bash
            args:
            - -e
            - -u
            - -c
            - |
              if [ "$BRANCH" == "hector-wip" ]; then
                export BRANCH=hector-wip-2
              else
                export BRANCH=hector-wip
              fi

              make -C ./paas-cf "${MAKEFILE_ENV_TARGET}" pipelines
              make -C ./paas-cf "${MAKEFILE_ENV_TARGET}" trigger-deploy

  - name: pipeline-unlock
    serial: true
    plan:
      - get: pipeline-trigger
        passed: ['tag-release']
        trigger: true
      - get: pipeline-pool
      - task: update-datadog
        config:
          image_resource: *git-ssh-image-resource
          platform: linux
          params:
            DATADOG_API_KEY: ((datadog_api_key))
            ENV: ((deploy_env))
            AWS_ACCOUNT: ((aws_account))
            ENABLE_DATADOG: ((enable_datadog))
            PIPELINE_NAME: ((pipeline_name))
          inputs:
          - name: pipeline-pool
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              cd pipeline-pool
              current_time=$(date +%s)
              lock_time=$(git log -1  --pretty=format:'%ct')
              delta=$((current_time - lock_time))
              echo "Total pipeline time was: ${delta}s"

              if [ "${ENABLE_DATADOG}" = "true" ]; then
                curl  -X POST -H "Content-type: application/json" \
                  -d "{ \"series\" :
                         [{\"metric\":\"concourse.pipeline_time\",
                          \"points\":[[$current_time, ${delta}]],
                          \"type\":\"gauge\",
                          \"tags\":[
                            \"deploy_env:${ENV}\",
                            \"pipeline_name:${PIPELINE_NAME}\",
                            \"aws_account:${AWS_ACCOUNT}\"
                          ]}
                        ]
                    }" \
                  "https://app.datadoghq.com/api/v1/series?api_key=${DATADOG_API_KEY}"
              fi
      - try:
          task: unlock-the-pipeline
          config:
            image_resource:
              type: docker-image
              source:
                repository: alpine
                tag: 3.7
            platform: linux
            params:
              DISABLE_PIPELINE_LOCKING: ((disable_pipeline_locking))
            run:
              path: sh
              args:
              - -e
              - -c
              - |
                if [ "${DISABLE_PIPELINE_LOCKING:-}" = "true" ] ; then
                   echo "Pipeline locking is disabled, this task will fail and this is OK."
                   exit 1
                fi
          on_success:
            put: pipeline-pool
            params:
              release: pipeline-pool

  - name: pipeline-check-lock
    plan:
      - get: pipeline-pool
      - task: print-pipeline-lock-state
        config:
          image_resource: *git-ssh-image-resource
          platform: linux
          inputs:
          - name: pipeline-pool
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ -f "pipeline-pool/((pipeline_name))/claimed/lock" ]; then
                current_status_message="LOCKED"
              elif [ -f "pipeline-pool/((pipeline_name))/unclaimed/lock" ]; then
                current_status_message="UNLOCKED"
              else
                echo "Error: Cannot find lock in pool: pipeline-pool/((pipeline_name))/{un,}claimed/lock"
                exit 1
              fi

              cd pipeline-pool
              export GIT_PAGER="cat"
              git log -1 --pretty=format:"
              Lock status is: ${current_status_message}

              Last commit change:
               - %cr at %ci
               - %s
              "

  - name: pipeline-release-lock
    plan:
      - get: pipeline-pool
      - put: pipeline-pool
        params:
          release: pipeline-pool

  - name: rotate-cf-admin-password
    serial: true
    plan:
    - aggregate:
      - get: paas-cf
      - get: cf-vars-store

    - task: generate-cf-admin-password
      config:
        platform: linux
        image_resource: *gov-paas-bosh-cli-v2-image-resource
        inputs:
          - name: cf-vars-store
        outputs:
          - name: rotated-cf-vars-store
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              sed "s/^cf_admin_password:.*$//" cf-vars-store/cf-vars-store.yml \
                > rotated-cf-vars-store/rotated-cf-vars-store.yml

              bosh interpolate - --vars-store rotated-cf-vars-store/rotated-cf-vars-store.yml <<EOF
              ---
              variables:
              - name: cf_admin_password
                type: password
              EOF

    - task: update-cf-admin-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: governmentpaas/cf-uaac
            tag: 0eff5b6a9c092f865a2b19cc4e75a3b539b82fa2
        inputs:
          - name: paas-cf
          - name: rotated-cf-vars-store
        params:
          UAA_ENDPOINT: "https://uaa.((system_dns_zone_name))"
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              VAL_FROM_YAML=$(pwd)/paas-cf/concourse/scripts/val_from_yaml.rb

              UAA_ADMIN_CLIENT_SECRET=$($VAL_FROM_YAML uaa_admin_client_secret rotated-cf-vars-store/rotated-cf-vars-store.yml)
              CF_ADMIN_PASSWORD=$($VAL_FROM_YAML cf_admin_password rotated-cf-vars-store/rotated-cf-vars-store.yml)

              uaac target "${UAA_ENDPOINT}"
              uaac token client get admin -s "${UAA_ADMIN_CLIENT_SECRET}"
              uaac password set admin -p "${CF_ADMIN_PASSWORD}"
      on_success:
        put: cf-vars-store
        params:
          file: rotated-cf-vars-store/rotated-cf-vars-store.yml

  - name: rotate-cloudfoundry-credentials
    serial: true
    plan:
    - aggregate:
      - get: paas-cf
        passed: ['rotate-cf-admin-password']
      - get: cf-secrets
      - get: cf-vars-store
        passed: ['rotate-cf-admin-password']
        trigger: true
      - get: cf-manifest-pre-vars
      - get: cf-tfstate

    - task: rotate-credentials
      config:
        platform: linux
        image_resource: *ruby-slim-image-resource
        inputs:
          - name: paas-cf
          - name: cf-secrets
          - name: cf-vars-store
          - name: cf-manifest-pre-vars
        outputs:
          - name: modified-cf-secrets
          - name: modified-cf-vars-store
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              ./paas-cf/manifests/cf-manifest/scripts/rotate-cf-secrets.rb < \
                cf-secrets/cf-secrets.yml > \
                modified-cf-secrets/cf-secrets.yml
              ./paas-cf/manifests/cf-manifest/scripts/rotate-vars-store-secrets.rb \
                --vars-store cf-vars-store/cf-vars-store.yml \
                --manifest cf-manifest-pre-vars/cf-manifest-pre-vars.yml \
                --passwords \
                --ssh \
                --rsa \
                --preserve cc_bulk_api_password \
                --preserve cc_db_encryption_key \
                --preserve cc_internal_api_password \
                --preserve cc_staging_upload_password \
                --preserve cf_admin_password \
                --preserve cf_bosh_password \
                --preserve consul_encrypt_key \
                --preserve diego_bbs_encryption_keys_passphrase \
                --preserve diego_ssh_proxy_host_key \
                --preserve nats_password \
                --preserve router_route_services_secret \
                --preserve router_status_password \
                --preserve secrets_aiven_broker_admin_password \
                --preserve secrets_cdn_broker_admin_password \
                --preserve secrets_elasticache_broker_admin_password \
                --preserve secrets_rds_broker_admin_password \
                --preserve secrets_rds_broker_master_password_seed \
                --preserve secrets_rds_broker_state_encryption_key \
                --preserve secrets_uaa_clients_cdn_broker_secret \
                --preserve secrets_uaa_clients_datadog_firehose_password \
                --preserve uaa_admin_client_secret \
                --preserve uaa_clients_cc-routing_secret \
                --preserve uaa_clients_cc-service-dashboards_secret \
                --preserve uaa_clients_cc_service_key_client_secret \
                --preserve uaa_clients_cloud_controller_username_lookup_secret \
                --preserve uaa_clients_doppler_secret \
                --preserve uaa_clients_gorouter_secret \
                --preserve uaa_clients_network_policy_secret \
                --preserve uaa_clients_paas_admin_secret \
                --preserve uaa_clients_routing_api_client_secret \
                --preserve uaa_clients_ssh-proxy_secret \
                --preserve uaa_clients_tcp_emitter_secret \
                --preserve uaa_clients_tcp_router_secret \
                --preserve uaa_default_encryption_passphrase \
                > modified-cf-vars-store/cf-vars-store.yml
      on_success:
        do:
        - put: cf-secrets
          params:
            file: modified-cf-secrets/cf-secrets.yml
        - put: cf-vars-store
          params:
            file: modified-cf-vars-store/cf-vars-store.yml

    - task: forget-access-keys
      file: paas-cf/concourse/tasks/forget-access-keys.yml
      params:
        AWS_DEFAULT_REGION: ((aws_region))
      ensure:
        put: cf-tfstate
        params:
          file: updated-tfstate/cf.tfstate

  - name: expire-aws-keys
    serial: true
    plan:
    - aggregate:
      - get: paas-cf
      - get: cf-tfstate
      - get: expire-aws-keys-timer
        trigger: true
    - task: forget-access-keys
      file: paas-cf/concourse/tasks/forget-access-keys.yml
      params:
        AWS_DEFAULT_REGION: ((aws_region))
      ensure:
        put: cf-tfstate
        params:
          file: updated-tfstate/cf.tfstate

  - name: rotate-cf-certs-cas
    serial: true
    plan:
    - aggregate:
      - get: paas-cf
      - get: cf-manifest-pre-vars
      - get: cf-vars-store
    - task: rotate-cf-certs
      config:
        platform: linux
        image_resource: *ruby-slim-image-resource
        inputs:
          - name: paas-cf
          - name: cf-manifest-pre-vars
          - name: cf-vars-store
        outputs:
          - name: updated-cf-certs
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              ./paas-cf/manifests/cf-manifest/scripts/rotate-vars-store-secrets.rb --ca \
                --manifest cf-manifest-pre-vars/cf-manifest-pre-vars.yml \
                --vars-store cf-vars-store/cf-vars-store.yml \
                > updated-cf-certs/cf-vars-store.yml
      on_success:
        put: cf-vars-store
        params:
          file: updated-cf-certs/cf-vars-store.yml

  - name: rotate-cf-certs-leafs
    serial: true
    plan:
    - aggregate:
      - get: paas-cf
      - get: cf-manifest-pre-vars
      - get: cf-vars-store
    - task: rotate-cf-certs
      config:
        platform: linux
        image_resource: *ruby-slim-image-resource
        inputs:
          - name: paas-cf
          - name: cf-manifest-pre-vars
          - name: cf-vars-store
        outputs:
          - name: updated-cf-certs
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              ./paas-cf/manifests/cf-manifest/scripts/rotate-vars-store-secrets.rb --leaf \
                --manifest cf-manifest-pre-vars/cf-manifest-pre-vars.yml \
                --vars-store cf-vars-store/cf-vars-store.yml \
                > updated-cf-certs/cf-vars-store.yml
      on_success:
        put: cf-vars-store
        params:
          file: updated-cf-certs/cf-vars-store.yml

  - name: delete-old-cf-certs
    serial: true
    plan:
    - aggregate:
      - get: paas-cf
      - get: cf-manifest-pre-vars
      - get: cf-vars-store
    - task: rotate-cf-certs
      config:
        platform: linux
        image_resource: *ruby-slim-image-resource
        inputs:
          - name: paas-cf
          - name: cf-manifest-pre-vars
          - name: cf-vars-store
        outputs:
          - name: updated-cf-certs
        run:
          path: sh
          args:
            - -e
            - -c
            - |
              ./paas-cf/manifests/cf-manifest/scripts/rotate-vars-store-secrets.rb --delete \
                --manifest cf-manifest-pre-vars/cf-manifest-pre-vars.yml \
                --vars-store cf-vars-store/cf-vars-store.yml \
                > updated-cf-certs/cf-vars-store.yml
      on_success:
        put: cf-vars-store
        params:
          file: updated-cf-certs/cf-vars-store.yml

  - name: generate-git-keys
    plan:
      - task: ssh-keygen
        config:
          image_resource: *git-ssh-image-resource
          platform: linux
          outputs:
          - name: generated-git-keys
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ssh-keygen -t rsa -b 4096 -f git-key -N ''
              tar -cvzf generated-git-keys/git-keys.tar.gz ./git-key ./git-key.pub
              cat ./git-key.pub
        on_success:
          put: git-keys
          params:
            file: generated-git-keys/git-keys.tar.gz

  - name: bump-major-version
    plan:
      - put: release-version
        params: {bump: major}

  - name: bump-minor-version
    plan:
      - put: release-version
        params: {bump: minor}

  - name: bump-patch-version
    plan:
      - put: release-version
        params: {bump: patch}

  - name: show-release-version
    plan:
      - get: release-version

      - task: show-release-version
        config:
          platform: linux
          inputs:
            - name: release-version
          run:
            path: cat
            args:
            - release-version/number

  - name: continuous-smoke-tests
    serial_groups: [smoke-tests]
    build_logs_to_retain: 10000
    plan:
      - aggregate:
        - get: smoke-tests-timer
          trigger: true
        - get: deployed-healthcheck
        - get: cf-smoke-tests-release
        - get: paas-cf
          passed: ['pipeline-lock']
        - get: cf-manifest
          passed: ['cf-deploy']
        - get: cf-vars-store
          passed: ['cf-deploy']

      - task: assert-should-run
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: alpine
              tag: 3.7
          inputs:
            - name: deployed-healthcheck
          params:
            PERSISTENT_ENVIRONMENT: ((persistent_environment))
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              HEALTHCHECK_DEPLOYED=$(cat deployed-healthcheck/healthcheck-deployed)
              if [ "$HEALTHCHECK_DEPLOYED" = "no" ] && [ "$PERSISTENT_ENVIRONMENT" != "true" ]; then
                echo "Healthcheck is not deployed and this is not a persistent environment"
                echo "Skipping smoke tests"
                exit 1
              fi
      - do:
        - task: create-temp-user
          file: paas-cf/concourse/tasks/create_admin.yml
          params:
            PREFIX: cont-smoketest-user

        - task: smoke-tests-config
          file: paas-cf/concourse/tasks/generate-test-config.yml
          params:
            TEST_PROPERTIES: smoke_tests
            APP_DOMAIN: ((apps_dns_zone_name))
            SYSTEM_DOMAIN: ((system_dns_zone_name))

        - task: smoke-tests-run
          attempts: 3
          file: paas-cf/concourse/tasks/smoke-tests-run.yml
          params:
            AWS_DEFAULT_REGION: ((aws_region))
            DEPLOY_ENV: ((deploy_env))
            SYSTEM_DNS_ZONE_NAME: ((system_dns_zone_name))
            ALERT_EMAIL_ADDRESS: ((ALERT_EMAIL_ADDRESS))
            EMAIL_ON_SMOKE_TEST_FAILURE: true
          on_failure:
            put: pagerduty-notify
            params:
              action: trigger
              description: "((deploy_env)) concourse continuous smoketests errors"
          ensure:
            task: upload-test-artifacts
            file: paas-cf/concourse/tasks/upload-test-artifacts.yml
            params:
              TEST_ARTIFACTS_BUCKET: ((test_artifacts_bucket))

        ensure:
          task: remove-temp-user
          file: paas-cf/concourse/tasks/delete_admin.yml

  - name: check-certificates
    build_logs_to_retain: 50
    plan:
      - aggregate:
        - get: check-certificates-timer
          trigger: true
        - get: paas-cf
          # passed: ['generate-cf-config']
        - get: cf-vars-store
          # passed: ['generate-cf-config']
        - get: ipsec-CA

      - task: check-certificates
        config:
          platform: linux
          image_resource: *ruby-slim-image-resource
          inputs:
            - name: paas-cf
            - name: cf-vars-store
            - name: ipsec-CA
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ./paas-cf/concourse/scripts/check-certificates.rb 30 < cf-vars-store/cf-vars-store.yml

                tar -xzf ./ipsec-CA/ipsec-CA.tar.gz -C ./ipsec-CA
                cat <<EOF > ipsec_cert.yml
                ---
                ipsec:
                  certificate: |
                $(sed 's/^/    /' ipsec-CA/ipsec-CA.crt)
                EOF

                ./paas-cf/concourse/scripts/check-certificates.rb 30 < ipsec_cert.yml
