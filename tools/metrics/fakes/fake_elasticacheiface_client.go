// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/elasticache/elasticacheiface"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elasticache"
)

type FakeElastiCacheAPI struct {
	AddTagsToResourceStub        func(*elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error)
	addTagsToResourceMutex       sync.RWMutex
	addTagsToResourceArgsForCall []struct {
		arg1 *elasticache.AddTagsToResourceInput
	}
	addTagsToResourceReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	addTagsToResourceReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	AddTagsToResourceWithContextStub        func(aws.Context, *elasticache.AddTagsToResourceInput, ...request.Option) (*elasticache.TagListMessage, error)
	addTagsToResourceWithContextMutex       sync.RWMutex
	addTagsToResourceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.AddTagsToResourceInput
		arg3 []request.Option
	}
	addTagsToResourceWithContextReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	addTagsToResourceWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	AddTagsToResourceRequestStub        func(*elasticache.AddTagsToResourceInput) (*request.Request, *elasticache.TagListMessage)
	addTagsToResourceRequestMutex       sync.RWMutex
	addTagsToResourceRequestArgsForCall []struct {
		arg1 *elasticache.AddTagsToResourceInput
	}
	addTagsToResourceRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}
	addTagsToResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}
	AuthorizeCacheSecurityGroupIngressStub        func(*elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)
	authorizeCacheSecurityGroupIngressMutex       sync.RWMutex
	authorizeCacheSecurityGroupIngressArgsForCall []struct {
		arg1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}
	authorizeCacheSecurityGroupIngressReturns struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}
	authorizeCacheSecurityGroupIngressReturnsOnCall map[int]struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}
	AuthorizeCacheSecurityGroupIngressWithContextStub        func(aws.Context, *elasticache.AuthorizeCacheSecurityGroupIngressInput, ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error)
	authorizeCacheSecurityGroupIngressWithContextMutex       sync.RWMutex
	authorizeCacheSecurityGroupIngressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.AuthorizeCacheSecurityGroupIngressInput
		arg3 []request.Option
	}
	authorizeCacheSecurityGroupIngressWithContextReturns struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}
	authorizeCacheSecurityGroupIngressWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}
	AuthorizeCacheSecurityGroupIngressRequestStub        func(*elasticache.AuthorizeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.AuthorizeCacheSecurityGroupIngressOutput)
	authorizeCacheSecurityGroupIngressRequestMutex       sync.RWMutex
	authorizeCacheSecurityGroupIngressRequestArgsForCall []struct {
		arg1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}
	authorizeCacheSecurityGroupIngressRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
	}
	authorizeCacheSecurityGroupIngressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
	}
	CopySnapshotStub        func(*elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error)
	copySnapshotMutex       sync.RWMutex
	copySnapshotArgsForCall []struct {
		arg1 *elasticache.CopySnapshotInput
	}
	copySnapshotReturns struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}
	copySnapshotReturnsOnCall map[int]struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}
	CopySnapshotWithContextStub        func(aws.Context, *elasticache.CopySnapshotInput, ...request.Option) (*elasticache.CopySnapshotOutput, error)
	copySnapshotWithContextMutex       sync.RWMutex
	copySnapshotWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.CopySnapshotInput
		arg3 []request.Option
	}
	copySnapshotWithContextReturns struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}
	copySnapshotWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}
	CopySnapshotRequestStub        func(*elasticache.CopySnapshotInput) (*request.Request, *elasticache.CopySnapshotOutput)
	copySnapshotRequestMutex       sync.RWMutex
	copySnapshotRequestArgsForCall []struct {
		arg1 *elasticache.CopySnapshotInput
	}
	copySnapshotRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CopySnapshotOutput
	}
	copySnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CopySnapshotOutput
	}
	CreateCacheClusterStub        func(*elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error)
	createCacheClusterMutex       sync.RWMutex
	createCacheClusterArgsForCall []struct {
		arg1 *elasticache.CreateCacheClusterInput
	}
	createCacheClusterReturns struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}
	createCacheClusterReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}
	CreateCacheClusterWithContextStub        func(aws.Context, *elasticache.CreateCacheClusterInput, ...request.Option) (*elasticache.CreateCacheClusterOutput, error)
	createCacheClusterWithContextMutex       sync.RWMutex
	createCacheClusterWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.CreateCacheClusterInput
		arg3 []request.Option
	}
	createCacheClusterWithContextReturns struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}
	createCacheClusterWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}
	CreateCacheClusterRequestStub        func(*elasticache.CreateCacheClusterInput) (*request.Request, *elasticache.CreateCacheClusterOutput)
	createCacheClusterRequestMutex       sync.RWMutex
	createCacheClusterRequestArgsForCall []struct {
		arg1 *elasticache.CreateCacheClusterInput
	}
	createCacheClusterRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheClusterOutput
	}
	createCacheClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheClusterOutput
	}
	CreateCacheParameterGroupStub        func(*elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error)
	createCacheParameterGroupMutex       sync.RWMutex
	createCacheParameterGroupArgsForCall []struct {
		arg1 *elasticache.CreateCacheParameterGroupInput
	}
	createCacheParameterGroupReturns struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}
	createCacheParameterGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}
	CreateCacheParameterGroupWithContextStub        func(aws.Context, *elasticache.CreateCacheParameterGroupInput, ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error)
	createCacheParameterGroupWithContextMutex       sync.RWMutex
	createCacheParameterGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.CreateCacheParameterGroupInput
		arg3 []request.Option
	}
	createCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}
	createCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}
	CreateCacheParameterGroupRequestStub        func(*elasticache.CreateCacheParameterGroupInput) (*request.Request, *elasticache.CreateCacheParameterGroupOutput)
	createCacheParameterGroupRequestMutex       sync.RWMutex
	createCacheParameterGroupRequestArgsForCall []struct {
		arg1 *elasticache.CreateCacheParameterGroupInput
	}
	createCacheParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheParameterGroupOutput
	}
	createCacheParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheParameterGroupOutput
	}
	CreateCacheSecurityGroupStub        func(*elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error)
	createCacheSecurityGroupMutex       sync.RWMutex
	createCacheSecurityGroupArgsForCall []struct {
		arg1 *elasticache.CreateCacheSecurityGroupInput
	}
	createCacheSecurityGroupReturns struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}
	createCacheSecurityGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}
	CreateCacheSecurityGroupWithContextStub        func(aws.Context, *elasticache.CreateCacheSecurityGroupInput, ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error)
	createCacheSecurityGroupWithContextMutex       sync.RWMutex
	createCacheSecurityGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.CreateCacheSecurityGroupInput
		arg3 []request.Option
	}
	createCacheSecurityGroupWithContextReturns struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}
	createCacheSecurityGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}
	CreateCacheSecurityGroupRequestStub        func(*elasticache.CreateCacheSecurityGroupInput) (*request.Request, *elasticache.CreateCacheSecurityGroupOutput)
	createCacheSecurityGroupRequestMutex       sync.RWMutex
	createCacheSecurityGroupRequestArgsForCall []struct {
		arg1 *elasticache.CreateCacheSecurityGroupInput
	}
	createCacheSecurityGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSecurityGroupOutput
	}
	createCacheSecurityGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSecurityGroupOutput
	}
	CreateCacheSubnetGroupStub        func(*elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error)
	createCacheSubnetGroupMutex       sync.RWMutex
	createCacheSubnetGroupArgsForCall []struct {
		arg1 *elasticache.CreateCacheSubnetGroupInput
	}
	createCacheSubnetGroupReturns struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}
	createCacheSubnetGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}
	CreateCacheSubnetGroupWithContextStub        func(aws.Context, *elasticache.CreateCacheSubnetGroupInput, ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error)
	createCacheSubnetGroupWithContextMutex       sync.RWMutex
	createCacheSubnetGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.CreateCacheSubnetGroupInput
		arg3 []request.Option
	}
	createCacheSubnetGroupWithContextReturns struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}
	createCacheSubnetGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}
	CreateCacheSubnetGroupRequestStub        func(*elasticache.CreateCacheSubnetGroupInput) (*request.Request, *elasticache.CreateCacheSubnetGroupOutput)
	createCacheSubnetGroupRequestMutex       sync.RWMutex
	createCacheSubnetGroupRequestArgsForCall []struct {
		arg1 *elasticache.CreateCacheSubnetGroupInput
	}
	createCacheSubnetGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSubnetGroupOutput
	}
	createCacheSubnetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSubnetGroupOutput
	}
	CreateReplicationGroupStub        func(*elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error)
	createReplicationGroupMutex       sync.RWMutex
	createReplicationGroupArgsForCall []struct {
		arg1 *elasticache.CreateReplicationGroupInput
	}
	createReplicationGroupReturns struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}
	createReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}
	CreateReplicationGroupWithContextStub        func(aws.Context, *elasticache.CreateReplicationGroupInput, ...request.Option) (*elasticache.CreateReplicationGroupOutput, error)
	createReplicationGroupWithContextMutex       sync.RWMutex
	createReplicationGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.CreateReplicationGroupInput
		arg3 []request.Option
	}
	createReplicationGroupWithContextReturns struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}
	createReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}
	CreateReplicationGroupRequestStub        func(*elasticache.CreateReplicationGroupInput) (*request.Request, *elasticache.CreateReplicationGroupOutput)
	createReplicationGroupRequestMutex       sync.RWMutex
	createReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.CreateReplicationGroupInput
	}
	createReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateReplicationGroupOutput
	}
	createReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateReplicationGroupOutput
	}
	CreateSnapshotStub        func(*elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error)
	createSnapshotMutex       sync.RWMutex
	createSnapshotArgsForCall []struct {
		arg1 *elasticache.CreateSnapshotInput
	}
	createSnapshotReturns struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}
	createSnapshotReturnsOnCall map[int]struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}
	CreateSnapshotWithContextStub        func(aws.Context, *elasticache.CreateSnapshotInput, ...request.Option) (*elasticache.CreateSnapshotOutput, error)
	createSnapshotWithContextMutex       sync.RWMutex
	createSnapshotWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.CreateSnapshotInput
		arg3 []request.Option
	}
	createSnapshotWithContextReturns struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}
	createSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}
	CreateSnapshotRequestStub        func(*elasticache.CreateSnapshotInput) (*request.Request, *elasticache.CreateSnapshotOutput)
	createSnapshotRequestMutex       sync.RWMutex
	createSnapshotRequestArgsForCall []struct {
		arg1 *elasticache.CreateSnapshotInput
	}
	createSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CreateSnapshotOutput
	}
	createSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CreateSnapshotOutput
	}
	DeleteCacheClusterStub        func(*elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error)
	deleteCacheClusterMutex       sync.RWMutex
	deleteCacheClusterArgsForCall []struct {
		arg1 *elasticache.DeleteCacheClusterInput
	}
	deleteCacheClusterReturns struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}
	deleteCacheClusterReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}
	DeleteCacheClusterWithContextStub        func(aws.Context, *elasticache.DeleteCacheClusterInput, ...request.Option) (*elasticache.DeleteCacheClusterOutput, error)
	deleteCacheClusterWithContextMutex       sync.RWMutex
	deleteCacheClusterWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DeleteCacheClusterInput
		arg3 []request.Option
	}
	deleteCacheClusterWithContextReturns struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}
	deleteCacheClusterWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}
	DeleteCacheClusterRequestStub        func(*elasticache.DeleteCacheClusterInput) (*request.Request, *elasticache.DeleteCacheClusterOutput)
	deleteCacheClusterRequestMutex       sync.RWMutex
	deleteCacheClusterRequestArgsForCall []struct {
		arg1 *elasticache.DeleteCacheClusterInput
	}
	deleteCacheClusterRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheClusterOutput
	}
	deleteCacheClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheClusterOutput
	}
	DeleteCacheParameterGroupStub        func(*elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error)
	deleteCacheParameterGroupMutex       sync.RWMutex
	deleteCacheParameterGroupArgsForCall []struct {
		arg1 *elasticache.DeleteCacheParameterGroupInput
	}
	deleteCacheParameterGroupReturns struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}
	deleteCacheParameterGroupReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}
	DeleteCacheParameterGroupWithContextStub        func(aws.Context, *elasticache.DeleteCacheParameterGroupInput, ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error)
	deleteCacheParameterGroupWithContextMutex       sync.RWMutex
	deleteCacheParameterGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DeleteCacheParameterGroupInput
		arg3 []request.Option
	}
	deleteCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}
	deleteCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}
	DeleteCacheParameterGroupRequestStub        func(*elasticache.DeleteCacheParameterGroupInput) (*request.Request, *elasticache.DeleteCacheParameterGroupOutput)
	deleteCacheParameterGroupRequestMutex       sync.RWMutex
	deleteCacheParameterGroupRequestArgsForCall []struct {
		arg1 *elasticache.DeleteCacheParameterGroupInput
	}
	deleteCacheParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheParameterGroupOutput
	}
	deleteCacheParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheParameterGroupOutput
	}
	DeleteCacheSecurityGroupStub        func(*elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error)
	deleteCacheSecurityGroupMutex       sync.RWMutex
	deleteCacheSecurityGroupArgsForCall []struct {
		arg1 *elasticache.DeleteCacheSecurityGroupInput
	}
	deleteCacheSecurityGroupReturns struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}
	deleteCacheSecurityGroupReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}
	DeleteCacheSecurityGroupWithContextStub        func(aws.Context, *elasticache.DeleteCacheSecurityGroupInput, ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error)
	deleteCacheSecurityGroupWithContextMutex       sync.RWMutex
	deleteCacheSecurityGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DeleteCacheSecurityGroupInput
		arg3 []request.Option
	}
	deleteCacheSecurityGroupWithContextReturns struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}
	deleteCacheSecurityGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}
	DeleteCacheSecurityGroupRequestStub        func(*elasticache.DeleteCacheSecurityGroupInput) (*request.Request, *elasticache.DeleteCacheSecurityGroupOutput)
	deleteCacheSecurityGroupRequestMutex       sync.RWMutex
	deleteCacheSecurityGroupRequestArgsForCall []struct {
		arg1 *elasticache.DeleteCacheSecurityGroupInput
	}
	deleteCacheSecurityGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSecurityGroupOutput
	}
	deleteCacheSecurityGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSecurityGroupOutput
	}
	DeleteCacheSubnetGroupStub        func(*elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error)
	deleteCacheSubnetGroupMutex       sync.RWMutex
	deleteCacheSubnetGroupArgsForCall []struct {
		arg1 *elasticache.DeleteCacheSubnetGroupInput
	}
	deleteCacheSubnetGroupReturns struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}
	deleteCacheSubnetGroupReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}
	DeleteCacheSubnetGroupWithContextStub        func(aws.Context, *elasticache.DeleteCacheSubnetGroupInput, ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error)
	deleteCacheSubnetGroupWithContextMutex       sync.RWMutex
	deleteCacheSubnetGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DeleteCacheSubnetGroupInput
		arg3 []request.Option
	}
	deleteCacheSubnetGroupWithContextReturns struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}
	deleteCacheSubnetGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}
	DeleteCacheSubnetGroupRequestStub        func(*elasticache.DeleteCacheSubnetGroupInput) (*request.Request, *elasticache.DeleteCacheSubnetGroupOutput)
	deleteCacheSubnetGroupRequestMutex       sync.RWMutex
	deleteCacheSubnetGroupRequestArgsForCall []struct {
		arg1 *elasticache.DeleteCacheSubnetGroupInput
	}
	deleteCacheSubnetGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSubnetGroupOutput
	}
	deleteCacheSubnetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSubnetGroupOutput
	}
	DeleteReplicationGroupStub        func(*elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error)
	deleteReplicationGroupMutex       sync.RWMutex
	deleteReplicationGroupArgsForCall []struct {
		arg1 *elasticache.DeleteReplicationGroupInput
	}
	deleteReplicationGroupReturns struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}
	deleteReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}
	DeleteReplicationGroupWithContextStub        func(aws.Context, *elasticache.DeleteReplicationGroupInput, ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error)
	deleteReplicationGroupWithContextMutex       sync.RWMutex
	deleteReplicationGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DeleteReplicationGroupInput
		arg3 []request.Option
	}
	deleteReplicationGroupWithContextReturns struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}
	deleteReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}
	DeleteReplicationGroupRequestStub        func(*elasticache.DeleteReplicationGroupInput) (*request.Request, *elasticache.DeleteReplicationGroupOutput)
	deleteReplicationGroupRequestMutex       sync.RWMutex
	deleteReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.DeleteReplicationGroupInput
	}
	deleteReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteReplicationGroupOutput
	}
	deleteReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteReplicationGroupOutput
	}
	DeleteSnapshotStub        func(*elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error)
	deleteSnapshotMutex       sync.RWMutex
	deleteSnapshotArgsForCall []struct {
		arg1 *elasticache.DeleteSnapshotInput
	}
	deleteSnapshotReturns struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}
	deleteSnapshotReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}
	DeleteSnapshotWithContextStub        func(aws.Context, *elasticache.DeleteSnapshotInput, ...request.Option) (*elasticache.DeleteSnapshotOutput, error)
	deleteSnapshotWithContextMutex       sync.RWMutex
	deleteSnapshotWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DeleteSnapshotInput
		arg3 []request.Option
	}
	deleteSnapshotWithContextReturns struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}
	deleteSnapshotWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}
	DeleteSnapshotRequestStub        func(*elasticache.DeleteSnapshotInput) (*request.Request, *elasticache.DeleteSnapshotOutput)
	deleteSnapshotRequestMutex       sync.RWMutex
	deleteSnapshotRequestArgsForCall []struct {
		arg1 *elasticache.DeleteSnapshotInput
	}
	deleteSnapshotRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DeleteSnapshotOutput
	}
	deleteSnapshotRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DeleteSnapshotOutput
	}
	DescribeCacheClustersStub        func(*elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error)
	describeCacheClustersMutex       sync.RWMutex
	describeCacheClustersArgsForCall []struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}
	describeCacheClustersReturns struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}
	describeCacheClustersReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}
	DescribeCacheClustersWithContextStub        func(aws.Context, *elasticache.DescribeCacheClustersInput, ...request.Option) (*elasticache.DescribeCacheClustersOutput, error)
	describeCacheClustersWithContextMutex       sync.RWMutex
	describeCacheClustersWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.Option
	}
	describeCacheClustersWithContextReturns struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}
	describeCacheClustersWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}
	DescribeCacheClustersRequestStub        func(*elasticache.DescribeCacheClustersInput) (*request.Request, *elasticache.DescribeCacheClustersOutput)
	describeCacheClustersRequestMutex       sync.RWMutex
	describeCacheClustersRequestArgsForCall []struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}
	describeCacheClustersRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheClustersOutput
	}
	describeCacheClustersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheClustersOutput
	}
	DescribeCacheClustersPagesStub        func(*elasticache.DescribeCacheClustersInput, func(*elasticache.DescribeCacheClustersOutput, bool) bool) error
	describeCacheClustersPagesMutex       sync.RWMutex
	describeCacheClustersPagesArgsForCall []struct {
		arg1 *elasticache.DescribeCacheClustersInput
		arg2 func(*elasticache.DescribeCacheClustersOutput, bool) bool
	}
	describeCacheClustersPagesReturns struct {
		result1 error
	}
	describeCacheClustersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheClustersPagesWithContextStub        func(aws.Context, *elasticache.DescribeCacheClustersInput, func(*elasticache.DescribeCacheClustersOutput, bool) bool, ...request.Option) error
	describeCacheClustersPagesWithContextMutex       sync.RWMutex
	describeCacheClustersPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 func(*elasticache.DescribeCacheClustersOutput, bool) bool
		arg4 []request.Option
	}
	describeCacheClustersPagesWithContextReturns struct {
		result1 error
	}
	describeCacheClustersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheEngineVersionsStub        func(*elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error)
	describeCacheEngineVersionsMutex       sync.RWMutex
	describeCacheEngineVersionsArgsForCall []struct {
		arg1 *elasticache.DescribeCacheEngineVersionsInput
	}
	describeCacheEngineVersionsReturns struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}
	describeCacheEngineVersionsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}
	DescribeCacheEngineVersionsWithContextStub        func(aws.Context, *elasticache.DescribeCacheEngineVersionsInput, ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error)
	describeCacheEngineVersionsWithContextMutex       sync.RWMutex
	describeCacheEngineVersionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheEngineVersionsInput
		arg3 []request.Option
	}
	describeCacheEngineVersionsWithContextReturns struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}
	describeCacheEngineVersionsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}
	DescribeCacheEngineVersionsRequestStub        func(*elasticache.DescribeCacheEngineVersionsInput) (*request.Request, *elasticache.DescribeCacheEngineVersionsOutput)
	describeCacheEngineVersionsRequestMutex       sync.RWMutex
	describeCacheEngineVersionsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeCacheEngineVersionsInput
	}
	describeCacheEngineVersionsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheEngineVersionsOutput
	}
	describeCacheEngineVersionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheEngineVersionsOutput
	}
	DescribeCacheEngineVersionsPagesStub        func(*elasticache.DescribeCacheEngineVersionsInput, func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) error
	describeCacheEngineVersionsPagesMutex       sync.RWMutex
	describeCacheEngineVersionsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeCacheEngineVersionsInput
		arg2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
	}
	describeCacheEngineVersionsPagesReturns struct {
		result1 error
	}
	describeCacheEngineVersionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheEngineVersionsPagesWithContextStub        func(aws.Context, *elasticache.DescribeCacheEngineVersionsInput, func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, ...request.Option) error
	describeCacheEngineVersionsPagesWithContextMutex       sync.RWMutex
	describeCacheEngineVersionsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheEngineVersionsInput
		arg3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
		arg4 []request.Option
	}
	describeCacheEngineVersionsPagesWithContextReturns struct {
		result1 error
	}
	describeCacheEngineVersionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheParameterGroupsStub        func(*elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error)
	describeCacheParameterGroupsMutex       sync.RWMutex
	describeCacheParameterGroupsArgsForCall []struct {
		arg1 *elasticache.DescribeCacheParameterGroupsInput
	}
	describeCacheParameterGroupsReturns struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}
	describeCacheParameterGroupsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}
	DescribeCacheParameterGroupsWithContextStub        func(aws.Context, *elasticache.DescribeCacheParameterGroupsInput, ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error)
	describeCacheParameterGroupsWithContextMutex       sync.RWMutex
	describeCacheParameterGroupsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheParameterGroupsInput
		arg3 []request.Option
	}
	describeCacheParameterGroupsWithContextReturns struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}
	describeCacheParameterGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}
	DescribeCacheParameterGroupsRequestStub        func(*elasticache.DescribeCacheParameterGroupsInput) (*request.Request, *elasticache.DescribeCacheParameterGroupsOutput)
	describeCacheParameterGroupsRequestMutex       sync.RWMutex
	describeCacheParameterGroupsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeCacheParameterGroupsInput
	}
	describeCacheParameterGroupsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParameterGroupsOutput
	}
	describeCacheParameterGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParameterGroupsOutput
	}
	DescribeCacheParameterGroupsPagesStub        func(*elasticache.DescribeCacheParameterGroupsInput, func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) error
	describeCacheParameterGroupsPagesMutex       sync.RWMutex
	describeCacheParameterGroupsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeCacheParameterGroupsInput
		arg2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
	}
	describeCacheParameterGroupsPagesReturns struct {
		result1 error
	}
	describeCacheParameterGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheParameterGroupsPagesWithContextStub        func(aws.Context, *elasticache.DescribeCacheParameterGroupsInput, func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, ...request.Option) error
	describeCacheParameterGroupsPagesWithContextMutex       sync.RWMutex
	describeCacheParameterGroupsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheParameterGroupsInput
		arg3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeCacheParameterGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeCacheParameterGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheParametersStub        func(*elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error)
	describeCacheParametersMutex       sync.RWMutex
	describeCacheParametersArgsForCall []struct {
		arg1 *elasticache.DescribeCacheParametersInput
	}
	describeCacheParametersReturns struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}
	describeCacheParametersReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}
	DescribeCacheParametersWithContextStub        func(aws.Context, *elasticache.DescribeCacheParametersInput, ...request.Option) (*elasticache.DescribeCacheParametersOutput, error)
	describeCacheParametersWithContextMutex       sync.RWMutex
	describeCacheParametersWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheParametersInput
		arg3 []request.Option
	}
	describeCacheParametersWithContextReturns struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}
	describeCacheParametersWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}
	DescribeCacheParametersRequestStub        func(*elasticache.DescribeCacheParametersInput) (*request.Request, *elasticache.DescribeCacheParametersOutput)
	describeCacheParametersRequestMutex       sync.RWMutex
	describeCacheParametersRequestArgsForCall []struct {
		arg1 *elasticache.DescribeCacheParametersInput
	}
	describeCacheParametersRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParametersOutput
	}
	describeCacheParametersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParametersOutput
	}
	DescribeCacheParametersPagesStub        func(*elasticache.DescribeCacheParametersInput, func(*elasticache.DescribeCacheParametersOutput, bool) bool) error
	describeCacheParametersPagesMutex       sync.RWMutex
	describeCacheParametersPagesArgsForCall []struct {
		arg1 *elasticache.DescribeCacheParametersInput
		arg2 func(*elasticache.DescribeCacheParametersOutput, bool) bool
	}
	describeCacheParametersPagesReturns struct {
		result1 error
	}
	describeCacheParametersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheParametersPagesWithContextStub        func(aws.Context, *elasticache.DescribeCacheParametersInput, func(*elasticache.DescribeCacheParametersOutput, bool) bool, ...request.Option) error
	describeCacheParametersPagesWithContextMutex       sync.RWMutex
	describeCacheParametersPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheParametersInput
		arg3 func(*elasticache.DescribeCacheParametersOutput, bool) bool
		arg4 []request.Option
	}
	describeCacheParametersPagesWithContextReturns struct {
		result1 error
	}
	describeCacheParametersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheSecurityGroupsStub        func(*elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error)
	describeCacheSecurityGroupsMutex       sync.RWMutex
	describeCacheSecurityGroupsArgsForCall []struct {
		arg1 *elasticache.DescribeCacheSecurityGroupsInput
	}
	describeCacheSecurityGroupsReturns struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}
	describeCacheSecurityGroupsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}
	DescribeCacheSecurityGroupsWithContextStub        func(aws.Context, *elasticache.DescribeCacheSecurityGroupsInput, ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error)
	describeCacheSecurityGroupsWithContextMutex       sync.RWMutex
	describeCacheSecurityGroupsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheSecurityGroupsInput
		arg3 []request.Option
	}
	describeCacheSecurityGroupsWithContextReturns struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}
	describeCacheSecurityGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}
	DescribeCacheSecurityGroupsRequestStub        func(*elasticache.DescribeCacheSecurityGroupsInput) (*request.Request, *elasticache.DescribeCacheSecurityGroupsOutput)
	describeCacheSecurityGroupsRequestMutex       sync.RWMutex
	describeCacheSecurityGroupsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeCacheSecurityGroupsInput
	}
	describeCacheSecurityGroupsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSecurityGroupsOutput
	}
	describeCacheSecurityGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSecurityGroupsOutput
	}
	DescribeCacheSecurityGroupsPagesStub        func(*elasticache.DescribeCacheSecurityGroupsInput, func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) error
	describeCacheSecurityGroupsPagesMutex       sync.RWMutex
	describeCacheSecurityGroupsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeCacheSecurityGroupsInput
		arg2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
	}
	describeCacheSecurityGroupsPagesReturns struct {
		result1 error
	}
	describeCacheSecurityGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheSecurityGroupsPagesWithContextStub        func(aws.Context, *elasticache.DescribeCacheSecurityGroupsInput, func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, ...request.Option) error
	describeCacheSecurityGroupsPagesWithContextMutex       sync.RWMutex
	describeCacheSecurityGroupsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheSecurityGroupsInput
		arg3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeCacheSecurityGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeCacheSecurityGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheSubnetGroupsStub        func(*elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error)
	describeCacheSubnetGroupsMutex       sync.RWMutex
	describeCacheSubnetGroupsArgsForCall []struct {
		arg1 *elasticache.DescribeCacheSubnetGroupsInput
	}
	describeCacheSubnetGroupsReturns struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}
	describeCacheSubnetGroupsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}
	DescribeCacheSubnetGroupsWithContextStub        func(aws.Context, *elasticache.DescribeCacheSubnetGroupsInput, ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error)
	describeCacheSubnetGroupsWithContextMutex       sync.RWMutex
	describeCacheSubnetGroupsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheSubnetGroupsInput
		arg3 []request.Option
	}
	describeCacheSubnetGroupsWithContextReturns struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}
	describeCacheSubnetGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}
	DescribeCacheSubnetGroupsRequestStub        func(*elasticache.DescribeCacheSubnetGroupsInput) (*request.Request, *elasticache.DescribeCacheSubnetGroupsOutput)
	describeCacheSubnetGroupsRequestMutex       sync.RWMutex
	describeCacheSubnetGroupsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeCacheSubnetGroupsInput
	}
	describeCacheSubnetGroupsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSubnetGroupsOutput
	}
	describeCacheSubnetGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSubnetGroupsOutput
	}
	DescribeCacheSubnetGroupsPagesStub        func(*elasticache.DescribeCacheSubnetGroupsInput, func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) error
	describeCacheSubnetGroupsPagesMutex       sync.RWMutex
	describeCacheSubnetGroupsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeCacheSubnetGroupsInput
		arg2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
	}
	describeCacheSubnetGroupsPagesReturns struct {
		result1 error
	}
	describeCacheSubnetGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeCacheSubnetGroupsPagesWithContextStub        func(aws.Context, *elasticache.DescribeCacheSubnetGroupsInput, func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, ...request.Option) error
	describeCacheSubnetGroupsPagesWithContextMutex       sync.RWMutex
	describeCacheSubnetGroupsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheSubnetGroupsInput
		arg3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeCacheSubnetGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeCacheSubnetGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEngineDefaultParametersStub        func(*elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error)
	describeEngineDefaultParametersMutex       sync.RWMutex
	describeEngineDefaultParametersArgsForCall []struct {
		arg1 *elasticache.DescribeEngineDefaultParametersInput
	}
	describeEngineDefaultParametersReturns struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}
	describeEngineDefaultParametersReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}
	DescribeEngineDefaultParametersWithContextStub        func(aws.Context, *elasticache.DescribeEngineDefaultParametersInput, ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error)
	describeEngineDefaultParametersWithContextMutex       sync.RWMutex
	describeEngineDefaultParametersWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeEngineDefaultParametersInput
		arg3 []request.Option
	}
	describeEngineDefaultParametersWithContextReturns struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}
	describeEngineDefaultParametersWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}
	DescribeEngineDefaultParametersRequestStub        func(*elasticache.DescribeEngineDefaultParametersInput) (*request.Request, *elasticache.DescribeEngineDefaultParametersOutput)
	describeEngineDefaultParametersRequestMutex       sync.RWMutex
	describeEngineDefaultParametersRequestArgsForCall []struct {
		arg1 *elasticache.DescribeEngineDefaultParametersInput
	}
	describeEngineDefaultParametersRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeEngineDefaultParametersOutput
	}
	describeEngineDefaultParametersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeEngineDefaultParametersOutput
	}
	DescribeEngineDefaultParametersPagesStub        func(*elasticache.DescribeEngineDefaultParametersInput, func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) error
	describeEngineDefaultParametersPagesMutex       sync.RWMutex
	describeEngineDefaultParametersPagesArgsForCall []struct {
		arg1 *elasticache.DescribeEngineDefaultParametersInput
		arg2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
	}
	describeEngineDefaultParametersPagesReturns struct {
		result1 error
	}
	describeEngineDefaultParametersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEngineDefaultParametersPagesWithContextStub        func(aws.Context, *elasticache.DescribeEngineDefaultParametersInput, func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, ...request.Option) error
	describeEngineDefaultParametersPagesWithContextMutex       sync.RWMutex
	describeEngineDefaultParametersPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeEngineDefaultParametersInput
		arg3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
		arg4 []request.Option
	}
	describeEngineDefaultParametersPagesWithContextReturns struct {
		result1 error
	}
	describeEngineDefaultParametersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventsStub        func(*elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error)
	describeEventsMutex       sync.RWMutex
	describeEventsArgsForCall []struct {
		arg1 *elasticache.DescribeEventsInput
	}
	describeEventsReturns struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}
	describeEventsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}
	DescribeEventsWithContextStub        func(aws.Context, *elasticache.DescribeEventsInput, ...request.Option) (*elasticache.DescribeEventsOutput, error)
	describeEventsWithContextMutex       sync.RWMutex
	describeEventsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeEventsInput
		arg3 []request.Option
	}
	describeEventsWithContextReturns struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}
	describeEventsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}
	DescribeEventsRequestStub        func(*elasticache.DescribeEventsInput) (*request.Request, *elasticache.DescribeEventsOutput)
	describeEventsRequestMutex       sync.RWMutex
	describeEventsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeEventsInput
	}
	describeEventsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeEventsOutput
	}
	describeEventsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeEventsOutput
	}
	DescribeEventsPagesStub        func(*elasticache.DescribeEventsInput, func(*elasticache.DescribeEventsOutput, bool) bool) error
	describeEventsPagesMutex       sync.RWMutex
	describeEventsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeEventsInput
		arg2 func(*elasticache.DescribeEventsOutput, bool) bool
	}
	describeEventsPagesReturns struct {
		result1 error
	}
	describeEventsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeEventsPagesWithContextStub        func(aws.Context, *elasticache.DescribeEventsInput, func(*elasticache.DescribeEventsOutput, bool) bool, ...request.Option) error
	describeEventsPagesWithContextMutex       sync.RWMutex
	describeEventsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeEventsInput
		arg3 func(*elasticache.DescribeEventsOutput, bool) bool
		arg4 []request.Option
	}
	describeEventsPagesWithContextReturns struct {
		result1 error
	}
	describeEventsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReplicationGroupsStub        func(*elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error)
	describeReplicationGroupsMutex       sync.RWMutex
	describeReplicationGroupsArgsForCall []struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}
	describeReplicationGroupsReturns struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}
	describeReplicationGroupsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}
	DescribeReplicationGroupsWithContextStub        func(aws.Context, *elasticache.DescribeReplicationGroupsInput, ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error)
	describeReplicationGroupsWithContextMutex       sync.RWMutex
	describeReplicationGroupsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.Option
	}
	describeReplicationGroupsWithContextReturns struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}
	describeReplicationGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}
	DescribeReplicationGroupsRequestStub        func(*elasticache.DescribeReplicationGroupsInput) (*request.Request, *elasticache.DescribeReplicationGroupsOutput)
	describeReplicationGroupsRequestMutex       sync.RWMutex
	describeReplicationGroupsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}
	describeReplicationGroupsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeReplicationGroupsOutput
	}
	describeReplicationGroupsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeReplicationGroupsOutput
	}
	DescribeReplicationGroupsPagesStub        func(*elasticache.DescribeReplicationGroupsInput, func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) error
	describeReplicationGroupsPagesMutex       sync.RWMutex
	describeReplicationGroupsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
		arg2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
	}
	describeReplicationGroupsPagesReturns struct {
		result1 error
	}
	describeReplicationGroupsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReplicationGroupsPagesWithContextStub        func(aws.Context, *elasticache.DescribeReplicationGroupsInput, func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, ...request.Option) error
	describeReplicationGroupsPagesWithContextMutex       sync.RWMutex
	describeReplicationGroupsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
		arg4 []request.Option
	}
	describeReplicationGroupsPagesWithContextReturns struct {
		result1 error
	}
	describeReplicationGroupsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedCacheNodesStub        func(*elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error)
	describeReservedCacheNodesMutex       sync.RWMutex
	describeReservedCacheNodesArgsForCall []struct {
		arg1 *elasticache.DescribeReservedCacheNodesInput
	}
	describeReservedCacheNodesReturns struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}
	describeReservedCacheNodesReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}
	DescribeReservedCacheNodesWithContextStub        func(aws.Context, *elasticache.DescribeReservedCacheNodesInput, ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error)
	describeReservedCacheNodesWithContextMutex       sync.RWMutex
	describeReservedCacheNodesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReservedCacheNodesInput
		arg3 []request.Option
	}
	describeReservedCacheNodesWithContextReturns struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}
	describeReservedCacheNodesWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}
	DescribeReservedCacheNodesRequestStub        func(*elasticache.DescribeReservedCacheNodesInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOutput)
	describeReservedCacheNodesRequestMutex       sync.RWMutex
	describeReservedCacheNodesRequestArgsForCall []struct {
		arg1 *elasticache.DescribeReservedCacheNodesInput
	}
	describeReservedCacheNodesRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOutput
	}
	describeReservedCacheNodesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOutput
	}
	DescribeReservedCacheNodesPagesStub        func(*elasticache.DescribeReservedCacheNodesInput, func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) error
	describeReservedCacheNodesPagesMutex       sync.RWMutex
	describeReservedCacheNodesPagesArgsForCall []struct {
		arg1 *elasticache.DescribeReservedCacheNodesInput
		arg2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
	}
	describeReservedCacheNodesPagesReturns struct {
		result1 error
	}
	describeReservedCacheNodesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedCacheNodesPagesWithContextStub        func(aws.Context, *elasticache.DescribeReservedCacheNodesInput, func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, ...request.Option) error
	describeReservedCacheNodesPagesWithContextMutex       sync.RWMutex
	describeReservedCacheNodesPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReservedCacheNodesInput
		arg3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
		arg4 []request.Option
	}
	describeReservedCacheNodesPagesWithContextReturns struct {
		result1 error
	}
	describeReservedCacheNodesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedCacheNodesOfferingsStub        func(*elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)
	describeReservedCacheNodesOfferingsMutex       sync.RWMutex
	describeReservedCacheNodesOfferingsArgsForCall []struct {
		arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	}
	describeReservedCacheNodesOfferingsReturns struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}
	describeReservedCacheNodesOfferingsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}
	DescribeReservedCacheNodesOfferingsWithContextStub        func(aws.Context, *elasticache.DescribeReservedCacheNodesOfferingsInput, ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error)
	describeReservedCacheNodesOfferingsWithContextMutex       sync.RWMutex
	describeReservedCacheNodesOfferingsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReservedCacheNodesOfferingsInput
		arg3 []request.Option
	}
	describeReservedCacheNodesOfferingsWithContextReturns struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}
	describeReservedCacheNodesOfferingsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}
	DescribeReservedCacheNodesOfferingsRequestStub        func(*elasticache.DescribeReservedCacheNodesOfferingsInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOfferingsOutput)
	describeReservedCacheNodesOfferingsRequestMutex       sync.RWMutex
	describeReservedCacheNodesOfferingsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	}
	describeReservedCacheNodesOfferingsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput
	}
	describeReservedCacheNodesOfferingsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput
	}
	DescribeReservedCacheNodesOfferingsPagesStub        func(*elasticache.DescribeReservedCacheNodesOfferingsInput, func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) error
	describeReservedCacheNodesOfferingsPagesMutex       sync.RWMutex
	describeReservedCacheNodesOfferingsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput
		arg2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
	}
	describeReservedCacheNodesOfferingsPagesReturns struct {
		result1 error
	}
	describeReservedCacheNodesOfferingsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeReservedCacheNodesOfferingsPagesWithContextStub        func(aws.Context, *elasticache.DescribeReservedCacheNodesOfferingsInput, func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, ...request.Option) error
	describeReservedCacheNodesOfferingsPagesWithContextMutex       sync.RWMutex
	describeReservedCacheNodesOfferingsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReservedCacheNodesOfferingsInput
		arg3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
		arg4 []request.Option
	}
	describeReservedCacheNodesOfferingsPagesWithContextReturns struct {
		result1 error
	}
	describeReservedCacheNodesOfferingsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSnapshotsStub        func(*elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error)
	describeSnapshotsMutex       sync.RWMutex
	describeSnapshotsArgsForCall []struct {
		arg1 *elasticache.DescribeSnapshotsInput
	}
	describeSnapshotsReturns struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}
	describeSnapshotsReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}
	DescribeSnapshotsWithContextStub        func(aws.Context, *elasticache.DescribeSnapshotsInput, ...request.Option) (*elasticache.DescribeSnapshotsOutput, error)
	describeSnapshotsWithContextMutex       sync.RWMutex
	describeSnapshotsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeSnapshotsInput
		arg3 []request.Option
	}
	describeSnapshotsWithContextReturns struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}
	describeSnapshotsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}
	DescribeSnapshotsRequestStub        func(*elasticache.DescribeSnapshotsInput) (*request.Request, *elasticache.DescribeSnapshotsOutput)
	describeSnapshotsRequestMutex       sync.RWMutex
	describeSnapshotsRequestArgsForCall []struct {
		arg1 *elasticache.DescribeSnapshotsInput
	}
	describeSnapshotsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.DescribeSnapshotsOutput
	}
	describeSnapshotsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.DescribeSnapshotsOutput
	}
	DescribeSnapshotsPagesStub        func(*elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool) error
	describeSnapshotsPagesMutex       sync.RWMutex
	describeSnapshotsPagesArgsForCall []struct {
		arg1 *elasticache.DescribeSnapshotsInput
		arg2 func(*elasticache.DescribeSnapshotsOutput, bool) bool
	}
	describeSnapshotsPagesReturns struct {
		result1 error
	}
	describeSnapshotsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSnapshotsPagesWithContextStub        func(aws.Context, *elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool, ...request.Option) error
	describeSnapshotsPagesWithContextMutex       sync.RWMutex
	describeSnapshotsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeSnapshotsInput
		arg3 func(*elasticache.DescribeSnapshotsOutput, bool) bool
		arg4 []request.Option
	}
	describeSnapshotsPagesWithContextReturns struct {
		result1 error
	}
	describeSnapshotsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListAllowedNodeTypeModificationsStub        func(*elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)
	listAllowedNodeTypeModificationsMutex       sync.RWMutex
	listAllowedNodeTypeModificationsArgsForCall []struct {
		arg1 *elasticache.ListAllowedNodeTypeModificationsInput
	}
	listAllowedNodeTypeModificationsReturns struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}
	listAllowedNodeTypeModificationsReturnsOnCall map[int]struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}
	ListAllowedNodeTypeModificationsWithContextStub        func(aws.Context, *elasticache.ListAllowedNodeTypeModificationsInput, ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error)
	listAllowedNodeTypeModificationsWithContextMutex       sync.RWMutex
	listAllowedNodeTypeModificationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.ListAllowedNodeTypeModificationsInput
		arg3 []request.Option
	}
	listAllowedNodeTypeModificationsWithContextReturns struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}
	listAllowedNodeTypeModificationsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}
	ListAllowedNodeTypeModificationsRequestStub        func(*elasticache.ListAllowedNodeTypeModificationsInput) (*request.Request, *elasticache.ListAllowedNodeTypeModificationsOutput)
	listAllowedNodeTypeModificationsRequestMutex       sync.RWMutex
	listAllowedNodeTypeModificationsRequestArgsForCall []struct {
		arg1 *elasticache.ListAllowedNodeTypeModificationsInput
	}
	listAllowedNodeTypeModificationsRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.ListAllowedNodeTypeModificationsOutput
	}
	listAllowedNodeTypeModificationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.ListAllowedNodeTypeModificationsOutput
	}
	ListTagsForResourceStub        func(*elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error)
	listTagsForResourceMutex       sync.RWMutex
	listTagsForResourceArgsForCall []struct {
		arg1 *elasticache.ListTagsForResourceInput
	}
	listTagsForResourceReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	listTagsForResourceReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	ListTagsForResourceWithContextStub        func(aws.Context, *elasticache.ListTagsForResourceInput, ...request.Option) (*elasticache.TagListMessage, error)
	listTagsForResourceWithContextMutex       sync.RWMutex
	listTagsForResourceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.ListTagsForResourceInput
		arg3 []request.Option
	}
	listTagsForResourceWithContextReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	listTagsForResourceWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	ListTagsForResourceRequestStub        func(*elasticache.ListTagsForResourceInput) (*request.Request, *elasticache.TagListMessage)
	listTagsForResourceRequestMutex       sync.RWMutex
	listTagsForResourceRequestArgsForCall []struct {
		arg1 *elasticache.ListTagsForResourceInput
	}
	listTagsForResourceRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}
	listTagsForResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}
	ModifyCacheClusterStub        func(*elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error)
	modifyCacheClusterMutex       sync.RWMutex
	modifyCacheClusterArgsForCall []struct {
		arg1 *elasticache.ModifyCacheClusterInput
	}
	modifyCacheClusterReturns struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}
	modifyCacheClusterReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}
	ModifyCacheClusterWithContextStub        func(aws.Context, *elasticache.ModifyCacheClusterInput, ...request.Option) (*elasticache.ModifyCacheClusterOutput, error)
	modifyCacheClusterWithContextMutex       sync.RWMutex
	modifyCacheClusterWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.ModifyCacheClusterInput
		arg3 []request.Option
	}
	modifyCacheClusterWithContextReturns struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}
	modifyCacheClusterWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}
	ModifyCacheClusterRequestStub        func(*elasticache.ModifyCacheClusterInput) (*request.Request, *elasticache.ModifyCacheClusterOutput)
	modifyCacheClusterRequestMutex       sync.RWMutex
	modifyCacheClusterRequestArgsForCall []struct {
		arg1 *elasticache.ModifyCacheClusterInput
	}
	modifyCacheClusterRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheClusterOutput
	}
	modifyCacheClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheClusterOutput
	}
	ModifyCacheParameterGroupStub        func(*elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)
	modifyCacheParameterGroupMutex       sync.RWMutex
	modifyCacheParameterGroupArgsForCall []struct {
		arg1 *elasticache.ModifyCacheParameterGroupInput
	}
	modifyCacheParameterGroupReturns struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	modifyCacheParameterGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	ModifyCacheParameterGroupWithContextStub        func(aws.Context, *elasticache.ModifyCacheParameterGroupInput, ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)
	modifyCacheParameterGroupWithContextMutex       sync.RWMutex
	modifyCacheParameterGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.ModifyCacheParameterGroupInput
		arg3 []request.Option
	}
	modifyCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	modifyCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	ModifyCacheParameterGroupRequestStub        func(*elasticache.ModifyCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage)
	modifyCacheParameterGroupRequestMutex       sync.RWMutex
	modifyCacheParameterGroupRequestArgsForCall []struct {
		arg1 *elasticache.ModifyCacheParameterGroupInput
	}
	modifyCacheParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}
	modifyCacheParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}
	ModifyCacheSubnetGroupStub        func(*elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error)
	modifyCacheSubnetGroupMutex       sync.RWMutex
	modifyCacheSubnetGroupArgsForCall []struct {
		arg1 *elasticache.ModifyCacheSubnetGroupInput
	}
	modifyCacheSubnetGroupReturns struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}
	modifyCacheSubnetGroupReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}
	ModifyCacheSubnetGroupWithContextStub        func(aws.Context, *elasticache.ModifyCacheSubnetGroupInput, ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error)
	modifyCacheSubnetGroupWithContextMutex       sync.RWMutex
	modifyCacheSubnetGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.ModifyCacheSubnetGroupInput
		arg3 []request.Option
	}
	modifyCacheSubnetGroupWithContextReturns struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}
	modifyCacheSubnetGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}
	ModifyCacheSubnetGroupRequestStub        func(*elasticache.ModifyCacheSubnetGroupInput) (*request.Request, *elasticache.ModifyCacheSubnetGroupOutput)
	modifyCacheSubnetGroupRequestMutex       sync.RWMutex
	modifyCacheSubnetGroupRequestArgsForCall []struct {
		arg1 *elasticache.ModifyCacheSubnetGroupInput
	}
	modifyCacheSubnetGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheSubnetGroupOutput
	}
	modifyCacheSubnetGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheSubnetGroupOutput
	}
	ModifyReplicationGroupStub        func(*elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error)
	modifyReplicationGroupMutex       sync.RWMutex
	modifyReplicationGroupArgsForCall []struct {
		arg1 *elasticache.ModifyReplicationGroupInput
	}
	modifyReplicationGroupReturns struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}
	modifyReplicationGroupReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}
	ModifyReplicationGroupWithContextStub        func(aws.Context, *elasticache.ModifyReplicationGroupInput, ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error)
	modifyReplicationGroupWithContextMutex       sync.RWMutex
	modifyReplicationGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.ModifyReplicationGroupInput
		arg3 []request.Option
	}
	modifyReplicationGroupWithContextReturns struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}
	modifyReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}
	ModifyReplicationGroupRequestStub        func(*elasticache.ModifyReplicationGroupInput) (*request.Request, *elasticache.ModifyReplicationGroupOutput)
	modifyReplicationGroupRequestMutex       sync.RWMutex
	modifyReplicationGroupRequestArgsForCall []struct {
		arg1 *elasticache.ModifyReplicationGroupInput
	}
	modifyReplicationGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupOutput
	}
	modifyReplicationGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupOutput
	}
	ModifyReplicationGroupShardConfigurationStub        func(*elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)
	modifyReplicationGroupShardConfigurationMutex       sync.RWMutex
	modifyReplicationGroupShardConfigurationArgsForCall []struct {
		arg1 *elasticache.ModifyReplicationGroupShardConfigurationInput
	}
	modifyReplicationGroupShardConfigurationReturns struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}
	modifyReplicationGroupShardConfigurationReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}
	ModifyReplicationGroupShardConfigurationWithContextStub        func(aws.Context, *elasticache.ModifyReplicationGroupShardConfigurationInput, ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error)
	modifyReplicationGroupShardConfigurationWithContextMutex       sync.RWMutex
	modifyReplicationGroupShardConfigurationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.ModifyReplicationGroupShardConfigurationInput
		arg3 []request.Option
	}
	modifyReplicationGroupShardConfigurationWithContextReturns struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}
	modifyReplicationGroupShardConfigurationWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}
	ModifyReplicationGroupShardConfigurationRequestStub        func(*elasticache.ModifyReplicationGroupShardConfigurationInput) (*request.Request, *elasticache.ModifyReplicationGroupShardConfigurationOutput)
	modifyReplicationGroupShardConfigurationRequestMutex       sync.RWMutex
	modifyReplicationGroupShardConfigurationRequestArgsForCall []struct {
		arg1 *elasticache.ModifyReplicationGroupShardConfigurationInput
	}
	modifyReplicationGroupShardConfigurationRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput
	}
	modifyReplicationGroupShardConfigurationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput
	}
	PurchaseReservedCacheNodesOfferingStub        func(*elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)
	purchaseReservedCacheNodesOfferingMutex       sync.RWMutex
	purchaseReservedCacheNodesOfferingArgsForCall []struct {
		arg1 *elasticache.PurchaseReservedCacheNodesOfferingInput
	}
	purchaseReservedCacheNodesOfferingReturns struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}
	purchaseReservedCacheNodesOfferingReturnsOnCall map[int]struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}
	PurchaseReservedCacheNodesOfferingWithContextStub        func(aws.Context, *elasticache.PurchaseReservedCacheNodesOfferingInput, ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error)
	purchaseReservedCacheNodesOfferingWithContextMutex       sync.RWMutex
	purchaseReservedCacheNodesOfferingWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.PurchaseReservedCacheNodesOfferingInput
		arg3 []request.Option
	}
	purchaseReservedCacheNodesOfferingWithContextReturns struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}
	purchaseReservedCacheNodesOfferingWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}
	PurchaseReservedCacheNodesOfferingRequestStub        func(*elasticache.PurchaseReservedCacheNodesOfferingInput) (*request.Request, *elasticache.PurchaseReservedCacheNodesOfferingOutput)
	purchaseReservedCacheNodesOfferingRequestMutex       sync.RWMutex
	purchaseReservedCacheNodesOfferingRequestArgsForCall []struct {
		arg1 *elasticache.PurchaseReservedCacheNodesOfferingInput
	}
	purchaseReservedCacheNodesOfferingRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput
	}
	purchaseReservedCacheNodesOfferingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput
	}
	RebootCacheClusterStub        func(*elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error)
	rebootCacheClusterMutex       sync.RWMutex
	rebootCacheClusterArgsForCall []struct {
		arg1 *elasticache.RebootCacheClusterInput
	}
	rebootCacheClusterReturns struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}
	rebootCacheClusterReturnsOnCall map[int]struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}
	RebootCacheClusterWithContextStub        func(aws.Context, *elasticache.RebootCacheClusterInput, ...request.Option) (*elasticache.RebootCacheClusterOutput, error)
	rebootCacheClusterWithContextMutex       sync.RWMutex
	rebootCacheClusterWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.RebootCacheClusterInput
		arg3 []request.Option
	}
	rebootCacheClusterWithContextReturns struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}
	rebootCacheClusterWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}
	RebootCacheClusterRequestStub        func(*elasticache.RebootCacheClusterInput) (*request.Request, *elasticache.RebootCacheClusterOutput)
	rebootCacheClusterRequestMutex       sync.RWMutex
	rebootCacheClusterRequestArgsForCall []struct {
		arg1 *elasticache.RebootCacheClusterInput
	}
	rebootCacheClusterRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.RebootCacheClusterOutput
	}
	rebootCacheClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.RebootCacheClusterOutput
	}
	RemoveTagsFromResourceStub        func(*elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error)
	removeTagsFromResourceMutex       sync.RWMutex
	removeTagsFromResourceArgsForCall []struct {
		arg1 *elasticache.RemoveTagsFromResourceInput
	}
	removeTagsFromResourceReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	removeTagsFromResourceReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	RemoveTagsFromResourceWithContextStub        func(aws.Context, *elasticache.RemoveTagsFromResourceInput, ...request.Option) (*elasticache.TagListMessage, error)
	removeTagsFromResourceWithContextMutex       sync.RWMutex
	removeTagsFromResourceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.RemoveTagsFromResourceInput
		arg3 []request.Option
	}
	removeTagsFromResourceWithContextReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	removeTagsFromResourceWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	RemoveTagsFromResourceRequestStub        func(*elasticache.RemoveTagsFromResourceInput) (*request.Request, *elasticache.TagListMessage)
	removeTagsFromResourceRequestMutex       sync.RWMutex
	removeTagsFromResourceRequestArgsForCall []struct {
		arg1 *elasticache.RemoveTagsFromResourceInput
	}
	removeTagsFromResourceRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}
	removeTagsFromResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}
	ResetCacheParameterGroupStub        func(*elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error)
	resetCacheParameterGroupMutex       sync.RWMutex
	resetCacheParameterGroupArgsForCall []struct {
		arg1 *elasticache.ResetCacheParameterGroupInput
	}
	resetCacheParameterGroupReturns struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	resetCacheParameterGroupReturnsOnCall map[int]struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	ResetCacheParameterGroupWithContextStub        func(aws.Context, *elasticache.ResetCacheParameterGroupInput, ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)
	resetCacheParameterGroupWithContextMutex       sync.RWMutex
	resetCacheParameterGroupWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.ResetCacheParameterGroupInput
		arg3 []request.Option
	}
	resetCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	resetCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	ResetCacheParameterGroupRequestStub        func(*elasticache.ResetCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage)
	resetCacheParameterGroupRequestMutex       sync.RWMutex
	resetCacheParameterGroupRequestArgsForCall []struct {
		arg1 *elasticache.ResetCacheParameterGroupInput
	}
	resetCacheParameterGroupRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}
	resetCacheParameterGroupRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}
	RevokeCacheSecurityGroupIngressStub        func(*elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)
	revokeCacheSecurityGroupIngressMutex       sync.RWMutex
	revokeCacheSecurityGroupIngressArgsForCall []struct {
		arg1 *elasticache.RevokeCacheSecurityGroupIngressInput
	}
	revokeCacheSecurityGroupIngressReturns struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}
	revokeCacheSecurityGroupIngressReturnsOnCall map[int]struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}
	RevokeCacheSecurityGroupIngressWithContextStub        func(aws.Context, *elasticache.RevokeCacheSecurityGroupIngressInput, ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error)
	revokeCacheSecurityGroupIngressWithContextMutex       sync.RWMutex
	revokeCacheSecurityGroupIngressWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.RevokeCacheSecurityGroupIngressInput
		arg3 []request.Option
	}
	revokeCacheSecurityGroupIngressWithContextReturns struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}
	revokeCacheSecurityGroupIngressWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}
	RevokeCacheSecurityGroupIngressRequestStub        func(*elasticache.RevokeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.RevokeCacheSecurityGroupIngressOutput)
	revokeCacheSecurityGroupIngressRequestMutex       sync.RWMutex
	revokeCacheSecurityGroupIngressRequestArgsForCall []struct {
		arg1 *elasticache.RevokeCacheSecurityGroupIngressInput
	}
	revokeCacheSecurityGroupIngressRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.RevokeCacheSecurityGroupIngressOutput
	}
	revokeCacheSecurityGroupIngressRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.RevokeCacheSecurityGroupIngressOutput
	}
	TestFailoverStub        func(*elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error)
	testFailoverMutex       sync.RWMutex
	testFailoverArgsForCall []struct {
		arg1 *elasticache.TestFailoverInput
	}
	testFailoverReturns struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}
	testFailoverReturnsOnCall map[int]struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}
	TestFailoverWithContextStub        func(aws.Context, *elasticache.TestFailoverInput, ...request.Option) (*elasticache.TestFailoverOutput, error)
	testFailoverWithContextMutex       sync.RWMutex
	testFailoverWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.TestFailoverInput
		arg3 []request.Option
	}
	testFailoverWithContextReturns struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}
	testFailoverWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}
	TestFailoverRequestStub        func(*elasticache.TestFailoverInput) (*request.Request, *elasticache.TestFailoverOutput)
	testFailoverRequestMutex       sync.RWMutex
	testFailoverRequestArgsForCall []struct {
		arg1 *elasticache.TestFailoverInput
	}
	testFailoverRequestReturns struct {
		result1 *request.Request
		result2 *elasticache.TestFailoverOutput
	}
	testFailoverRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *elasticache.TestFailoverOutput
	}
	WaitUntilCacheClusterAvailableStub        func(*elasticache.DescribeCacheClustersInput) error
	waitUntilCacheClusterAvailableMutex       sync.RWMutex
	waitUntilCacheClusterAvailableArgsForCall []struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}
	waitUntilCacheClusterAvailableReturns struct {
		result1 error
	}
	waitUntilCacheClusterAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilCacheClusterAvailableWithContextStub        func(aws.Context, *elasticache.DescribeCacheClustersInput, ...request.WaiterOption) error
	waitUntilCacheClusterAvailableWithContextMutex       sync.RWMutex
	waitUntilCacheClusterAvailableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.WaiterOption
	}
	waitUntilCacheClusterAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilCacheClusterAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilCacheClusterDeletedStub        func(*elasticache.DescribeCacheClustersInput) error
	waitUntilCacheClusterDeletedMutex       sync.RWMutex
	waitUntilCacheClusterDeletedArgsForCall []struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}
	waitUntilCacheClusterDeletedReturns struct {
		result1 error
	}
	waitUntilCacheClusterDeletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilCacheClusterDeletedWithContextStub        func(aws.Context, *elasticache.DescribeCacheClustersInput, ...request.WaiterOption) error
	waitUntilCacheClusterDeletedWithContextMutex       sync.RWMutex
	waitUntilCacheClusterDeletedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.WaiterOption
	}
	waitUntilCacheClusterDeletedWithContextReturns struct {
		result1 error
	}
	waitUntilCacheClusterDeletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilReplicationGroupAvailableStub        func(*elasticache.DescribeReplicationGroupsInput) error
	waitUntilReplicationGroupAvailableMutex       sync.RWMutex
	waitUntilReplicationGroupAvailableArgsForCall []struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}
	waitUntilReplicationGroupAvailableReturns struct {
		result1 error
	}
	waitUntilReplicationGroupAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilReplicationGroupAvailableWithContextStub        func(aws.Context, *elasticache.DescribeReplicationGroupsInput, ...request.WaiterOption) error
	waitUntilReplicationGroupAvailableWithContextMutex       sync.RWMutex
	waitUntilReplicationGroupAvailableWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.WaiterOption
	}
	waitUntilReplicationGroupAvailableWithContextReturns struct {
		result1 error
	}
	waitUntilReplicationGroupAvailableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilReplicationGroupDeletedStub        func(*elasticache.DescribeReplicationGroupsInput) error
	waitUntilReplicationGroupDeletedMutex       sync.RWMutex
	waitUntilReplicationGroupDeletedArgsForCall []struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}
	waitUntilReplicationGroupDeletedReturns struct {
		result1 error
	}
	waitUntilReplicationGroupDeletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilReplicationGroupDeletedWithContextStub        func(aws.Context, *elasticache.DescribeReplicationGroupsInput, ...request.WaiterOption) error
	waitUntilReplicationGroupDeletedWithContextMutex       sync.RWMutex
	waitUntilReplicationGroupDeletedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.WaiterOption
	}
	waitUntilReplicationGroupDeletedWithContextReturns struct {
		result1 error
	}
	waitUntilReplicationGroupDeletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeElastiCacheAPI) AddTagsToResource(arg1 *elasticache.AddTagsToResourceInput) (*elasticache.TagListMessage, error) {
	fake.addTagsToResourceMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceReturnsOnCall[len(fake.addTagsToResourceArgsForCall)]
	fake.addTagsToResourceArgsForCall = append(fake.addTagsToResourceArgsForCall, struct {
		arg1 *elasticache.AddTagsToResourceInput
	}{arg1})
	fake.recordInvocation("AddTagsToResource", []interface{}{arg1})
	fake.addTagsToResourceMutex.Unlock()
	if fake.AddTagsToResourceStub != nil {
		return fake.AddTagsToResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.addTagsToResourceReturns.result1, fake.addTagsToResourceReturns.result2
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceCallCount() int {
	fake.addTagsToResourceMutex.RLock()
	defer fake.addTagsToResourceMutex.RUnlock()
	return len(fake.addTagsToResourceArgsForCall)
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceArgsForCall(i int) *elasticache.AddTagsToResourceInput {
	fake.addTagsToResourceMutex.RLock()
	defer fake.addTagsToResourceMutex.RUnlock()
	return fake.addTagsToResourceArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.AddTagsToResourceStub = nil
	fake.addTagsToResourceReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.AddTagsToResourceStub = nil
	if fake.addTagsToResourceReturnsOnCall == nil {
		fake.addTagsToResourceReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.addTagsToResourceReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceWithContext(arg1 aws.Context, arg2 *elasticache.AddTagsToResourceInput, arg3 ...request.Option) (*elasticache.TagListMessage, error) {
	fake.addTagsToResourceWithContextMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceWithContextReturnsOnCall[len(fake.addTagsToResourceWithContextArgsForCall)]
	fake.addTagsToResourceWithContextArgsForCall = append(fake.addTagsToResourceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.AddTagsToResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AddTagsToResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.addTagsToResourceWithContextMutex.Unlock()
	if fake.AddTagsToResourceWithContextStub != nil {
		return fake.AddTagsToResourceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.addTagsToResourceWithContextReturns.result1, fake.addTagsToResourceWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceWithContextCallCount() int {
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	return len(fake.addTagsToResourceWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceWithContextArgsForCall(i int) (aws.Context, *elasticache.AddTagsToResourceInput, []request.Option) {
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	return fake.addTagsToResourceWithContextArgsForCall[i].arg1, fake.addTagsToResourceWithContextArgsForCall[i].arg2, fake.addTagsToResourceWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceWithContextReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.AddTagsToResourceWithContextStub = nil
	fake.addTagsToResourceWithContextReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceWithContextReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.AddTagsToResourceWithContextStub = nil
	if fake.addTagsToResourceWithContextReturnsOnCall == nil {
		fake.addTagsToResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.addTagsToResourceWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceRequest(arg1 *elasticache.AddTagsToResourceInput) (*request.Request, *elasticache.TagListMessage) {
	fake.addTagsToResourceRequestMutex.Lock()
	ret, specificReturn := fake.addTagsToResourceRequestReturnsOnCall[len(fake.addTagsToResourceRequestArgsForCall)]
	fake.addTagsToResourceRequestArgsForCall = append(fake.addTagsToResourceRequestArgsForCall, struct {
		arg1 *elasticache.AddTagsToResourceInput
	}{arg1})
	fake.recordInvocation("AddTagsToResourceRequest", []interface{}{arg1})
	fake.addTagsToResourceRequestMutex.Unlock()
	if fake.AddTagsToResourceRequestStub != nil {
		return fake.AddTagsToResourceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.addTagsToResourceRequestReturns.result1, fake.addTagsToResourceRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceRequestCallCount() int {
	fake.addTagsToResourceRequestMutex.RLock()
	defer fake.addTagsToResourceRequestMutex.RUnlock()
	return len(fake.addTagsToResourceRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceRequestArgsForCall(i int) *elasticache.AddTagsToResourceInput {
	fake.addTagsToResourceRequestMutex.RLock()
	defer fake.addTagsToResourceRequestMutex.RUnlock()
	return fake.addTagsToResourceRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceRequestReturns(result1 *request.Request, result2 *elasticache.TagListMessage) {
	fake.AddTagsToResourceRequestStub = nil
	fake.addTagsToResourceRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AddTagsToResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.TagListMessage) {
	fake.AddTagsToResourceRequestStub = nil
	if fake.addTagsToResourceRequestReturnsOnCall == nil {
		fake.addTagsToResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.TagListMessage
		})
	}
	fake.addTagsToResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngress(arg1 *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	fake.authorizeCacheSecurityGroupIngressMutex.Lock()
	ret, specificReturn := fake.authorizeCacheSecurityGroupIngressReturnsOnCall[len(fake.authorizeCacheSecurityGroupIngressArgsForCall)]
	fake.authorizeCacheSecurityGroupIngressArgsForCall = append(fake.authorizeCacheSecurityGroupIngressArgsForCall, struct {
		arg1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}{arg1})
	fake.recordInvocation("AuthorizeCacheSecurityGroupIngress", []interface{}{arg1})
	fake.authorizeCacheSecurityGroupIngressMutex.Unlock()
	if fake.AuthorizeCacheSecurityGroupIngressStub != nil {
		return fake.AuthorizeCacheSecurityGroupIngressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.authorizeCacheSecurityGroupIngressReturns.result1, fake.authorizeCacheSecurityGroupIngressReturns.result2
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressCallCount() int {
	fake.authorizeCacheSecurityGroupIngressMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressMutex.RUnlock()
	return len(fake.authorizeCacheSecurityGroupIngressArgsForCall)
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressArgsForCall(i int) *elasticache.AuthorizeCacheSecurityGroupIngressInput {
	fake.authorizeCacheSecurityGroupIngressMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressMutex.RUnlock()
	return fake.authorizeCacheSecurityGroupIngressArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressReturns(result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput, result2 error) {
	fake.AuthorizeCacheSecurityGroupIngressStub = nil
	fake.authorizeCacheSecurityGroupIngressReturns = struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressReturnsOnCall(i int, result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput, result2 error) {
	fake.AuthorizeCacheSecurityGroupIngressStub = nil
	if fake.authorizeCacheSecurityGroupIngressReturnsOnCall == nil {
		fake.authorizeCacheSecurityGroupIngressReturnsOnCall = make(map[int]struct {
			result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.authorizeCacheSecurityGroupIngressReturnsOnCall[i] = struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressWithContext(arg1 aws.Context, arg2 *elasticache.AuthorizeCacheSecurityGroupIngressInput, arg3 ...request.Option) (*elasticache.AuthorizeCacheSecurityGroupIngressOutput, error) {
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.Lock()
	ret, specificReturn := fake.authorizeCacheSecurityGroupIngressWithContextReturnsOnCall[len(fake.authorizeCacheSecurityGroupIngressWithContextArgsForCall)]
	fake.authorizeCacheSecurityGroupIngressWithContextArgsForCall = append(fake.authorizeCacheSecurityGroupIngressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.AuthorizeCacheSecurityGroupIngressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("AuthorizeCacheSecurityGroupIngressWithContext", []interface{}{arg1, arg2, arg3})
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.Unlock()
	if fake.AuthorizeCacheSecurityGroupIngressWithContextStub != nil {
		return fake.AuthorizeCacheSecurityGroupIngressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.authorizeCacheSecurityGroupIngressWithContextReturns.result1, fake.authorizeCacheSecurityGroupIngressWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressWithContextCallCount() int {
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressWithContextMutex.RUnlock()
	return len(fake.authorizeCacheSecurityGroupIngressWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressWithContextArgsForCall(i int) (aws.Context, *elasticache.AuthorizeCacheSecurityGroupIngressInput, []request.Option) {
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressWithContextMutex.RUnlock()
	return fake.authorizeCacheSecurityGroupIngressWithContextArgsForCall[i].arg1, fake.authorizeCacheSecurityGroupIngressWithContextArgsForCall[i].arg2, fake.authorizeCacheSecurityGroupIngressWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressWithContextReturns(result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput, result2 error) {
	fake.AuthorizeCacheSecurityGroupIngressWithContextStub = nil
	fake.authorizeCacheSecurityGroupIngressWithContextReturns = struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressWithContextReturnsOnCall(i int, result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput, result2 error) {
	fake.AuthorizeCacheSecurityGroupIngressWithContextStub = nil
	if fake.authorizeCacheSecurityGroupIngressWithContextReturnsOnCall == nil {
		fake.authorizeCacheSecurityGroupIngressWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.authorizeCacheSecurityGroupIngressWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressRequest(arg1 *elasticache.AuthorizeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.AuthorizeCacheSecurityGroupIngressOutput) {
	fake.authorizeCacheSecurityGroupIngressRequestMutex.Lock()
	ret, specificReturn := fake.authorizeCacheSecurityGroupIngressRequestReturnsOnCall[len(fake.authorizeCacheSecurityGroupIngressRequestArgsForCall)]
	fake.authorizeCacheSecurityGroupIngressRequestArgsForCall = append(fake.authorizeCacheSecurityGroupIngressRequestArgsForCall, struct {
		arg1 *elasticache.AuthorizeCacheSecurityGroupIngressInput
	}{arg1})
	fake.recordInvocation("AuthorizeCacheSecurityGroupIngressRequest", []interface{}{arg1})
	fake.authorizeCacheSecurityGroupIngressRequestMutex.Unlock()
	if fake.AuthorizeCacheSecurityGroupIngressRequestStub != nil {
		return fake.AuthorizeCacheSecurityGroupIngressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.authorizeCacheSecurityGroupIngressRequestReturns.result1, fake.authorizeCacheSecurityGroupIngressRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressRequestCallCount() int {
	fake.authorizeCacheSecurityGroupIngressRequestMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressRequestMutex.RUnlock()
	return len(fake.authorizeCacheSecurityGroupIngressRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressRequestArgsForCall(i int) *elasticache.AuthorizeCacheSecurityGroupIngressInput {
	fake.authorizeCacheSecurityGroupIngressRequestMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressRequestMutex.RUnlock()
	return fake.authorizeCacheSecurityGroupIngressRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressRequestReturns(result1 *request.Request, result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput) {
	fake.AuthorizeCacheSecurityGroupIngressRequestStub = nil
	fake.authorizeCacheSecurityGroupIngressRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) AuthorizeCacheSecurityGroupIngressRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput) {
	fake.AuthorizeCacheSecurityGroupIngressRequestStub = nil
	if fake.authorizeCacheSecurityGroupIngressRequestReturnsOnCall == nil {
		fake.authorizeCacheSecurityGroupIngressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
		})
	}
	fake.authorizeCacheSecurityGroupIngressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.AuthorizeCacheSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CopySnapshot(arg1 *elasticache.CopySnapshotInput) (*elasticache.CopySnapshotOutput, error) {
	fake.copySnapshotMutex.Lock()
	ret, specificReturn := fake.copySnapshotReturnsOnCall[len(fake.copySnapshotArgsForCall)]
	fake.copySnapshotArgsForCall = append(fake.copySnapshotArgsForCall, struct {
		arg1 *elasticache.CopySnapshotInput
	}{arg1})
	fake.recordInvocation("CopySnapshot", []interface{}{arg1})
	fake.copySnapshotMutex.Unlock()
	if fake.CopySnapshotStub != nil {
		return fake.CopySnapshotStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.copySnapshotReturns.result1, fake.copySnapshotReturns.result2
}

func (fake *FakeElastiCacheAPI) CopySnapshotCallCount() int {
	fake.copySnapshotMutex.RLock()
	defer fake.copySnapshotMutex.RUnlock()
	return len(fake.copySnapshotArgsForCall)
}

func (fake *FakeElastiCacheAPI) CopySnapshotArgsForCall(i int) *elasticache.CopySnapshotInput {
	fake.copySnapshotMutex.RLock()
	defer fake.copySnapshotMutex.RUnlock()
	return fake.copySnapshotArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CopySnapshotReturns(result1 *elasticache.CopySnapshotOutput, result2 error) {
	fake.CopySnapshotStub = nil
	fake.copySnapshotReturns = struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CopySnapshotReturnsOnCall(i int, result1 *elasticache.CopySnapshotOutput, result2 error) {
	fake.CopySnapshotStub = nil
	if fake.copySnapshotReturnsOnCall == nil {
		fake.copySnapshotReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CopySnapshotOutput
			result2 error
		})
	}
	fake.copySnapshotReturnsOnCall[i] = struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CopySnapshotWithContext(arg1 aws.Context, arg2 *elasticache.CopySnapshotInput, arg3 ...request.Option) (*elasticache.CopySnapshotOutput, error) {
	fake.copySnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.copySnapshotWithContextReturnsOnCall[len(fake.copySnapshotWithContextArgsForCall)]
	fake.copySnapshotWithContextArgsForCall = append(fake.copySnapshotWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.CopySnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CopySnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.copySnapshotWithContextMutex.Unlock()
	if fake.CopySnapshotWithContextStub != nil {
		return fake.CopySnapshotWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.copySnapshotWithContextReturns.result1, fake.copySnapshotWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) CopySnapshotWithContextCallCount() int {
	fake.copySnapshotWithContextMutex.RLock()
	defer fake.copySnapshotWithContextMutex.RUnlock()
	return len(fake.copySnapshotWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CopySnapshotWithContextArgsForCall(i int) (aws.Context, *elasticache.CopySnapshotInput, []request.Option) {
	fake.copySnapshotWithContextMutex.RLock()
	defer fake.copySnapshotWithContextMutex.RUnlock()
	return fake.copySnapshotWithContextArgsForCall[i].arg1, fake.copySnapshotWithContextArgsForCall[i].arg2, fake.copySnapshotWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) CopySnapshotWithContextReturns(result1 *elasticache.CopySnapshotOutput, result2 error) {
	fake.CopySnapshotWithContextStub = nil
	fake.copySnapshotWithContextReturns = struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CopySnapshotWithContextReturnsOnCall(i int, result1 *elasticache.CopySnapshotOutput, result2 error) {
	fake.CopySnapshotWithContextStub = nil
	if fake.copySnapshotWithContextReturnsOnCall == nil {
		fake.copySnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CopySnapshotOutput
			result2 error
		})
	}
	fake.copySnapshotWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CopySnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CopySnapshotRequest(arg1 *elasticache.CopySnapshotInput) (*request.Request, *elasticache.CopySnapshotOutput) {
	fake.copySnapshotRequestMutex.Lock()
	ret, specificReturn := fake.copySnapshotRequestReturnsOnCall[len(fake.copySnapshotRequestArgsForCall)]
	fake.copySnapshotRequestArgsForCall = append(fake.copySnapshotRequestArgsForCall, struct {
		arg1 *elasticache.CopySnapshotInput
	}{arg1})
	fake.recordInvocation("CopySnapshotRequest", []interface{}{arg1})
	fake.copySnapshotRequestMutex.Unlock()
	if fake.CopySnapshotRequestStub != nil {
		return fake.CopySnapshotRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.copySnapshotRequestReturns.result1, fake.copySnapshotRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) CopySnapshotRequestCallCount() int {
	fake.copySnapshotRequestMutex.RLock()
	defer fake.copySnapshotRequestMutex.RUnlock()
	return len(fake.copySnapshotRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CopySnapshotRequestArgsForCall(i int) *elasticache.CopySnapshotInput {
	fake.copySnapshotRequestMutex.RLock()
	defer fake.copySnapshotRequestMutex.RUnlock()
	return fake.copySnapshotRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CopySnapshotRequestReturns(result1 *request.Request, result2 *elasticache.CopySnapshotOutput) {
	fake.CopySnapshotRequestStub = nil
	fake.copySnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CopySnapshotOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CopySnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CopySnapshotOutput) {
	fake.CopySnapshotRequestStub = nil
	if fake.copySnapshotRequestReturnsOnCall == nil {
		fake.copySnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CopySnapshotOutput
		})
	}
	fake.copySnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CopySnapshotOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheCluster(arg1 *elasticache.CreateCacheClusterInput) (*elasticache.CreateCacheClusterOutput, error) {
	fake.createCacheClusterMutex.Lock()
	ret, specificReturn := fake.createCacheClusterReturnsOnCall[len(fake.createCacheClusterArgsForCall)]
	fake.createCacheClusterArgsForCall = append(fake.createCacheClusterArgsForCall, struct {
		arg1 *elasticache.CreateCacheClusterInput
	}{arg1})
	fake.recordInvocation("CreateCacheCluster", []interface{}{arg1})
	fake.createCacheClusterMutex.Unlock()
	if fake.CreateCacheClusterStub != nil {
		return fake.CreateCacheClusterStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheClusterReturns.result1, fake.createCacheClusterReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterCallCount() int {
	fake.createCacheClusterMutex.RLock()
	defer fake.createCacheClusterMutex.RUnlock()
	return len(fake.createCacheClusterArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterArgsForCall(i int) *elasticache.CreateCacheClusterInput {
	fake.createCacheClusterMutex.RLock()
	defer fake.createCacheClusterMutex.RUnlock()
	return fake.createCacheClusterArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterReturns(result1 *elasticache.CreateCacheClusterOutput, result2 error) {
	fake.CreateCacheClusterStub = nil
	fake.createCacheClusterReturns = struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterReturnsOnCall(i int, result1 *elasticache.CreateCacheClusterOutput, result2 error) {
	fake.CreateCacheClusterStub = nil
	if fake.createCacheClusterReturnsOnCall == nil {
		fake.createCacheClusterReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheClusterOutput
			result2 error
		})
	}
	fake.createCacheClusterReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterWithContext(arg1 aws.Context, arg2 *elasticache.CreateCacheClusterInput, arg3 ...request.Option) (*elasticache.CreateCacheClusterOutput, error) {
	fake.createCacheClusterWithContextMutex.Lock()
	ret, specificReturn := fake.createCacheClusterWithContextReturnsOnCall[len(fake.createCacheClusterWithContextArgsForCall)]
	fake.createCacheClusterWithContextArgsForCall = append(fake.createCacheClusterWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.CreateCacheClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateCacheClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCacheClusterWithContextMutex.Unlock()
	if fake.CreateCacheClusterWithContextStub != nil {
		return fake.CreateCacheClusterWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheClusterWithContextReturns.result1, fake.createCacheClusterWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterWithContextCallCount() int {
	fake.createCacheClusterWithContextMutex.RLock()
	defer fake.createCacheClusterWithContextMutex.RUnlock()
	return len(fake.createCacheClusterWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterWithContextArgsForCall(i int) (aws.Context, *elasticache.CreateCacheClusterInput, []request.Option) {
	fake.createCacheClusterWithContextMutex.RLock()
	defer fake.createCacheClusterWithContextMutex.RUnlock()
	return fake.createCacheClusterWithContextArgsForCall[i].arg1, fake.createCacheClusterWithContextArgsForCall[i].arg2, fake.createCacheClusterWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterWithContextReturns(result1 *elasticache.CreateCacheClusterOutput, result2 error) {
	fake.CreateCacheClusterWithContextStub = nil
	fake.createCacheClusterWithContextReturns = struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterWithContextReturnsOnCall(i int, result1 *elasticache.CreateCacheClusterOutput, result2 error) {
	fake.CreateCacheClusterWithContextStub = nil
	if fake.createCacheClusterWithContextReturnsOnCall == nil {
		fake.createCacheClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheClusterOutput
			result2 error
		})
	}
	fake.createCacheClusterWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterRequest(arg1 *elasticache.CreateCacheClusterInput) (*request.Request, *elasticache.CreateCacheClusterOutput) {
	fake.createCacheClusterRequestMutex.Lock()
	ret, specificReturn := fake.createCacheClusterRequestReturnsOnCall[len(fake.createCacheClusterRequestArgsForCall)]
	fake.createCacheClusterRequestArgsForCall = append(fake.createCacheClusterRequestArgsForCall, struct {
		arg1 *elasticache.CreateCacheClusterInput
	}{arg1})
	fake.recordInvocation("CreateCacheClusterRequest", []interface{}{arg1})
	fake.createCacheClusterRequestMutex.Unlock()
	if fake.CreateCacheClusterRequestStub != nil {
		return fake.CreateCacheClusterRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheClusterRequestReturns.result1, fake.createCacheClusterRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterRequestCallCount() int {
	fake.createCacheClusterRequestMutex.RLock()
	defer fake.createCacheClusterRequestMutex.RUnlock()
	return len(fake.createCacheClusterRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterRequestArgsForCall(i int) *elasticache.CreateCacheClusterInput {
	fake.createCacheClusterRequestMutex.RLock()
	defer fake.createCacheClusterRequestMutex.RUnlock()
	return fake.createCacheClusterRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterRequestReturns(result1 *request.Request, result2 *elasticache.CreateCacheClusterOutput) {
	fake.CreateCacheClusterRequestStub = nil
	fake.createCacheClusterRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateCacheClusterOutput) {
	fake.CreateCacheClusterRequestStub = nil
	if fake.createCacheClusterRequestReturnsOnCall == nil {
		fake.createCacheClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateCacheClusterOutput
		})
	}
	fake.createCacheClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroup(arg1 *elasticache.CreateCacheParameterGroupInput) (*elasticache.CreateCacheParameterGroupOutput, error) {
	fake.createCacheParameterGroupMutex.Lock()
	ret, specificReturn := fake.createCacheParameterGroupReturnsOnCall[len(fake.createCacheParameterGroupArgsForCall)]
	fake.createCacheParameterGroupArgsForCall = append(fake.createCacheParameterGroupArgsForCall, struct {
		arg1 *elasticache.CreateCacheParameterGroupInput
	}{arg1})
	fake.recordInvocation("CreateCacheParameterGroup", []interface{}{arg1})
	fake.createCacheParameterGroupMutex.Unlock()
	if fake.CreateCacheParameterGroupStub != nil {
		return fake.CreateCacheParameterGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheParameterGroupReturns.result1, fake.createCacheParameterGroupReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupCallCount() int {
	fake.createCacheParameterGroupMutex.RLock()
	defer fake.createCacheParameterGroupMutex.RUnlock()
	return len(fake.createCacheParameterGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupArgsForCall(i int) *elasticache.CreateCacheParameterGroupInput {
	fake.createCacheParameterGroupMutex.RLock()
	defer fake.createCacheParameterGroupMutex.RUnlock()
	return fake.createCacheParameterGroupArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupReturns(result1 *elasticache.CreateCacheParameterGroupOutput, result2 error) {
	fake.CreateCacheParameterGroupStub = nil
	fake.createCacheParameterGroupReturns = struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupReturnsOnCall(i int, result1 *elasticache.CreateCacheParameterGroupOutput, result2 error) {
	fake.CreateCacheParameterGroupStub = nil
	if fake.createCacheParameterGroupReturnsOnCall == nil {
		fake.createCacheParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheParameterGroupOutput
			result2 error
		})
	}
	fake.createCacheParameterGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupWithContext(arg1 aws.Context, arg2 *elasticache.CreateCacheParameterGroupInput, arg3 ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error) {
	fake.createCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createCacheParameterGroupWithContextReturnsOnCall[len(fake.createCacheParameterGroupWithContextArgsForCall)]
	fake.createCacheParameterGroupWithContextArgsForCall = append(fake.createCacheParameterGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.CreateCacheParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateCacheParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCacheParameterGroupWithContextMutex.Unlock()
	if fake.CreateCacheParameterGroupWithContextStub != nil {
		return fake.CreateCacheParameterGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheParameterGroupWithContextReturns.result1, fake.createCacheParameterGroupWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupWithContextCallCount() int {
	fake.createCacheParameterGroupWithContextMutex.RLock()
	defer fake.createCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.createCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.CreateCacheParameterGroupInput, []request.Option) {
	fake.createCacheParameterGroupWithContextMutex.RLock()
	defer fake.createCacheParameterGroupWithContextMutex.RUnlock()
	return fake.createCacheParameterGroupWithContextArgsForCall[i].arg1, fake.createCacheParameterGroupWithContextArgsForCall[i].arg2, fake.createCacheParameterGroupWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupWithContextReturns(result1 *elasticache.CreateCacheParameterGroupOutput, result2 error) {
	fake.CreateCacheParameterGroupWithContextStub = nil
	fake.createCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateCacheParameterGroupOutput, result2 error) {
	fake.CreateCacheParameterGroupWithContextStub = nil
	if fake.createCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.createCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheParameterGroupOutput
			result2 error
		})
	}
	fake.createCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupRequest(arg1 *elasticache.CreateCacheParameterGroupInput) (*request.Request, *elasticache.CreateCacheParameterGroupOutput) {
	fake.createCacheParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.createCacheParameterGroupRequestReturnsOnCall[len(fake.createCacheParameterGroupRequestArgsForCall)]
	fake.createCacheParameterGroupRequestArgsForCall = append(fake.createCacheParameterGroupRequestArgsForCall, struct {
		arg1 *elasticache.CreateCacheParameterGroupInput
	}{arg1})
	fake.recordInvocation("CreateCacheParameterGroupRequest", []interface{}{arg1})
	fake.createCacheParameterGroupRequestMutex.Unlock()
	if fake.CreateCacheParameterGroupRequestStub != nil {
		return fake.CreateCacheParameterGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheParameterGroupRequestReturns.result1, fake.createCacheParameterGroupRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupRequestCallCount() int {
	fake.createCacheParameterGroupRequestMutex.RLock()
	defer fake.createCacheParameterGroupRequestMutex.RUnlock()
	return len(fake.createCacheParameterGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupRequestArgsForCall(i int) *elasticache.CreateCacheParameterGroupInput {
	fake.createCacheParameterGroupRequestMutex.RLock()
	defer fake.createCacheParameterGroupRequestMutex.RUnlock()
	return fake.createCacheParameterGroupRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupRequestReturns(result1 *request.Request, result2 *elasticache.CreateCacheParameterGroupOutput) {
	fake.CreateCacheParameterGroupRequestStub = nil
	fake.createCacheParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateCacheParameterGroupOutput) {
	fake.CreateCacheParameterGroupRequestStub = nil
	if fake.createCacheParameterGroupRequestReturnsOnCall == nil {
		fake.createCacheParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateCacheParameterGroupOutput
		})
	}
	fake.createCacheParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroup(arg1 *elasticache.CreateCacheSecurityGroupInput) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	fake.createCacheSecurityGroupMutex.Lock()
	ret, specificReturn := fake.createCacheSecurityGroupReturnsOnCall[len(fake.createCacheSecurityGroupArgsForCall)]
	fake.createCacheSecurityGroupArgsForCall = append(fake.createCacheSecurityGroupArgsForCall, struct {
		arg1 *elasticache.CreateCacheSecurityGroupInput
	}{arg1})
	fake.recordInvocation("CreateCacheSecurityGroup", []interface{}{arg1})
	fake.createCacheSecurityGroupMutex.Unlock()
	if fake.CreateCacheSecurityGroupStub != nil {
		return fake.CreateCacheSecurityGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheSecurityGroupReturns.result1, fake.createCacheSecurityGroupReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupCallCount() int {
	fake.createCacheSecurityGroupMutex.RLock()
	defer fake.createCacheSecurityGroupMutex.RUnlock()
	return len(fake.createCacheSecurityGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupArgsForCall(i int) *elasticache.CreateCacheSecurityGroupInput {
	fake.createCacheSecurityGroupMutex.RLock()
	defer fake.createCacheSecurityGroupMutex.RUnlock()
	return fake.createCacheSecurityGroupArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupReturns(result1 *elasticache.CreateCacheSecurityGroupOutput, result2 error) {
	fake.CreateCacheSecurityGroupStub = nil
	fake.createCacheSecurityGroupReturns = struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupReturnsOnCall(i int, result1 *elasticache.CreateCacheSecurityGroupOutput, result2 error) {
	fake.CreateCacheSecurityGroupStub = nil
	if fake.createCacheSecurityGroupReturnsOnCall == nil {
		fake.createCacheSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheSecurityGroupOutput
			result2 error
		})
	}
	fake.createCacheSecurityGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupWithContext(arg1 aws.Context, arg2 *elasticache.CreateCacheSecurityGroupInput, arg3 ...request.Option) (*elasticache.CreateCacheSecurityGroupOutput, error) {
	fake.createCacheSecurityGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createCacheSecurityGroupWithContextReturnsOnCall[len(fake.createCacheSecurityGroupWithContextArgsForCall)]
	fake.createCacheSecurityGroupWithContextArgsForCall = append(fake.createCacheSecurityGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.CreateCacheSecurityGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateCacheSecurityGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCacheSecurityGroupWithContextMutex.Unlock()
	if fake.CreateCacheSecurityGroupWithContextStub != nil {
		return fake.CreateCacheSecurityGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheSecurityGroupWithContextReturns.result1, fake.createCacheSecurityGroupWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupWithContextCallCount() int {
	fake.createCacheSecurityGroupWithContextMutex.RLock()
	defer fake.createCacheSecurityGroupWithContextMutex.RUnlock()
	return len(fake.createCacheSecurityGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.CreateCacheSecurityGroupInput, []request.Option) {
	fake.createCacheSecurityGroupWithContextMutex.RLock()
	defer fake.createCacheSecurityGroupWithContextMutex.RUnlock()
	return fake.createCacheSecurityGroupWithContextArgsForCall[i].arg1, fake.createCacheSecurityGroupWithContextArgsForCall[i].arg2, fake.createCacheSecurityGroupWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupWithContextReturns(result1 *elasticache.CreateCacheSecurityGroupOutput, result2 error) {
	fake.CreateCacheSecurityGroupWithContextStub = nil
	fake.createCacheSecurityGroupWithContextReturns = struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateCacheSecurityGroupOutput, result2 error) {
	fake.CreateCacheSecurityGroupWithContextStub = nil
	if fake.createCacheSecurityGroupWithContextReturnsOnCall == nil {
		fake.createCacheSecurityGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheSecurityGroupOutput
			result2 error
		})
	}
	fake.createCacheSecurityGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupRequest(arg1 *elasticache.CreateCacheSecurityGroupInput) (*request.Request, *elasticache.CreateCacheSecurityGroupOutput) {
	fake.createCacheSecurityGroupRequestMutex.Lock()
	ret, specificReturn := fake.createCacheSecurityGroupRequestReturnsOnCall[len(fake.createCacheSecurityGroupRequestArgsForCall)]
	fake.createCacheSecurityGroupRequestArgsForCall = append(fake.createCacheSecurityGroupRequestArgsForCall, struct {
		arg1 *elasticache.CreateCacheSecurityGroupInput
	}{arg1})
	fake.recordInvocation("CreateCacheSecurityGroupRequest", []interface{}{arg1})
	fake.createCacheSecurityGroupRequestMutex.Unlock()
	if fake.CreateCacheSecurityGroupRequestStub != nil {
		return fake.CreateCacheSecurityGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheSecurityGroupRequestReturns.result1, fake.createCacheSecurityGroupRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupRequestCallCount() int {
	fake.createCacheSecurityGroupRequestMutex.RLock()
	defer fake.createCacheSecurityGroupRequestMutex.RUnlock()
	return len(fake.createCacheSecurityGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupRequestArgsForCall(i int) *elasticache.CreateCacheSecurityGroupInput {
	fake.createCacheSecurityGroupRequestMutex.RLock()
	defer fake.createCacheSecurityGroupRequestMutex.RUnlock()
	return fake.createCacheSecurityGroupRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupRequestReturns(result1 *request.Request, result2 *elasticache.CreateCacheSecurityGroupOutput) {
	fake.CreateCacheSecurityGroupRequestStub = nil
	fake.createCacheSecurityGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSecurityGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateCacheSecurityGroupOutput) {
	fake.CreateCacheSecurityGroupRequestStub = nil
	if fake.createCacheSecurityGroupRequestReturnsOnCall == nil {
		fake.createCacheSecurityGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateCacheSecurityGroupOutput
		})
	}
	fake.createCacheSecurityGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroup(arg1 *elasticache.CreateCacheSubnetGroupInput) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	fake.createCacheSubnetGroupMutex.Lock()
	ret, specificReturn := fake.createCacheSubnetGroupReturnsOnCall[len(fake.createCacheSubnetGroupArgsForCall)]
	fake.createCacheSubnetGroupArgsForCall = append(fake.createCacheSubnetGroupArgsForCall, struct {
		arg1 *elasticache.CreateCacheSubnetGroupInput
	}{arg1})
	fake.recordInvocation("CreateCacheSubnetGroup", []interface{}{arg1})
	fake.createCacheSubnetGroupMutex.Unlock()
	if fake.CreateCacheSubnetGroupStub != nil {
		return fake.CreateCacheSubnetGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheSubnetGroupReturns.result1, fake.createCacheSubnetGroupReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupCallCount() int {
	fake.createCacheSubnetGroupMutex.RLock()
	defer fake.createCacheSubnetGroupMutex.RUnlock()
	return len(fake.createCacheSubnetGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupArgsForCall(i int) *elasticache.CreateCacheSubnetGroupInput {
	fake.createCacheSubnetGroupMutex.RLock()
	defer fake.createCacheSubnetGroupMutex.RUnlock()
	return fake.createCacheSubnetGroupArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupReturns(result1 *elasticache.CreateCacheSubnetGroupOutput, result2 error) {
	fake.CreateCacheSubnetGroupStub = nil
	fake.createCacheSubnetGroupReturns = struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupReturnsOnCall(i int, result1 *elasticache.CreateCacheSubnetGroupOutput, result2 error) {
	fake.CreateCacheSubnetGroupStub = nil
	if fake.createCacheSubnetGroupReturnsOnCall == nil {
		fake.createCacheSubnetGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheSubnetGroupOutput
			result2 error
		})
	}
	fake.createCacheSubnetGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupWithContext(arg1 aws.Context, arg2 *elasticache.CreateCacheSubnetGroupInput, arg3 ...request.Option) (*elasticache.CreateCacheSubnetGroupOutput, error) {
	fake.createCacheSubnetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createCacheSubnetGroupWithContextReturnsOnCall[len(fake.createCacheSubnetGroupWithContextArgsForCall)]
	fake.createCacheSubnetGroupWithContextArgsForCall = append(fake.createCacheSubnetGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.CreateCacheSubnetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateCacheSubnetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCacheSubnetGroupWithContextMutex.Unlock()
	if fake.CreateCacheSubnetGroupWithContextStub != nil {
		return fake.CreateCacheSubnetGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheSubnetGroupWithContextReturns.result1, fake.createCacheSubnetGroupWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupWithContextCallCount() int {
	fake.createCacheSubnetGroupWithContextMutex.RLock()
	defer fake.createCacheSubnetGroupWithContextMutex.RUnlock()
	return len(fake.createCacheSubnetGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.CreateCacheSubnetGroupInput, []request.Option) {
	fake.createCacheSubnetGroupWithContextMutex.RLock()
	defer fake.createCacheSubnetGroupWithContextMutex.RUnlock()
	return fake.createCacheSubnetGroupWithContextArgsForCall[i].arg1, fake.createCacheSubnetGroupWithContextArgsForCall[i].arg2, fake.createCacheSubnetGroupWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupWithContextReturns(result1 *elasticache.CreateCacheSubnetGroupOutput, result2 error) {
	fake.CreateCacheSubnetGroupWithContextStub = nil
	fake.createCacheSubnetGroupWithContextReturns = struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateCacheSubnetGroupOutput, result2 error) {
	fake.CreateCacheSubnetGroupWithContextStub = nil
	if fake.createCacheSubnetGroupWithContextReturnsOnCall == nil {
		fake.createCacheSubnetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheSubnetGroupOutput
			result2 error
		})
	}
	fake.createCacheSubnetGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupRequest(arg1 *elasticache.CreateCacheSubnetGroupInput) (*request.Request, *elasticache.CreateCacheSubnetGroupOutput) {
	fake.createCacheSubnetGroupRequestMutex.Lock()
	ret, specificReturn := fake.createCacheSubnetGroupRequestReturnsOnCall[len(fake.createCacheSubnetGroupRequestArgsForCall)]
	fake.createCacheSubnetGroupRequestArgsForCall = append(fake.createCacheSubnetGroupRequestArgsForCall, struct {
		arg1 *elasticache.CreateCacheSubnetGroupInput
	}{arg1})
	fake.recordInvocation("CreateCacheSubnetGroupRequest", []interface{}{arg1})
	fake.createCacheSubnetGroupRequestMutex.Unlock()
	if fake.CreateCacheSubnetGroupRequestStub != nil {
		return fake.CreateCacheSubnetGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheSubnetGroupRequestReturns.result1, fake.createCacheSubnetGroupRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupRequestCallCount() int {
	fake.createCacheSubnetGroupRequestMutex.RLock()
	defer fake.createCacheSubnetGroupRequestMutex.RUnlock()
	return len(fake.createCacheSubnetGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupRequestArgsForCall(i int) *elasticache.CreateCacheSubnetGroupInput {
	fake.createCacheSubnetGroupRequestMutex.RLock()
	defer fake.createCacheSubnetGroupRequestMutex.RUnlock()
	return fake.createCacheSubnetGroupRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupRequestReturns(result1 *request.Request, result2 *elasticache.CreateCacheSubnetGroupOutput) {
	fake.CreateCacheSubnetGroupRequestStub = nil
	fake.createCacheSubnetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateCacheSubnetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateCacheSubnetGroupOutput) {
	fake.CreateCacheSubnetGroupRequestStub = nil
	if fake.createCacheSubnetGroupRequestReturnsOnCall == nil {
		fake.createCacheSubnetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateCacheSubnetGroupOutput
		})
	}
	fake.createCacheSubnetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateCacheSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroup(arg1 *elasticache.CreateReplicationGroupInput) (*elasticache.CreateReplicationGroupOutput, error) {
	fake.createReplicationGroupMutex.Lock()
	ret, specificReturn := fake.createReplicationGroupReturnsOnCall[len(fake.createReplicationGroupArgsForCall)]
	fake.createReplicationGroupArgsForCall = append(fake.createReplicationGroupArgsForCall, struct {
		arg1 *elasticache.CreateReplicationGroupInput
	}{arg1})
	fake.recordInvocation("CreateReplicationGroup", []interface{}{arg1})
	fake.createReplicationGroupMutex.Unlock()
	if fake.CreateReplicationGroupStub != nil {
		return fake.CreateReplicationGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReplicationGroupReturns.result1, fake.createReplicationGroupReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupCallCount() int {
	fake.createReplicationGroupMutex.RLock()
	defer fake.createReplicationGroupMutex.RUnlock()
	return len(fake.createReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupArgsForCall(i int) *elasticache.CreateReplicationGroupInput {
	fake.createReplicationGroupMutex.RLock()
	defer fake.createReplicationGroupMutex.RUnlock()
	return fake.createReplicationGroupArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupReturns(result1 *elasticache.CreateReplicationGroupOutput, result2 error) {
	fake.CreateReplicationGroupStub = nil
	fake.createReplicationGroupReturns = struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupReturnsOnCall(i int, result1 *elasticache.CreateReplicationGroupOutput, result2 error) {
	fake.CreateReplicationGroupStub = nil
	if fake.createReplicationGroupReturnsOnCall == nil {
		fake.createReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateReplicationGroupOutput
			result2 error
		})
	}
	fake.createReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupWithContext(arg1 aws.Context, arg2 *elasticache.CreateReplicationGroupInput, arg3 ...request.Option) (*elasticache.CreateReplicationGroupOutput, error) {
	fake.createReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createReplicationGroupWithContextReturnsOnCall[len(fake.createReplicationGroupWithContextArgsForCall)]
	fake.createReplicationGroupWithContextArgsForCall = append(fake.createReplicationGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.CreateReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.createReplicationGroupWithContextMutex.Unlock()
	if fake.CreateReplicationGroupWithContextStub != nil {
		return fake.CreateReplicationGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReplicationGroupWithContextReturns.result1, fake.createReplicationGroupWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupWithContextCallCount() int {
	fake.createReplicationGroupWithContextMutex.RLock()
	defer fake.createReplicationGroupWithContextMutex.RUnlock()
	return len(fake.createReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.CreateReplicationGroupInput, []request.Option) {
	fake.createReplicationGroupWithContextMutex.RLock()
	defer fake.createReplicationGroupWithContextMutex.RUnlock()
	return fake.createReplicationGroupWithContextArgsForCall[i].arg1, fake.createReplicationGroupWithContextArgsForCall[i].arg2, fake.createReplicationGroupWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupWithContextReturns(result1 *elasticache.CreateReplicationGroupOutput, result2 error) {
	fake.CreateReplicationGroupWithContextStub = nil
	fake.createReplicationGroupWithContextReturns = struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateReplicationGroupOutput, result2 error) {
	fake.CreateReplicationGroupWithContextStub = nil
	if fake.createReplicationGroupWithContextReturnsOnCall == nil {
		fake.createReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateReplicationGroupOutput
			result2 error
		})
	}
	fake.createReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupRequest(arg1 *elasticache.CreateReplicationGroupInput) (*request.Request, *elasticache.CreateReplicationGroupOutput) {
	fake.createReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.createReplicationGroupRequestReturnsOnCall[len(fake.createReplicationGroupRequestArgsForCall)]
	fake.createReplicationGroupRequestArgsForCall = append(fake.createReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.CreateReplicationGroupInput
	}{arg1})
	fake.recordInvocation("CreateReplicationGroupRequest", []interface{}{arg1})
	fake.createReplicationGroupRequestMutex.Unlock()
	if fake.CreateReplicationGroupRequestStub != nil {
		return fake.CreateReplicationGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReplicationGroupRequestReturns.result1, fake.createReplicationGroupRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupRequestCallCount() int {
	fake.createReplicationGroupRequestMutex.RLock()
	defer fake.createReplicationGroupRequestMutex.RUnlock()
	return len(fake.createReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupRequestArgsForCall(i int) *elasticache.CreateReplicationGroupInput {
	fake.createReplicationGroupRequestMutex.RLock()
	defer fake.createReplicationGroupRequestMutex.RUnlock()
	return fake.createReplicationGroupRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.CreateReplicationGroupOutput) {
	fake.CreateReplicationGroupRequestStub = nil
	fake.createReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateReplicationGroupOutput) {
	fake.CreateReplicationGroupRequestStub = nil
	if fake.createReplicationGroupRequestReturnsOnCall == nil {
		fake.createReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateReplicationGroupOutput
		})
	}
	fake.createReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateSnapshot(arg1 *elasticache.CreateSnapshotInput) (*elasticache.CreateSnapshotOutput, error) {
	fake.createSnapshotMutex.Lock()
	ret, specificReturn := fake.createSnapshotReturnsOnCall[len(fake.createSnapshotArgsForCall)]
	fake.createSnapshotArgsForCall = append(fake.createSnapshotArgsForCall, struct {
		arg1 *elasticache.CreateSnapshotInput
	}{arg1})
	fake.recordInvocation("CreateSnapshot", []interface{}{arg1})
	fake.createSnapshotMutex.Unlock()
	if fake.CreateSnapshotStub != nil {
		return fake.CreateSnapshotStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createSnapshotReturns.result1, fake.createSnapshotReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateSnapshotCallCount() int {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	return len(fake.createSnapshotArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateSnapshotArgsForCall(i int) *elasticache.CreateSnapshotInput {
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	return fake.createSnapshotArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CreateSnapshotReturns(result1 *elasticache.CreateSnapshotOutput, result2 error) {
	fake.CreateSnapshotStub = nil
	fake.createSnapshotReturns = struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateSnapshotReturnsOnCall(i int, result1 *elasticache.CreateSnapshotOutput, result2 error) {
	fake.CreateSnapshotStub = nil
	if fake.createSnapshotReturnsOnCall == nil {
		fake.createSnapshotReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateSnapshotOutput
			result2 error
		})
	}
	fake.createSnapshotReturnsOnCall[i] = struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateSnapshotWithContext(arg1 aws.Context, arg2 *elasticache.CreateSnapshotInput, arg3 ...request.Option) (*elasticache.CreateSnapshotOutput, error) {
	fake.createSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.createSnapshotWithContextReturnsOnCall[len(fake.createSnapshotWithContextArgsForCall)]
	fake.createSnapshotWithContextArgsForCall = append(fake.createSnapshotWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.CreateSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.createSnapshotWithContextMutex.Unlock()
	if fake.CreateSnapshotWithContextStub != nil {
		return fake.CreateSnapshotWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createSnapshotWithContextReturns.result1, fake.createSnapshotWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateSnapshotWithContextCallCount() int {
	fake.createSnapshotWithContextMutex.RLock()
	defer fake.createSnapshotWithContextMutex.RUnlock()
	return len(fake.createSnapshotWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateSnapshotWithContextArgsForCall(i int) (aws.Context, *elasticache.CreateSnapshotInput, []request.Option) {
	fake.createSnapshotWithContextMutex.RLock()
	defer fake.createSnapshotWithContextMutex.RUnlock()
	return fake.createSnapshotWithContextArgsForCall[i].arg1, fake.createSnapshotWithContextArgsForCall[i].arg2, fake.createSnapshotWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) CreateSnapshotWithContextReturns(result1 *elasticache.CreateSnapshotOutput, result2 error) {
	fake.CreateSnapshotWithContextStub = nil
	fake.createSnapshotWithContextReturns = struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateSnapshotWithContextReturnsOnCall(i int, result1 *elasticache.CreateSnapshotOutput, result2 error) {
	fake.CreateSnapshotWithContextStub = nil
	if fake.createSnapshotWithContextReturnsOnCall == nil {
		fake.createSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateSnapshotOutput
			result2 error
		})
	}
	fake.createSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateSnapshotRequest(arg1 *elasticache.CreateSnapshotInput) (*request.Request, *elasticache.CreateSnapshotOutput) {
	fake.createSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.createSnapshotRequestReturnsOnCall[len(fake.createSnapshotRequestArgsForCall)]
	fake.createSnapshotRequestArgsForCall = append(fake.createSnapshotRequestArgsForCall, struct {
		arg1 *elasticache.CreateSnapshotInput
	}{arg1})
	fake.recordInvocation("CreateSnapshotRequest", []interface{}{arg1})
	fake.createSnapshotRequestMutex.Unlock()
	if fake.CreateSnapshotRequestStub != nil {
		return fake.CreateSnapshotRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createSnapshotRequestReturns.result1, fake.createSnapshotRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) CreateSnapshotRequestCallCount() int {
	fake.createSnapshotRequestMutex.RLock()
	defer fake.createSnapshotRequestMutex.RUnlock()
	return len(fake.createSnapshotRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) CreateSnapshotRequestArgsForCall(i int) *elasticache.CreateSnapshotInput {
	fake.createSnapshotRequestMutex.RLock()
	defer fake.createSnapshotRequestMutex.RUnlock()
	return fake.createSnapshotRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) CreateSnapshotRequestReturns(result1 *request.Request, result2 *elasticache.CreateSnapshotOutput) {
	fake.CreateSnapshotRequestStub = nil
	fake.createSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CreateSnapshotOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) CreateSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CreateSnapshotOutput) {
	fake.CreateSnapshotRequestStub = nil
	if fake.createSnapshotRequestReturnsOnCall == nil {
		fake.createSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CreateSnapshotOutput
		})
	}
	fake.createSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CreateSnapshotOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheCluster(arg1 *elasticache.DeleteCacheClusterInput) (*elasticache.DeleteCacheClusterOutput, error) {
	fake.deleteCacheClusterMutex.Lock()
	ret, specificReturn := fake.deleteCacheClusterReturnsOnCall[len(fake.deleteCacheClusterArgsForCall)]
	fake.deleteCacheClusterArgsForCall = append(fake.deleteCacheClusterArgsForCall, struct {
		arg1 *elasticache.DeleteCacheClusterInput
	}{arg1})
	fake.recordInvocation("DeleteCacheCluster", []interface{}{arg1})
	fake.deleteCacheClusterMutex.Unlock()
	if fake.DeleteCacheClusterStub != nil {
		return fake.DeleteCacheClusterStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheClusterReturns.result1, fake.deleteCacheClusterReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterCallCount() int {
	fake.deleteCacheClusterMutex.RLock()
	defer fake.deleteCacheClusterMutex.RUnlock()
	return len(fake.deleteCacheClusterArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterArgsForCall(i int) *elasticache.DeleteCacheClusterInput {
	fake.deleteCacheClusterMutex.RLock()
	defer fake.deleteCacheClusterMutex.RUnlock()
	return fake.deleteCacheClusterArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterReturns(result1 *elasticache.DeleteCacheClusterOutput, result2 error) {
	fake.DeleteCacheClusterStub = nil
	fake.deleteCacheClusterReturns = struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterReturnsOnCall(i int, result1 *elasticache.DeleteCacheClusterOutput, result2 error) {
	fake.DeleteCacheClusterStub = nil
	if fake.deleteCacheClusterReturnsOnCall == nil {
		fake.deleteCacheClusterReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheClusterOutput
			result2 error
		})
	}
	fake.deleteCacheClusterReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterWithContext(arg1 aws.Context, arg2 *elasticache.DeleteCacheClusterInput, arg3 ...request.Option) (*elasticache.DeleteCacheClusterOutput, error) {
	fake.deleteCacheClusterWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCacheClusterWithContextReturnsOnCall[len(fake.deleteCacheClusterWithContextArgsForCall)]
	fake.deleteCacheClusterWithContextArgsForCall = append(fake.deleteCacheClusterWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DeleteCacheClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteCacheClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCacheClusterWithContextMutex.Unlock()
	if fake.DeleteCacheClusterWithContextStub != nil {
		return fake.DeleteCacheClusterWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheClusterWithContextReturns.result1, fake.deleteCacheClusterWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterWithContextCallCount() int {
	fake.deleteCacheClusterWithContextMutex.RLock()
	defer fake.deleteCacheClusterWithContextMutex.RUnlock()
	return len(fake.deleteCacheClusterWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterWithContextArgsForCall(i int) (aws.Context, *elasticache.DeleteCacheClusterInput, []request.Option) {
	fake.deleteCacheClusterWithContextMutex.RLock()
	defer fake.deleteCacheClusterWithContextMutex.RUnlock()
	return fake.deleteCacheClusterWithContextArgsForCall[i].arg1, fake.deleteCacheClusterWithContextArgsForCall[i].arg2, fake.deleteCacheClusterWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterWithContextReturns(result1 *elasticache.DeleteCacheClusterOutput, result2 error) {
	fake.DeleteCacheClusterWithContextStub = nil
	fake.deleteCacheClusterWithContextReturns = struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterWithContextReturnsOnCall(i int, result1 *elasticache.DeleteCacheClusterOutput, result2 error) {
	fake.DeleteCacheClusterWithContextStub = nil
	if fake.deleteCacheClusterWithContextReturnsOnCall == nil {
		fake.deleteCacheClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheClusterOutput
			result2 error
		})
	}
	fake.deleteCacheClusterWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterRequest(arg1 *elasticache.DeleteCacheClusterInput) (*request.Request, *elasticache.DeleteCacheClusterOutput) {
	fake.deleteCacheClusterRequestMutex.Lock()
	ret, specificReturn := fake.deleteCacheClusterRequestReturnsOnCall[len(fake.deleteCacheClusterRequestArgsForCall)]
	fake.deleteCacheClusterRequestArgsForCall = append(fake.deleteCacheClusterRequestArgsForCall, struct {
		arg1 *elasticache.DeleteCacheClusterInput
	}{arg1})
	fake.recordInvocation("DeleteCacheClusterRequest", []interface{}{arg1})
	fake.deleteCacheClusterRequestMutex.Unlock()
	if fake.DeleteCacheClusterRequestStub != nil {
		return fake.DeleteCacheClusterRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheClusterRequestReturns.result1, fake.deleteCacheClusterRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterRequestCallCount() int {
	fake.deleteCacheClusterRequestMutex.RLock()
	defer fake.deleteCacheClusterRequestMutex.RUnlock()
	return len(fake.deleteCacheClusterRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterRequestArgsForCall(i int) *elasticache.DeleteCacheClusterInput {
	fake.deleteCacheClusterRequestMutex.RLock()
	defer fake.deleteCacheClusterRequestMutex.RUnlock()
	return fake.deleteCacheClusterRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterRequestReturns(result1 *request.Request, result2 *elasticache.DeleteCacheClusterOutput) {
	fake.DeleteCacheClusterRequestStub = nil
	fake.deleteCacheClusterRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteCacheClusterOutput) {
	fake.DeleteCacheClusterRequestStub = nil
	if fake.deleteCacheClusterRequestReturnsOnCall == nil {
		fake.deleteCacheClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteCacheClusterOutput
		})
	}
	fake.deleteCacheClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroup(arg1 *elasticache.DeleteCacheParameterGroupInput) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	fake.deleteCacheParameterGroupMutex.Lock()
	ret, specificReturn := fake.deleteCacheParameterGroupReturnsOnCall[len(fake.deleteCacheParameterGroupArgsForCall)]
	fake.deleteCacheParameterGroupArgsForCall = append(fake.deleteCacheParameterGroupArgsForCall, struct {
		arg1 *elasticache.DeleteCacheParameterGroupInput
	}{arg1})
	fake.recordInvocation("DeleteCacheParameterGroup", []interface{}{arg1})
	fake.deleteCacheParameterGroupMutex.Unlock()
	if fake.DeleteCacheParameterGroupStub != nil {
		return fake.DeleteCacheParameterGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheParameterGroupReturns.result1, fake.deleteCacheParameterGroupReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupCallCount() int {
	fake.deleteCacheParameterGroupMutex.RLock()
	defer fake.deleteCacheParameterGroupMutex.RUnlock()
	return len(fake.deleteCacheParameterGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupArgsForCall(i int) *elasticache.DeleteCacheParameterGroupInput {
	fake.deleteCacheParameterGroupMutex.RLock()
	defer fake.deleteCacheParameterGroupMutex.RUnlock()
	return fake.deleteCacheParameterGroupArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupReturns(result1 *elasticache.DeleteCacheParameterGroupOutput, result2 error) {
	fake.DeleteCacheParameterGroupStub = nil
	fake.deleteCacheParameterGroupReturns = struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupReturnsOnCall(i int, result1 *elasticache.DeleteCacheParameterGroupOutput, result2 error) {
	fake.DeleteCacheParameterGroupStub = nil
	if fake.deleteCacheParameterGroupReturnsOnCall == nil {
		fake.deleteCacheParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheParameterGroupOutput
			result2 error
		})
	}
	fake.deleteCacheParameterGroupReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupWithContext(arg1 aws.Context, arg2 *elasticache.DeleteCacheParameterGroupInput, arg3 ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	fake.deleteCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCacheParameterGroupWithContextReturnsOnCall[len(fake.deleteCacheParameterGroupWithContextArgsForCall)]
	fake.deleteCacheParameterGroupWithContextArgsForCall = append(fake.deleteCacheParameterGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DeleteCacheParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteCacheParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCacheParameterGroupWithContextMutex.Unlock()
	if fake.DeleteCacheParameterGroupWithContextStub != nil {
		return fake.DeleteCacheParameterGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheParameterGroupWithContextReturns.result1, fake.deleteCacheParameterGroupWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupWithContextCallCount() int {
	fake.deleteCacheParameterGroupWithContextMutex.RLock()
	defer fake.deleteCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.deleteCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.DeleteCacheParameterGroupInput, []request.Option) {
	fake.deleteCacheParameterGroupWithContextMutex.RLock()
	defer fake.deleteCacheParameterGroupWithContextMutex.RUnlock()
	return fake.deleteCacheParameterGroupWithContextArgsForCall[i].arg1, fake.deleteCacheParameterGroupWithContextArgsForCall[i].arg2, fake.deleteCacheParameterGroupWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupWithContextReturns(result1 *elasticache.DeleteCacheParameterGroupOutput, result2 error) {
	fake.DeleteCacheParameterGroupWithContextStub = nil
	fake.deleteCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteCacheParameterGroupOutput, result2 error) {
	fake.DeleteCacheParameterGroupWithContextStub = nil
	if fake.deleteCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.deleteCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheParameterGroupOutput
			result2 error
		})
	}
	fake.deleteCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupRequest(arg1 *elasticache.DeleteCacheParameterGroupInput) (*request.Request, *elasticache.DeleteCacheParameterGroupOutput) {
	fake.deleteCacheParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteCacheParameterGroupRequestReturnsOnCall[len(fake.deleteCacheParameterGroupRequestArgsForCall)]
	fake.deleteCacheParameterGroupRequestArgsForCall = append(fake.deleteCacheParameterGroupRequestArgsForCall, struct {
		arg1 *elasticache.DeleteCacheParameterGroupInput
	}{arg1})
	fake.recordInvocation("DeleteCacheParameterGroupRequest", []interface{}{arg1})
	fake.deleteCacheParameterGroupRequestMutex.Unlock()
	if fake.DeleteCacheParameterGroupRequestStub != nil {
		return fake.DeleteCacheParameterGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheParameterGroupRequestReturns.result1, fake.deleteCacheParameterGroupRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupRequestCallCount() int {
	fake.deleteCacheParameterGroupRequestMutex.RLock()
	defer fake.deleteCacheParameterGroupRequestMutex.RUnlock()
	return len(fake.deleteCacheParameterGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupRequestArgsForCall(i int) *elasticache.DeleteCacheParameterGroupInput {
	fake.deleteCacheParameterGroupRequestMutex.RLock()
	defer fake.deleteCacheParameterGroupRequestMutex.RUnlock()
	return fake.deleteCacheParameterGroupRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupRequestReturns(result1 *request.Request, result2 *elasticache.DeleteCacheParameterGroupOutput) {
	fake.DeleteCacheParameterGroupRequestStub = nil
	fake.deleteCacheParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteCacheParameterGroupOutput) {
	fake.DeleteCacheParameterGroupRequestStub = nil
	if fake.deleteCacheParameterGroupRequestReturnsOnCall == nil {
		fake.deleteCacheParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteCacheParameterGroupOutput
		})
	}
	fake.deleteCacheParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheParameterGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroup(arg1 *elasticache.DeleteCacheSecurityGroupInput) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	fake.deleteCacheSecurityGroupMutex.Lock()
	ret, specificReturn := fake.deleteCacheSecurityGroupReturnsOnCall[len(fake.deleteCacheSecurityGroupArgsForCall)]
	fake.deleteCacheSecurityGroupArgsForCall = append(fake.deleteCacheSecurityGroupArgsForCall, struct {
		arg1 *elasticache.DeleteCacheSecurityGroupInput
	}{arg1})
	fake.recordInvocation("DeleteCacheSecurityGroup", []interface{}{arg1})
	fake.deleteCacheSecurityGroupMutex.Unlock()
	if fake.DeleteCacheSecurityGroupStub != nil {
		return fake.DeleteCacheSecurityGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheSecurityGroupReturns.result1, fake.deleteCacheSecurityGroupReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupCallCount() int {
	fake.deleteCacheSecurityGroupMutex.RLock()
	defer fake.deleteCacheSecurityGroupMutex.RUnlock()
	return len(fake.deleteCacheSecurityGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupArgsForCall(i int) *elasticache.DeleteCacheSecurityGroupInput {
	fake.deleteCacheSecurityGroupMutex.RLock()
	defer fake.deleteCacheSecurityGroupMutex.RUnlock()
	return fake.deleteCacheSecurityGroupArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupReturns(result1 *elasticache.DeleteCacheSecurityGroupOutput, result2 error) {
	fake.DeleteCacheSecurityGroupStub = nil
	fake.deleteCacheSecurityGroupReturns = struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupReturnsOnCall(i int, result1 *elasticache.DeleteCacheSecurityGroupOutput, result2 error) {
	fake.DeleteCacheSecurityGroupStub = nil
	if fake.deleteCacheSecurityGroupReturnsOnCall == nil {
		fake.deleteCacheSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheSecurityGroupOutput
			result2 error
		})
	}
	fake.deleteCacheSecurityGroupReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupWithContext(arg1 aws.Context, arg2 *elasticache.DeleteCacheSecurityGroupInput, arg3 ...request.Option) (*elasticache.DeleteCacheSecurityGroupOutput, error) {
	fake.deleteCacheSecurityGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCacheSecurityGroupWithContextReturnsOnCall[len(fake.deleteCacheSecurityGroupWithContextArgsForCall)]
	fake.deleteCacheSecurityGroupWithContextArgsForCall = append(fake.deleteCacheSecurityGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DeleteCacheSecurityGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteCacheSecurityGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCacheSecurityGroupWithContextMutex.Unlock()
	if fake.DeleteCacheSecurityGroupWithContextStub != nil {
		return fake.DeleteCacheSecurityGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheSecurityGroupWithContextReturns.result1, fake.deleteCacheSecurityGroupWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupWithContextCallCount() int {
	fake.deleteCacheSecurityGroupWithContextMutex.RLock()
	defer fake.deleteCacheSecurityGroupWithContextMutex.RUnlock()
	return len(fake.deleteCacheSecurityGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.DeleteCacheSecurityGroupInput, []request.Option) {
	fake.deleteCacheSecurityGroupWithContextMutex.RLock()
	defer fake.deleteCacheSecurityGroupWithContextMutex.RUnlock()
	return fake.deleteCacheSecurityGroupWithContextArgsForCall[i].arg1, fake.deleteCacheSecurityGroupWithContextArgsForCall[i].arg2, fake.deleteCacheSecurityGroupWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupWithContextReturns(result1 *elasticache.DeleteCacheSecurityGroupOutput, result2 error) {
	fake.DeleteCacheSecurityGroupWithContextStub = nil
	fake.deleteCacheSecurityGroupWithContextReturns = struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteCacheSecurityGroupOutput, result2 error) {
	fake.DeleteCacheSecurityGroupWithContextStub = nil
	if fake.deleteCacheSecurityGroupWithContextReturnsOnCall == nil {
		fake.deleteCacheSecurityGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheSecurityGroupOutput
			result2 error
		})
	}
	fake.deleteCacheSecurityGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheSecurityGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupRequest(arg1 *elasticache.DeleteCacheSecurityGroupInput) (*request.Request, *elasticache.DeleteCacheSecurityGroupOutput) {
	fake.deleteCacheSecurityGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteCacheSecurityGroupRequestReturnsOnCall[len(fake.deleteCacheSecurityGroupRequestArgsForCall)]
	fake.deleteCacheSecurityGroupRequestArgsForCall = append(fake.deleteCacheSecurityGroupRequestArgsForCall, struct {
		arg1 *elasticache.DeleteCacheSecurityGroupInput
	}{arg1})
	fake.recordInvocation("DeleteCacheSecurityGroupRequest", []interface{}{arg1})
	fake.deleteCacheSecurityGroupRequestMutex.Unlock()
	if fake.DeleteCacheSecurityGroupRequestStub != nil {
		return fake.DeleteCacheSecurityGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheSecurityGroupRequestReturns.result1, fake.deleteCacheSecurityGroupRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupRequestCallCount() int {
	fake.deleteCacheSecurityGroupRequestMutex.RLock()
	defer fake.deleteCacheSecurityGroupRequestMutex.RUnlock()
	return len(fake.deleteCacheSecurityGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupRequestArgsForCall(i int) *elasticache.DeleteCacheSecurityGroupInput {
	fake.deleteCacheSecurityGroupRequestMutex.RLock()
	defer fake.deleteCacheSecurityGroupRequestMutex.RUnlock()
	return fake.deleteCacheSecurityGroupRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupRequestReturns(result1 *request.Request, result2 *elasticache.DeleteCacheSecurityGroupOutput) {
	fake.DeleteCacheSecurityGroupRequestStub = nil
	fake.deleteCacheSecurityGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSecurityGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteCacheSecurityGroupOutput) {
	fake.DeleteCacheSecurityGroupRequestStub = nil
	if fake.deleteCacheSecurityGroupRequestReturnsOnCall == nil {
		fake.deleteCacheSecurityGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteCacheSecurityGroupOutput
		})
	}
	fake.deleteCacheSecurityGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSecurityGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroup(arg1 *elasticache.DeleteCacheSubnetGroupInput) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	fake.deleteCacheSubnetGroupMutex.Lock()
	ret, specificReturn := fake.deleteCacheSubnetGroupReturnsOnCall[len(fake.deleteCacheSubnetGroupArgsForCall)]
	fake.deleteCacheSubnetGroupArgsForCall = append(fake.deleteCacheSubnetGroupArgsForCall, struct {
		arg1 *elasticache.DeleteCacheSubnetGroupInput
	}{arg1})
	fake.recordInvocation("DeleteCacheSubnetGroup", []interface{}{arg1})
	fake.deleteCacheSubnetGroupMutex.Unlock()
	if fake.DeleteCacheSubnetGroupStub != nil {
		return fake.DeleteCacheSubnetGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheSubnetGroupReturns.result1, fake.deleteCacheSubnetGroupReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupCallCount() int {
	fake.deleteCacheSubnetGroupMutex.RLock()
	defer fake.deleteCacheSubnetGroupMutex.RUnlock()
	return len(fake.deleteCacheSubnetGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupArgsForCall(i int) *elasticache.DeleteCacheSubnetGroupInput {
	fake.deleteCacheSubnetGroupMutex.RLock()
	defer fake.deleteCacheSubnetGroupMutex.RUnlock()
	return fake.deleteCacheSubnetGroupArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupReturns(result1 *elasticache.DeleteCacheSubnetGroupOutput, result2 error) {
	fake.DeleteCacheSubnetGroupStub = nil
	fake.deleteCacheSubnetGroupReturns = struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupReturnsOnCall(i int, result1 *elasticache.DeleteCacheSubnetGroupOutput, result2 error) {
	fake.DeleteCacheSubnetGroupStub = nil
	if fake.deleteCacheSubnetGroupReturnsOnCall == nil {
		fake.deleteCacheSubnetGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheSubnetGroupOutput
			result2 error
		})
	}
	fake.deleteCacheSubnetGroupReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupWithContext(arg1 aws.Context, arg2 *elasticache.DeleteCacheSubnetGroupInput, arg3 ...request.Option) (*elasticache.DeleteCacheSubnetGroupOutput, error) {
	fake.deleteCacheSubnetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCacheSubnetGroupWithContextReturnsOnCall[len(fake.deleteCacheSubnetGroupWithContextArgsForCall)]
	fake.deleteCacheSubnetGroupWithContextArgsForCall = append(fake.deleteCacheSubnetGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DeleteCacheSubnetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteCacheSubnetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCacheSubnetGroupWithContextMutex.Unlock()
	if fake.DeleteCacheSubnetGroupWithContextStub != nil {
		return fake.DeleteCacheSubnetGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheSubnetGroupWithContextReturns.result1, fake.deleteCacheSubnetGroupWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupWithContextCallCount() int {
	fake.deleteCacheSubnetGroupWithContextMutex.RLock()
	defer fake.deleteCacheSubnetGroupWithContextMutex.RUnlock()
	return len(fake.deleteCacheSubnetGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.DeleteCacheSubnetGroupInput, []request.Option) {
	fake.deleteCacheSubnetGroupWithContextMutex.RLock()
	defer fake.deleteCacheSubnetGroupWithContextMutex.RUnlock()
	return fake.deleteCacheSubnetGroupWithContextArgsForCall[i].arg1, fake.deleteCacheSubnetGroupWithContextArgsForCall[i].arg2, fake.deleteCacheSubnetGroupWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupWithContextReturns(result1 *elasticache.DeleteCacheSubnetGroupOutput, result2 error) {
	fake.DeleteCacheSubnetGroupWithContextStub = nil
	fake.deleteCacheSubnetGroupWithContextReturns = struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteCacheSubnetGroupOutput, result2 error) {
	fake.DeleteCacheSubnetGroupWithContextStub = nil
	if fake.deleteCacheSubnetGroupWithContextReturnsOnCall == nil {
		fake.deleteCacheSubnetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheSubnetGroupOutput
			result2 error
		})
	}
	fake.deleteCacheSubnetGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupRequest(arg1 *elasticache.DeleteCacheSubnetGroupInput) (*request.Request, *elasticache.DeleteCacheSubnetGroupOutput) {
	fake.deleteCacheSubnetGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteCacheSubnetGroupRequestReturnsOnCall[len(fake.deleteCacheSubnetGroupRequestArgsForCall)]
	fake.deleteCacheSubnetGroupRequestArgsForCall = append(fake.deleteCacheSubnetGroupRequestArgsForCall, struct {
		arg1 *elasticache.DeleteCacheSubnetGroupInput
	}{arg1})
	fake.recordInvocation("DeleteCacheSubnetGroupRequest", []interface{}{arg1})
	fake.deleteCacheSubnetGroupRequestMutex.Unlock()
	if fake.DeleteCacheSubnetGroupRequestStub != nil {
		return fake.DeleteCacheSubnetGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheSubnetGroupRequestReturns.result1, fake.deleteCacheSubnetGroupRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupRequestCallCount() int {
	fake.deleteCacheSubnetGroupRequestMutex.RLock()
	defer fake.deleteCacheSubnetGroupRequestMutex.RUnlock()
	return len(fake.deleteCacheSubnetGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupRequestArgsForCall(i int) *elasticache.DeleteCacheSubnetGroupInput {
	fake.deleteCacheSubnetGroupRequestMutex.RLock()
	defer fake.deleteCacheSubnetGroupRequestMutex.RUnlock()
	return fake.deleteCacheSubnetGroupRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupRequestReturns(result1 *request.Request, result2 *elasticache.DeleteCacheSubnetGroupOutput) {
	fake.DeleteCacheSubnetGroupRequestStub = nil
	fake.deleteCacheSubnetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteCacheSubnetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteCacheSubnetGroupOutput) {
	fake.DeleteCacheSubnetGroupRequestStub = nil
	if fake.deleteCacheSubnetGroupRequestReturnsOnCall == nil {
		fake.deleteCacheSubnetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteCacheSubnetGroupOutput
		})
	}
	fake.deleteCacheSubnetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteCacheSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroup(arg1 *elasticache.DeleteReplicationGroupInput) (*elasticache.DeleteReplicationGroupOutput, error) {
	fake.deleteReplicationGroupMutex.Lock()
	ret, specificReturn := fake.deleteReplicationGroupReturnsOnCall[len(fake.deleteReplicationGroupArgsForCall)]
	fake.deleteReplicationGroupArgsForCall = append(fake.deleteReplicationGroupArgsForCall, struct {
		arg1 *elasticache.DeleteReplicationGroupInput
	}{arg1})
	fake.recordInvocation("DeleteReplicationGroup", []interface{}{arg1})
	fake.deleteReplicationGroupMutex.Unlock()
	if fake.DeleteReplicationGroupStub != nil {
		return fake.DeleteReplicationGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteReplicationGroupReturns.result1, fake.deleteReplicationGroupReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupCallCount() int {
	fake.deleteReplicationGroupMutex.RLock()
	defer fake.deleteReplicationGroupMutex.RUnlock()
	return len(fake.deleteReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupArgsForCall(i int) *elasticache.DeleteReplicationGroupInput {
	fake.deleteReplicationGroupMutex.RLock()
	defer fake.deleteReplicationGroupMutex.RUnlock()
	return fake.deleteReplicationGroupArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupReturns(result1 *elasticache.DeleteReplicationGroupOutput, result2 error) {
	fake.DeleteReplicationGroupStub = nil
	fake.deleteReplicationGroupReturns = struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupReturnsOnCall(i int, result1 *elasticache.DeleteReplicationGroupOutput, result2 error) {
	fake.DeleteReplicationGroupStub = nil
	if fake.deleteReplicationGroupReturnsOnCall == nil {
		fake.deleteReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteReplicationGroupOutput
			result2 error
		})
	}
	fake.deleteReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupWithContext(arg1 aws.Context, arg2 *elasticache.DeleteReplicationGroupInput, arg3 ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error) {
	fake.deleteReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteReplicationGroupWithContextReturnsOnCall[len(fake.deleteReplicationGroupWithContextArgsForCall)]
	fake.deleteReplicationGroupWithContextArgsForCall = append(fake.deleteReplicationGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DeleteReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteReplicationGroupWithContextMutex.Unlock()
	if fake.DeleteReplicationGroupWithContextStub != nil {
		return fake.DeleteReplicationGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteReplicationGroupWithContextReturns.result1, fake.deleteReplicationGroupWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupWithContextCallCount() int {
	fake.deleteReplicationGroupWithContextMutex.RLock()
	defer fake.deleteReplicationGroupWithContextMutex.RUnlock()
	return len(fake.deleteReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.DeleteReplicationGroupInput, []request.Option) {
	fake.deleteReplicationGroupWithContextMutex.RLock()
	defer fake.deleteReplicationGroupWithContextMutex.RUnlock()
	return fake.deleteReplicationGroupWithContextArgsForCall[i].arg1, fake.deleteReplicationGroupWithContextArgsForCall[i].arg2, fake.deleteReplicationGroupWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupWithContextReturns(result1 *elasticache.DeleteReplicationGroupOutput, result2 error) {
	fake.DeleteReplicationGroupWithContextStub = nil
	fake.deleteReplicationGroupWithContextReturns = struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteReplicationGroupOutput, result2 error) {
	fake.DeleteReplicationGroupWithContextStub = nil
	if fake.deleteReplicationGroupWithContextReturnsOnCall == nil {
		fake.deleteReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteReplicationGroupOutput
			result2 error
		})
	}
	fake.deleteReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupRequest(arg1 *elasticache.DeleteReplicationGroupInput) (*request.Request, *elasticache.DeleteReplicationGroupOutput) {
	fake.deleteReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.deleteReplicationGroupRequestReturnsOnCall[len(fake.deleteReplicationGroupRequestArgsForCall)]
	fake.deleteReplicationGroupRequestArgsForCall = append(fake.deleteReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.DeleteReplicationGroupInput
	}{arg1})
	fake.recordInvocation("DeleteReplicationGroupRequest", []interface{}{arg1})
	fake.deleteReplicationGroupRequestMutex.Unlock()
	if fake.DeleteReplicationGroupRequestStub != nil {
		return fake.DeleteReplicationGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteReplicationGroupRequestReturns.result1, fake.deleteReplicationGroupRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupRequestCallCount() int {
	fake.deleteReplicationGroupRequestMutex.RLock()
	defer fake.deleteReplicationGroupRequestMutex.RUnlock()
	return len(fake.deleteReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupRequestArgsForCall(i int) *elasticache.DeleteReplicationGroupInput {
	fake.deleteReplicationGroupRequestMutex.RLock()
	defer fake.deleteReplicationGroupRequestMutex.RUnlock()
	return fake.deleteReplicationGroupRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.DeleteReplicationGroupOutput) {
	fake.DeleteReplicationGroupRequestStub = nil
	fake.deleteReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteReplicationGroupOutput) {
	fake.DeleteReplicationGroupRequestStub = nil
	if fake.deleteReplicationGroupRequestReturnsOnCall == nil {
		fake.deleteReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteReplicationGroupOutput
		})
	}
	fake.deleteReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteSnapshot(arg1 *elasticache.DeleteSnapshotInput) (*elasticache.DeleteSnapshotOutput, error) {
	fake.deleteSnapshotMutex.Lock()
	ret, specificReturn := fake.deleteSnapshotReturnsOnCall[len(fake.deleteSnapshotArgsForCall)]
	fake.deleteSnapshotArgsForCall = append(fake.deleteSnapshotArgsForCall, struct {
		arg1 *elasticache.DeleteSnapshotInput
	}{arg1})
	fake.recordInvocation("DeleteSnapshot", []interface{}{arg1})
	fake.deleteSnapshotMutex.Unlock()
	if fake.DeleteSnapshotStub != nil {
		return fake.DeleteSnapshotStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteSnapshotReturns.result1, fake.deleteSnapshotReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotCallCount() int {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	return len(fake.deleteSnapshotArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotArgsForCall(i int) *elasticache.DeleteSnapshotInput {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	return fake.deleteSnapshotArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotReturns(result1 *elasticache.DeleteSnapshotOutput, result2 error) {
	fake.DeleteSnapshotStub = nil
	fake.deleteSnapshotReturns = struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotReturnsOnCall(i int, result1 *elasticache.DeleteSnapshotOutput, result2 error) {
	fake.DeleteSnapshotStub = nil
	if fake.deleteSnapshotReturnsOnCall == nil {
		fake.deleteSnapshotReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteSnapshotOutput
			result2 error
		})
	}
	fake.deleteSnapshotReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotWithContext(arg1 aws.Context, arg2 *elasticache.DeleteSnapshotInput, arg3 ...request.Option) (*elasticache.DeleteSnapshotOutput, error) {
	fake.deleteSnapshotWithContextMutex.Lock()
	ret, specificReturn := fake.deleteSnapshotWithContextReturnsOnCall[len(fake.deleteSnapshotWithContextArgsForCall)]
	fake.deleteSnapshotWithContextArgsForCall = append(fake.deleteSnapshotWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DeleteSnapshotInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteSnapshotWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteSnapshotWithContextMutex.Unlock()
	if fake.DeleteSnapshotWithContextStub != nil {
		return fake.DeleteSnapshotWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteSnapshotWithContextReturns.result1, fake.deleteSnapshotWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotWithContextCallCount() int {
	fake.deleteSnapshotWithContextMutex.RLock()
	defer fake.deleteSnapshotWithContextMutex.RUnlock()
	return len(fake.deleteSnapshotWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotWithContextArgsForCall(i int) (aws.Context, *elasticache.DeleteSnapshotInput, []request.Option) {
	fake.deleteSnapshotWithContextMutex.RLock()
	defer fake.deleteSnapshotWithContextMutex.RUnlock()
	return fake.deleteSnapshotWithContextArgsForCall[i].arg1, fake.deleteSnapshotWithContextArgsForCall[i].arg2, fake.deleteSnapshotWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotWithContextReturns(result1 *elasticache.DeleteSnapshotOutput, result2 error) {
	fake.DeleteSnapshotWithContextStub = nil
	fake.deleteSnapshotWithContextReturns = struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotWithContextReturnsOnCall(i int, result1 *elasticache.DeleteSnapshotOutput, result2 error) {
	fake.DeleteSnapshotWithContextStub = nil
	if fake.deleteSnapshotWithContextReturnsOnCall == nil {
		fake.deleteSnapshotWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteSnapshotOutput
			result2 error
		})
	}
	fake.deleteSnapshotWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteSnapshotOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotRequest(arg1 *elasticache.DeleteSnapshotInput) (*request.Request, *elasticache.DeleteSnapshotOutput) {
	fake.deleteSnapshotRequestMutex.Lock()
	ret, specificReturn := fake.deleteSnapshotRequestReturnsOnCall[len(fake.deleteSnapshotRequestArgsForCall)]
	fake.deleteSnapshotRequestArgsForCall = append(fake.deleteSnapshotRequestArgsForCall, struct {
		arg1 *elasticache.DeleteSnapshotInput
	}{arg1})
	fake.recordInvocation("DeleteSnapshotRequest", []interface{}{arg1})
	fake.deleteSnapshotRequestMutex.Unlock()
	if fake.DeleteSnapshotRequestStub != nil {
		return fake.DeleteSnapshotRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteSnapshotRequestReturns.result1, fake.deleteSnapshotRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotRequestCallCount() int {
	fake.deleteSnapshotRequestMutex.RLock()
	defer fake.deleteSnapshotRequestMutex.RUnlock()
	return len(fake.deleteSnapshotRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotRequestArgsForCall(i int) *elasticache.DeleteSnapshotInput {
	fake.deleteSnapshotRequestMutex.RLock()
	defer fake.deleteSnapshotRequestMutex.RUnlock()
	return fake.deleteSnapshotRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotRequestReturns(result1 *request.Request, result2 *elasticache.DeleteSnapshotOutput) {
	fake.DeleteSnapshotRequestStub = nil
	fake.deleteSnapshotRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DeleteSnapshotOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DeleteSnapshotRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DeleteSnapshotOutput) {
	fake.DeleteSnapshotRequestStub = nil
	if fake.deleteSnapshotRequestReturnsOnCall == nil {
		fake.deleteSnapshotRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DeleteSnapshotOutput
		})
	}
	fake.deleteSnapshotRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DeleteSnapshotOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClusters(arg1 *elasticache.DescribeCacheClustersInput) (*elasticache.DescribeCacheClustersOutput, error) {
	fake.describeCacheClustersMutex.Lock()
	ret, specificReturn := fake.describeCacheClustersReturnsOnCall[len(fake.describeCacheClustersArgsForCall)]
	fake.describeCacheClustersArgsForCall = append(fake.describeCacheClustersArgsForCall, struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}{arg1})
	fake.recordInvocation("DescribeCacheClusters", []interface{}{arg1})
	fake.describeCacheClustersMutex.Unlock()
	if fake.DescribeCacheClustersStub != nil {
		return fake.DescribeCacheClustersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheClustersReturns.result1, fake.describeCacheClustersReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersCallCount() int {
	fake.describeCacheClustersMutex.RLock()
	defer fake.describeCacheClustersMutex.RUnlock()
	return len(fake.describeCacheClustersArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersArgsForCall(i int) *elasticache.DescribeCacheClustersInput {
	fake.describeCacheClustersMutex.RLock()
	defer fake.describeCacheClustersMutex.RUnlock()
	return fake.describeCacheClustersArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersReturns(result1 *elasticache.DescribeCacheClustersOutput, result2 error) {
	fake.DescribeCacheClustersStub = nil
	fake.describeCacheClustersReturns = struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersReturnsOnCall(i int, result1 *elasticache.DescribeCacheClustersOutput, result2 error) {
	fake.DescribeCacheClustersStub = nil
	if fake.describeCacheClustersReturnsOnCall == nil {
		fake.describeCacheClustersReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheClustersOutput
			result2 error
		})
	}
	fake.describeCacheClustersReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheClustersInput, arg3 ...request.Option) (*elasticache.DescribeCacheClustersOutput, error) {
	fake.describeCacheClustersWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheClustersWithContextReturnsOnCall[len(fake.describeCacheClustersWithContextArgsForCall)]
	fake.describeCacheClustersWithContextArgsForCall = append(fake.describeCacheClustersWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeCacheClustersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheClustersWithContextMutex.Unlock()
	if fake.DescribeCacheClustersWithContextStub != nil {
		return fake.DescribeCacheClustersWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheClustersWithContextReturns.result1, fake.describeCacheClustersWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersWithContextCallCount() int {
	fake.describeCacheClustersWithContextMutex.RLock()
	defer fake.describeCacheClustersWithContextMutex.RUnlock()
	return len(fake.describeCacheClustersWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheClustersInput, []request.Option) {
	fake.describeCacheClustersWithContextMutex.RLock()
	defer fake.describeCacheClustersWithContextMutex.RUnlock()
	return fake.describeCacheClustersWithContextArgsForCall[i].arg1, fake.describeCacheClustersWithContextArgsForCall[i].arg2, fake.describeCacheClustersWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersWithContextReturns(result1 *elasticache.DescribeCacheClustersOutput, result2 error) {
	fake.DescribeCacheClustersWithContextStub = nil
	fake.describeCacheClustersWithContextReturns = struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheClustersOutput, result2 error) {
	fake.DescribeCacheClustersWithContextStub = nil
	if fake.describeCacheClustersWithContextReturnsOnCall == nil {
		fake.describeCacheClustersWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheClustersOutput
			result2 error
		})
	}
	fake.describeCacheClustersWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersRequest(arg1 *elasticache.DescribeCacheClustersInput) (*request.Request, *elasticache.DescribeCacheClustersOutput) {
	fake.describeCacheClustersRequestMutex.Lock()
	ret, specificReturn := fake.describeCacheClustersRequestReturnsOnCall[len(fake.describeCacheClustersRequestArgsForCall)]
	fake.describeCacheClustersRequestArgsForCall = append(fake.describeCacheClustersRequestArgsForCall, struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}{arg1})
	fake.recordInvocation("DescribeCacheClustersRequest", []interface{}{arg1})
	fake.describeCacheClustersRequestMutex.Unlock()
	if fake.DescribeCacheClustersRequestStub != nil {
		return fake.DescribeCacheClustersRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheClustersRequestReturns.result1, fake.describeCacheClustersRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersRequestCallCount() int {
	fake.describeCacheClustersRequestMutex.RLock()
	defer fake.describeCacheClustersRequestMutex.RUnlock()
	return len(fake.describeCacheClustersRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersRequestArgsForCall(i int) *elasticache.DescribeCacheClustersInput {
	fake.describeCacheClustersRequestMutex.RLock()
	defer fake.describeCacheClustersRequestMutex.RUnlock()
	return fake.describeCacheClustersRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersRequestReturns(result1 *request.Request, result2 *elasticache.DescribeCacheClustersOutput) {
	fake.DescribeCacheClustersRequestStub = nil
	fake.describeCacheClustersRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheClustersOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeCacheClustersOutput) {
	fake.DescribeCacheClustersRequestStub = nil
	if fake.describeCacheClustersRequestReturnsOnCall == nil {
		fake.describeCacheClustersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeCacheClustersOutput
		})
	}
	fake.describeCacheClustersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheClustersOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPages(arg1 *elasticache.DescribeCacheClustersInput, arg2 func(*elasticache.DescribeCacheClustersOutput, bool) bool) error {
	fake.describeCacheClustersPagesMutex.Lock()
	ret, specificReturn := fake.describeCacheClustersPagesReturnsOnCall[len(fake.describeCacheClustersPagesArgsForCall)]
	fake.describeCacheClustersPagesArgsForCall = append(fake.describeCacheClustersPagesArgsForCall, struct {
		arg1 *elasticache.DescribeCacheClustersInput
		arg2 func(*elasticache.DescribeCacheClustersOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeCacheClustersPages", []interface{}{arg1, arg2})
	fake.describeCacheClustersPagesMutex.Unlock()
	if fake.DescribeCacheClustersPagesStub != nil {
		return fake.DescribeCacheClustersPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeCacheClustersPagesReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesCallCount() int {
	fake.describeCacheClustersPagesMutex.RLock()
	defer fake.describeCacheClustersPagesMutex.RUnlock()
	return len(fake.describeCacheClustersPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesArgsForCall(i int) (*elasticache.DescribeCacheClustersInput, func(*elasticache.DescribeCacheClustersOutput, bool) bool) {
	fake.describeCacheClustersPagesMutex.RLock()
	defer fake.describeCacheClustersPagesMutex.RUnlock()
	return fake.describeCacheClustersPagesArgsForCall[i].arg1, fake.describeCacheClustersPagesArgsForCall[i].arg2
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesReturns(result1 error) {
	fake.DescribeCacheClustersPagesStub = nil
	fake.describeCacheClustersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeCacheClustersPagesStub = nil
	if fake.describeCacheClustersPagesReturnsOnCall == nil {
		fake.describeCacheClustersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheClustersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheClustersInput, arg3 func(*elasticache.DescribeCacheClustersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCacheClustersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheClustersPagesWithContextReturnsOnCall[len(fake.describeCacheClustersPagesWithContextArgsForCall)]
	fake.describeCacheClustersPagesWithContextArgsForCall = append(fake.describeCacheClustersPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 func(*elasticache.DescribeCacheClustersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeCacheClustersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCacheClustersPagesWithContextMutex.Unlock()
	if fake.DescribeCacheClustersPagesWithContextStub != nil {
		return fake.DescribeCacheClustersPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeCacheClustersPagesWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesWithContextCallCount() int {
	fake.describeCacheClustersPagesWithContextMutex.RLock()
	defer fake.describeCacheClustersPagesWithContextMutex.RUnlock()
	return len(fake.describeCacheClustersPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheClustersInput, func(*elasticache.DescribeCacheClustersOutput, bool) bool, []request.Option) {
	fake.describeCacheClustersPagesWithContextMutex.RLock()
	defer fake.describeCacheClustersPagesWithContextMutex.RUnlock()
	return fake.describeCacheClustersPagesWithContextArgsForCall[i].arg1, fake.describeCacheClustersPagesWithContextArgsForCall[i].arg2, fake.describeCacheClustersPagesWithContextArgsForCall[i].arg3, fake.describeCacheClustersPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesWithContextReturns(result1 error) {
	fake.DescribeCacheClustersPagesWithContextStub = nil
	fake.describeCacheClustersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheClustersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeCacheClustersPagesWithContextStub = nil
	if fake.describeCacheClustersPagesWithContextReturnsOnCall == nil {
		fake.describeCacheClustersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheClustersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersions(arg1 *elasticache.DescribeCacheEngineVersionsInput) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	fake.describeCacheEngineVersionsMutex.Lock()
	ret, specificReturn := fake.describeCacheEngineVersionsReturnsOnCall[len(fake.describeCacheEngineVersionsArgsForCall)]
	fake.describeCacheEngineVersionsArgsForCall = append(fake.describeCacheEngineVersionsArgsForCall, struct {
		arg1 *elasticache.DescribeCacheEngineVersionsInput
	}{arg1})
	fake.recordInvocation("DescribeCacheEngineVersions", []interface{}{arg1})
	fake.describeCacheEngineVersionsMutex.Unlock()
	if fake.DescribeCacheEngineVersionsStub != nil {
		return fake.DescribeCacheEngineVersionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheEngineVersionsReturns.result1, fake.describeCacheEngineVersionsReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsCallCount() int {
	fake.describeCacheEngineVersionsMutex.RLock()
	defer fake.describeCacheEngineVersionsMutex.RUnlock()
	return len(fake.describeCacheEngineVersionsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsArgsForCall(i int) *elasticache.DescribeCacheEngineVersionsInput {
	fake.describeCacheEngineVersionsMutex.RLock()
	defer fake.describeCacheEngineVersionsMutex.RUnlock()
	return fake.describeCacheEngineVersionsArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsReturns(result1 *elasticache.DescribeCacheEngineVersionsOutput, result2 error) {
	fake.DescribeCacheEngineVersionsStub = nil
	fake.describeCacheEngineVersionsReturns = struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsReturnsOnCall(i int, result1 *elasticache.DescribeCacheEngineVersionsOutput, result2 error) {
	fake.DescribeCacheEngineVersionsStub = nil
	if fake.describeCacheEngineVersionsReturnsOnCall == nil {
		fake.describeCacheEngineVersionsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheEngineVersionsOutput
			result2 error
		})
	}
	fake.describeCacheEngineVersionsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheEngineVersionsInput, arg3 ...request.Option) (*elasticache.DescribeCacheEngineVersionsOutput, error) {
	fake.describeCacheEngineVersionsWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheEngineVersionsWithContextReturnsOnCall[len(fake.describeCacheEngineVersionsWithContextArgsForCall)]
	fake.describeCacheEngineVersionsWithContextArgsForCall = append(fake.describeCacheEngineVersionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheEngineVersionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeCacheEngineVersionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheEngineVersionsWithContextMutex.Unlock()
	if fake.DescribeCacheEngineVersionsWithContextStub != nil {
		return fake.DescribeCacheEngineVersionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheEngineVersionsWithContextReturns.result1, fake.describeCacheEngineVersionsWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsWithContextCallCount() int {
	fake.describeCacheEngineVersionsWithContextMutex.RLock()
	defer fake.describeCacheEngineVersionsWithContextMutex.RUnlock()
	return len(fake.describeCacheEngineVersionsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheEngineVersionsInput, []request.Option) {
	fake.describeCacheEngineVersionsWithContextMutex.RLock()
	defer fake.describeCacheEngineVersionsWithContextMutex.RUnlock()
	return fake.describeCacheEngineVersionsWithContextArgsForCall[i].arg1, fake.describeCacheEngineVersionsWithContextArgsForCall[i].arg2, fake.describeCacheEngineVersionsWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsWithContextReturns(result1 *elasticache.DescribeCacheEngineVersionsOutput, result2 error) {
	fake.DescribeCacheEngineVersionsWithContextStub = nil
	fake.describeCacheEngineVersionsWithContextReturns = struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheEngineVersionsOutput, result2 error) {
	fake.DescribeCacheEngineVersionsWithContextStub = nil
	if fake.describeCacheEngineVersionsWithContextReturnsOnCall == nil {
		fake.describeCacheEngineVersionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheEngineVersionsOutput
			result2 error
		})
	}
	fake.describeCacheEngineVersionsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheEngineVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsRequest(arg1 *elasticache.DescribeCacheEngineVersionsInput) (*request.Request, *elasticache.DescribeCacheEngineVersionsOutput) {
	fake.describeCacheEngineVersionsRequestMutex.Lock()
	ret, specificReturn := fake.describeCacheEngineVersionsRequestReturnsOnCall[len(fake.describeCacheEngineVersionsRequestArgsForCall)]
	fake.describeCacheEngineVersionsRequestArgsForCall = append(fake.describeCacheEngineVersionsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeCacheEngineVersionsInput
	}{arg1})
	fake.recordInvocation("DescribeCacheEngineVersionsRequest", []interface{}{arg1})
	fake.describeCacheEngineVersionsRequestMutex.Unlock()
	if fake.DescribeCacheEngineVersionsRequestStub != nil {
		return fake.DescribeCacheEngineVersionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheEngineVersionsRequestReturns.result1, fake.describeCacheEngineVersionsRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsRequestCallCount() int {
	fake.describeCacheEngineVersionsRequestMutex.RLock()
	defer fake.describeCacheEngineVersionsRequestMutex.RUnlock()
	return len(fake.describeCacheEngineVersionsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsRequestArgsForCall(i int) *elasticache.DescribeCacheEngineVersionsInput {
	fake.describeCacheEngineVersionsRequestMutex.RLock()
	defer fake.describeCacheEngineVersionsRequestMutex.RUnlock()
	return fake.describeCacheEngineVersionsRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeCacheEngineVersionsOutput) {
	fake.DescribeCacheEngineVersionsRequestStub = nil
	fake.describeCacheEngineVersionsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheEngineVersionsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeCacheEngineVersionsOutput) {
	fake.DescribeCacheEngineVersionsRequestStub = nil
	if fake.describeCacheEngineVersionsRequestReturnsOnCall == nil {
		fake.describeCacheEngineVersionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeCacheEngineVersionsOutput
		})
	}
	fake.describeCacheEngineVersionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheEngineVersionsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPages(arg1 *elasticache.DescribeCacheEngineVersionsInput, arg2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) error {
	fake.describeCacheEngineVersionsPagesMutex.Lock()
	ret, specificReturn := fake.describeCacheEngineVersionsPagesReturnsOnCall[len(fake.describeCacheEngineVersionsPagesArgsForCall)]
	fake.describeCacheEngineVersionsPagesArgsForCall = append(fake.describeCacheEngineVersionsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeCacheEngineVersionsInput
		arg2 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeCacheEngineVersionsPages", []interface{}{arg1, arg2})
	fake.describeCacheEngineVersionsPagesMutex.Unlock()
	if fake.DescribeCacheEngineVersionsPagesStub != nil {
		return fake.DescribeCacheEngineVersionsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeCacheEngineVersionsPagesReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesCallCount() int {
	fake.describeCacheEngineVersionsPagesMutex.RLock()
	defer fake.describeCacheEngineVersionsPagesMutex.RUnlock()
	return len(fake.describeCacheEngineVersionsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesArgsForCall(i int) (*elasticache.DescribeCacheEngineVersionsInput, func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool) {
	fake.describeCacheEngineVersionsPagesMutex.RLock()
	defer fake.describeCacheEngineVersionsPagesMutex.RUnlock()
	return fake.describeCacheEngineVersionsPagesArgsForCall[i].arg1, fake.describeCacheEngineVersionsPagesArgsForCall[i].arg2
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesReturns(result1 error) {
	fake.DescribeCacheEngineVersionsPagesStub = nil
	fake.describeCacheEngineVersionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeCacheEngineVersionsPagesStub = nil
	if fake.describeCacheEngineVersionsPagesReturnsOnCall == nil {
		fake.describeCacheEngineVersionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheEngineVersionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheEngineVersionsInput, arg3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCacheEngineVersionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheEngineVersionsPagesWithContextReturnsOnCall[len(fake.describeCacheEngineVersionsPagesWithContextArgsForCall)]
	fake.describeCacheEngineVersionsPagesWithContextArgsForCall = append(fake.describeCacheEngineVersionsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheEngineVersionsInput
		arg3 func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeCacheEngineVersionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCacheEngineVersionsPagesWithContextMutex.Unlock()
	if fake.DescribeCacheEngineVersionsPagesWithContextStub != nil {
		return fake.DescribeCacheEngineVersionsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeCacheEngineVersionsPagesWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesWithContextCallCount() int {
	fake.describeCacheEngineVersionsPagesWithContextMutex.RLock()
	defer fake.describeCacheEngineVersionsPagesWithContextMutex.RUnlock()
	return len(fake.describeCacheEngineVersionsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheEngineVersionsInput, func(*elasticache.DescribeCacheEngineVersionsOutput, bool) bool, []request.Option) {
	fake.describeCacheEngineVersionsPagesWithContextMutex.RLock()
	defer fake.describeCacheEngineVersionsPagesWithContextMutex.RUnlock()
	return fake.describeCacheEngineVersionsPagesWithContextArgsForCall[i].arg1, fake.describeCacheEngineVersionsPagesWithContextArgsForCall[i].arg2, fake.describeCacheEngineVersionsPagesWithContextArgsForCall[i].arg3, fake.describeCacheEngineVersionsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesWithContextReturns(result1 error) {
	fake.DescribeCacheEngineVersionsPagesWithContextStub = nil
	fake.describeCacheEngineVersionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheEngineVersionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeCacheEngineVersionsPagesWithContextStub = nil
	if fake.describeCacheEngineVersionsPagesWithContextReturnsOnCall == nil {
		fake.describeCacheEngineVersionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheEngineVersionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroups(arg1 *elasticache.DescribeCacheParameterGroupsInput) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	fake.describeCacheParameterGroupsMutex.Lock()
	ret, specificReturn := fake.describeCacheParameterGroupsReturnsOnCall[len(fake.describeCacheParameterGroupsArgsForCall)]
	fake.describeCacheParameterGroupsArgsForCall = append(fake.describeCacheParameterGroupsArgsForCall, struct {
		arg1 *elasticache.DescribeCacheParameterGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeCacheParameterGroups", []interface{}{arg1})
	fake.describeCacheParameterGroupsMutex.Unlock()
	if fake.DescribeCacheParameterGroupsStub != nil {
		return fake.DescribeCacheParameterGroupsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheParameterGroupsReturns.result1, fake.describeCacheParameterGroupsReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsCallCount() int {
	fake.describeCacheParameterGroupsMutex.RLock()
	defer fake.describeCacheParameterGroupsMutex.RUnlock()
	return len(fake.describeCacheParameterGroupsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsArgsForCall(i int) *elasticache.DescribeCacheParameterGroupsInput {
	fake.describeCacheParameterGroupsMutex.RLock()
	defer fake.describeCacheParameterGroupsMutex.RUnlock()
	return fake.describeCacheParameterGroupsArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsReturns(result1 *elasticache.DescribeCacheParameterGroupsOutput, result2 error) {
	fake.DescribeCacheParameterGroupsStub = nil
	fake.describeCacheParameterGroupsReturns = struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsReturnsOnCall(i int, result1 *elasticache.DescribeCacheParameterGroupsOutput, result2 error) {
	fake.DescribeCacheParameterGroupsStub = nil
	if fake.describeCacheParameterGroupsReturnsOnCall == nil {
		fake.describeCacheParameterGroupsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheParameterGroupsOutput
			result2 error
		})
	}
	fake.describeCacheParameterGroupsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheParameterGroupsInput, arg3 ...request.Option) (*elasticache.DescribeCacheParameterGroupsOutput, error) {
	fake.describeCacheParameterGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheParameterGroupsWithContextReturnsOnCall[len(fake.describeCacheParameterGroupsWithContextArgsForCall)]
	fake.describeCacheParameterGroupsWithContextArgsForCall = append(fake.describeCacheParameterGroupsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheParameterGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeCacheParameterGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheParameterGroupsWithContextMutex.Unlock()
	if fake.DescribeCacheParameterGroupsWithContextStub != nil {
		return fake.DescribeCacheParameterGroupsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheParameterGroupsWithContextReturns.result1, fake.describeCacheParameterGroupsWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsWithContextCallCount() int {
	fake.describeCacheParameterGroupsWithContextMutex.RLock()
	defer fake.describeCacheParameterGroupsWithContextMutex.RUnlock()
	return len(fake.describeCacheParameterGroupsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheParameterGroupsInput, []request.Option) {
	fake.describeCacheParameterGroupsWithContextMutex.RLock()
	defer fake.describeCacheParameterGroupsWithContextMutex.RUnlock()
	return fake.describeCacheParameterGroupsWithContextArgsForCall[i].arg1, fake.describeCacheParameterGroupsWithContextArgsForCall[i].arg2, fake.describeCacheParameterGroupsWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsWithContextReturns(result1 *elasticache.DescribeCacheParameterGroupsOutput, result2 error) {
	fake.DescribeCacheParameterGroupsWithContextStub = nil
	fake.describeCacheParameterGroupsWithContextReturns = struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheParameterGroupsOutput, result2 error) {
	fake.DescribeCacheParameterGroupsWithContextStub = nil
	if fake.describeCacheParameterGroupsWithContextReturnsOnCall == nil {
		fake.describeCacheParameterGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheParameterGroupsOutput
			result2 error
		})
	}
	fake.describeCacheParameterGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheParameterGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsRequest(arg1 *elasticache.DescribeCacheParameterGroupsInput) (*request.Request, *elasticache.DescribeCacheParameterGroupsOutput) {
	fake.describeCacheParameterGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeCacheParameterGroupsRequestReturnsOnCall[len(fake.describeCacheParameterGroupsRequestArgsForCall)]
	fake.describeCacheParameterGroupsRequestArgsForCall = append(fake.describeCacheParameterGroupsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeCacheParameterGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeCacheParameterGroupsRequest", []interface{}{arg1})
	fake.describeCacheParameterGroupsRequestMutex.Unlock()
	if fake.DescribeCacheParameterGroupsRequestStub != nil {
		return fake.DescribeCacheParameterGroupsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheParameterGroupsRequestReturns.result1, fake.describeCacheParameterGroupsRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsRequestCallCount() int {
	fake.describeCacheParameterGroupsRequestMutex.RLock()
	defer fake.describeCacheParameterGroupsRequestMutex.RUnlock()
	return len(fake.describeCacheParameterGroupsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsRequestArgsForCall(i int) *elasticache.DescribeCacheParameterGroupsInput {
	fake.describeCacheParameterGroupsRequestMutex.RLock()
	defer fake.describeCacheParameterGroupsRequestMutex.RUnlock()
	return fake.describeCacheParameterGroupsRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeCacheParameterGroupsOutput) {
	fake.DescribeCacheParameterGroupsRequestStub = nil
	fake.describeCacheParameterGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParameterGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeCacheParameterGroupsOutput) {
	fake.DescribeCacheParameterGroupsRequestStub = nil
	if fake.describeCacheParameterGroupsRequestReturnsOnCall == nil {
		fake.describeCacheParameterGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeCacheParameterGroupsOutput
		})
	}
	fake.describeCacheParameterGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParameterGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPages(arg1 *elasticache.DescribeCacheParameterGroupsInput, arg2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) error {
	fake.describeCacheParameterGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeCacheParameterGroupsPagesReturnsOnCall[len(fake.describeCacheParameterGroupsPagesArgsForCall)]
	fake.describeCacheParameterGroupsPagesArgsForCall = append(fake.describeCacheParameterGroupsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeCacheParameterGroupsInput
		arg2 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeCacheParameterGroupsPages", []interface{}{arg1, arg2})
	fake.describeCacheParameterGroupsPagesMutex.Unlock()
	if fake.DescribeCacheParameterGroupsPagesStub != nil {
		return fake.DescribeCacheParameterGroupsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeCacheParameterGroupsPagesReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesCallCount() int {
	fake.describeCacheParameterGroupsPagesMutex.RLock()
	defer fake.describeCacheParameterGroupsPagesMutex.RUnlock()
	return len(fake.describeCacheParameterGroupsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesArgsForCall(i int) (*elasticache.DescribeCacheParameterGroupsInput, func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool) {
	fake.describeCacheParameterGroupsPagesMutex.RLock()
	defer fake.describeCacheParameterGroupsPagesMutex.RUnlock()
	return fake.describeCacheParameterGroupsPagesArgsForCall[i].arg1, fake.describeCacheParameterGroupsPagesArgsForCall[i].arg2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesReturns(result1 error) {
	fake.DescribeCacheParameterGroupsPagesStub = nil
	fake.describeCacheParameterGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeCacheParameterGroupsPagesStub = nil
	if fake.describeCacheParameterGroupsPagesReturnsOnCall == nil {
		fake.describeCacheParameterGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheParameterGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheParameterGroupsInput, arg3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCacheParameterGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheParameterGroupsPagesWithContextReturnsOnCall[len(fake.describeCacheParameterGroupsPagesWithContextArgsForCall)]
	fake.describeCacheParameterGroupsPagesWithContextArgsForCall = append(fake.describeCacheParameterGroupsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheParameterGroupsInput
		arg3 func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeCacheParameterGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCacheParameterGroupsPagesWithContextMutex.Unlock()
	if fake.DescribeCacheParameterGroupsPagesWithContextStub != nil {
		return fake.DescribeCacheParameterGroupsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeCacheParameterGroupsPagesWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesWithContextCallCount() int {
	fake.describeCacheParameterGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheParameterGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeCacheParameterGroupsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheParameterGroupsInput, func(*elasticache.DescribeCacheParameterGroupsOutput, bool) bool, []request.Option) {
	fake.describeCacheParameterGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheParameterGroupsPagesWithContextMutex.RUnlock()
	return fake.describeCacheParameterGroupsPagesWithContextArgsForCall[i].arg1, fake.describeCacheParameterGroupsPagesWithContextArgsForCall[i].arg2, fake.describeCacheParameterGroupsPagesWithContextArgsForCall[i].arg3, fake.describeCacheParameterGroupsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesWithContextReturns(result1 error) {
	fake.DescribeCacheParameterGroupsPagesWithContextStub = nil
	fake.describeCacheParameterGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameterGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeCacheParameterGroupsPagesWithContextStub = nil
	if fake.describeCacheParameterGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeCacheParameterGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheParameterGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParameters(arg1 *elasticache.DescribeCacheParametersInput) (*elasticache.DescribeCacheParametersOutput, error) {
	fake.describeCacheParametersMutex.Lock()
	ret, specificReturn := fake.describeCacheParametersReturnsOnCall[len(fake.describeCacheParametersArgsForCall)]
	fake.describeCacheParametersArgsForCall = append(fake.describeCacheParametersArgsForCall, struct {
		arg1 *elasticache.DescribeCacheParametersInput
	}{arg1})
	fake.recordInvocation("DescribeCacheParameters", []interface{}{arg1})
	fake.describeCacheParametersMutex.Unlock()
	if fake.DescribeCacheParametersStub != nil {
		return fake.DescribeCacheParametersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheParametersReturns.result1, fake.describeCacheParametersReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersCallCount() int {
	fake.describeCacheParametersMutex.RLock()
	defer fake.describeCacheParametersMutex.RUnlock()
	return len(fake.describeCacheParametersArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersArgsForCall(i int) *elasticache.DescribeCacheParametersInput {
	fake.describeCacheParametersMutex.RLock()
	defer fake.describeCacheParametersMutex.RUnlock()
	return fake.describeCacheParametersArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersReturns(result1 *elasticache.DescribeCacheParametersOutput, result2 error) {
	fake.DescribeCacheParametersStub = nil
	fake.describeCacheParametersReturns = struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersReturnsOnCall(i int, result1 *elasticache.DescribeCacheParametersOutput, result2 error) {
	fake.DescribeCacheParametersStub = nil
	if fake.describeCacheParametersReturnsOnCall == nil {
		fake.describeCacheParametersReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheParametersOutput
			result2 error
		})
	}
	fake.describeCacheParametersReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheParametersInput, arg3 ...request.Option) (*elasticache.DescribeCacheParametersOutput, error) {
	fake.describeCacheParametersWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheParametersWithContextReturnsOnCall[len(fake.describeCacheParametersWithContextArgsForCall)]
	fake.describeCacheParametersWithContextArgsForCall = append(fake.describeCacheParametersWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheParametersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeCacheParametersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheParametersWithContextMutex.Unlock()
	if fake.DescribeCacheParametersWithContextStub != nil {
		return fake.DescribeCacheParametersWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheParametersWithContextReturns.result1, fake.describeCacheParametersWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersWithContextCallCount() int {
	fake.describeCacheParametersWithContextMutex.RLock()
	defer fake.describeCacheParametersWithContextMutex.RUnlock()
	return len(fake.describeCacheParametersWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheParametersInput, []request.Option) {
	fake.describeCacheParametersWithContextMutex.RLock()
	defer fake.describeCacheParametersWithContextMutex.RUnlock()
	return fake.describeCacheParametersWithContextArgsForCall[i].arg1, fake.describeCacheParametersWithContextArgsForCall[i].arg2, fake.describeCacheParametersWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersWithContextReturns(result1 *elasticache.DescribeCacheParametersOutput, result2 error) {
	fake.DescribeCacheParametersWithContextStub = nil
	fake.describeCacheParametersWithContextReturns = struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheParametersOutput, result2 error) {
	fake.DescribeCacheParametersWithContextStub = nil
	if fake.describeCacheParametersWithContextReturnsOnCall == nil {
		fake.describeCacheParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheParametersOutput
			result2 error
		})
	}
	fake.describeCacheParametersWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersRequest(arg1 *elasticache.DescribeCacheParametersInput) (*request.Request, *elasticache.DescribeCacheParametersOutput) {
	fake.describeCacheParametersRequestMutex.Lock()
	ret, specificReturn := fake.describeCacheParametersRequestReturnsOnCall[len(fake.describeCacheParametersRequestArgsForCall)]
	fake.describeCacheParametersRequestArgsForCall = append(fake.describeCacheParametersRequestArgsForCall, struct {
		arg1 *elasticache.DescribeCacheParametersInput
	}{arg1})
	fake.recordInvocation("DescribeCacheParametersRequest", []interface{}{arg1})
	fake.describeCacheParametersRequestMutex.Unlock()
	if fake.DescribeCacheParametersRequestStub != nil {
		return fake.DescribeCacheParametersRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheParametersRequestReturns.result1, fake.describeCacheParametersRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersRequestCallCount() int {
	fake.describeCacheParametersRequestMutex.RLock()
	defer fake.describeCacheParametersRequestMutex.RUnlock()
	return len(fake.describeCacheParametersRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersRequestArgsForCall(i int) *elasticache.DescribeCacheParametersInput {
	fake.describeCacheParametersRequestMutex.RLock()
	defer fake.describeCacheParametersRequestMutex.RUnlock()
	return fake.describeCacheParametersRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersRequestReturns(result1 *request.Request, result2 *elasticache.DescribeCacheParametersOutput) {
	fake.DescribeCacheParametersRequestStub = nil
	fake.describeCacheParametersRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParametersOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeCacheParametersOutput) {
	fake.DescribeCacheParametersRequestStub = nil
	if fake.describeCacheParametersRequestReturnsOnCall == nil {
		fake.describeCacheParametersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeCacheParametersOutput
		})
	}
	fake.describeCacheParametersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheParametersOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPages(arg1 *elasticache.DescribeCacheParametersInput, arg2 func(*elasticache.DescribeCacheParametersOutput, bool) bool) error {
	fake.describeCacheParametersPagesMutex.Lock()
	ret, specificReturn := fake.describeCacheParametersPagesReturnsOnCall[len(fake.describeCacheParametersPagesArgsForCall)]
	fake.describeCacheParametersPagesArgsForCall = append(fake.describeCacheParametersPagesArgsForCall, struct {
		arg1 *elasticache.DescribeCacheParametersInput
		arg2 func(*elasticache.DescribeCacheParametersOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeCacheParametersPages", []interface{}{arg1, arg2})
	fake.describeCacheParametersPagesMutex.Unlock()
	if fake.DescribeCacheParametersPagesStub != nil {
		return fake.DescribeCacheParametersPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeCacheParametersPagesReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesCallCount() int {
	fake.describeCacheParametersPagesMutex.RLock()
	defer fake.describeCacheParametersPagesMutex.RUnlock()
	return len(fake.describeCacheParametersPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesArgsForCall(i int) (*elasticache.DescribeCacheParametersInput, func(*elasticache.DescribeCacheParametersOutput, bool) bool) {
	fake.describeCacheParametersPagesMutex.RLock()
	defer fake.describeCacheParametersPagesMutex.RUnlock()
	return fake.describeCacheParametersPagesArgsForCall[i].arg1, fake.describeCacheParametersPagesArgsForCall[i].arg2
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesReturns(result1 error) {
	fake.DescribeCacheParametersPagesStub = nil
	fake.describeCacheParametersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeCacheParametersPagesStub = nil
	if fake.describeCacheParametersPagesReturnsOnCall == nil {
		fake.describeCacheParametersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheParametersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheParametersInput, arg3 func(*elasticache.DescribeCacheParametersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCacheParametersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheParametersPagesWithContextReturnsOnCall[len(fake.describeCacheParametersPagesWithContextArgsForCall)]
	fake.describeCacheParametersPagesWithContextArgsForCall = append(fake.describeCacheParametersPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheParametersInput
		arg3 func(*elasticache.DescribeCacheParametersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeCacheParametersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCacheParametersPagesWithContextMutex.Unlock()
	if fake.DescribeCacheParametersPagesWithContextStub != nil {
		return fake.DescribeCacheParametersPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeCacheParametersPagesWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesWithContextCallCount() int {
	fake.describeCacheParametersPagesWithContextMutex.RLock()
	defer fake.describeCacheParametersPagesWithContextMutex.RUnlock()
	return len(fake.describeCacheParametersPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheParametersInput, func(*elasticache.DescribeCacheParametersOutput, bool) bool, []request.Option) {
	fake.describeCacheParametersPagesWithContextMutex.RLock()
	defer fake.describeCacheParametersPagesWithContextMutex.RUnlock()
	return fake.describeCacheParametersPagesWithContextArgsForCall[i].arg1, fake.describeCacheParametersPagesWithContextArgsForCall[i].arg2, fake.describeCacheParametersPagesWithContextArgsForCall[i].arg3, fake.describeCacheParametersPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesWithContextReturns(result1 error) {
	fake.DescribeCacheParametersPagesWithContextStub = nil
	fake.describeCacheParametersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheParametersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeCacheParametersPagesWithContextStub = nil
	if fake.describeCacheParametersPagesWithContextReturnsOnCall == nil {
		fake.describeCacheParametersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheParametersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroups(arg1 *elasticache.DescribeCacheSecurityGroupsInput) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	fake.describeCacheSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.describeCacheSecurityGroupsReturnsOnCall[len(fake.describeCacheSecurityGroupsArgsForCall)]
	fake.describeCacheSecurityGroupsArgsForCall = append(fake.describeCacheSecurityGroupsArgsForCall, struct {
		arg1 *elasticache.DescribeCacheSecurityGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeCacheSecurityGroups", []interface{}{arg1})
	fake.describeCacheSecurityGroupsMutex.Unlock()
	if fake.DescribeCacheSecurityGroupsStub != nil {
		return fake.DescribeCacheSecurityGroupsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheSecurityGroupsReturns.result1, fake.describeCacheSecurityGroupsReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsCallCount() int {
	fake.describeCacheSecurityGroupsMutex.RLock()
	defer fake.describeCacheSecurityGroupsMutex.RUnlock()
	return len(fake.describeCacheSecurityGroupsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsArgsForCall(i int) *elasticache.DescribeCacheSecurityGroupsInput {
	fake.describeCacheSecurityGroupsMutex.RLock()
	defer fake.describeCacheSecurityGroupsMutex.RUnlock()
	return fake.describeCacheSecurityGroupsArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsReturns(result1 *elasticache.DescribeCacheSecurityGroupsOutput, result2 error) {
	fake.DescribeCacheSecurityGroupsStub = nil
	fake.describeCacheSecurityGroupsReturns = struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsReturnsOnCall(i int, result1 *elasticache.DescribeCacheSecurityGroupsOutput, result2 error) {
	fake.DescribeCacheSecurityGroupsStub = nil
	if fake.describeCacheSecurityGroupsReturnsOnCall == nil {
		fake.describeCacheSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheSecurityGroupsOutput
			result2 error
		})
	}
	fake.describeCacheSecurityGroupsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheSecurityGroupsInput, arg3 ...request.Option) (*elasticache.DescribeCacheSecurityGroupsOutput, error) {
	fake.describeCacheSecurityGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheSecurityGroupsWithContextReturnsOnCall[len(fake.describeCacheSecurityGroupsWithContextArgsForCall)]
	fake.describeCacheSecurityGroupsWithContextArgsForCall = append(fake.describeCacheSecurityGroupsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheSecurityGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeCacheSecurityGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheSecurityGroupsWithContextMutex.Unlock()
	if fake.DescribeCacheSecurityGroupsWithContextStub != nil {
		return fake.DescribeCacheSecurityGroupsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheSecurityGroupsWithContextReturns.result1, fake.describeCacheSecurityGroupsWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsWithContextCallCount() int {
	fake.describeCacheSecurityGroupsWithContextMutex.RLock()
	defer fake.describeCacheSecurityGroupsWithContextMutex.RUnlock()
	return len(fake.describeCacheSecurityGroupsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheSecurityGroupsInput, []request.Option) {
	fake.describeCacheSecurityGroupsWithContextMutex.RLock()
	defer fake.describeCacheSecurityGroupsWithContextMutex.RUnlock()
	return fake.describeCacheSecurityGroupsWithContextArgsForCall[i].arg1, fake.describeCacheSecurityGroupsWithContextArgsForCall[i].arg2, fake.describeCacheSecurityGroupsWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsWithContextReturns(result1 *elasticache.DescribeCacheSecurityGroupsOutput, result2 error) {
	fake.DescribeCacheSecurityGroupsWithContextStub = nil
	fake.describeCacheSecurityGroupsWithContextReturns = struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheSecurityGroupsOutput, result2 error) {
	fake.DescribeCacheSecurityGroupsWithContextStub = nil
	if fake.describeCacheSecurityGroupsWithContextReturnsOnCall == nil {
		fake.describeCacheSecurityGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheSecurityGroupsOutput
			result2 error
		})
	}
	fake.describeCacheSecurityGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheSecurityGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsRequest(arg1 *elasticache.DescribeCacheSecurityGroupsInput) (*request.Request, *elasticache.DescribeCacheSecurityGroupsOutput) {
	fake.describeCacheSecurityGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeCacheSecurityGroupsRequestReturnsOnCall[len(fake.describeCacheSecurityGroupsRequestArgsForCall)]
	fake.describeCacheSecurityGroupsRequestArgsForCall = append(fake.describeCacheSecurityGroupsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeCacheSecurityGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeCacheSecurityGroupsRequest", []interface{}{arg1})
	fake.describeCacheSecurityGroupsRequestMutex.Unlock()
	if fake.DescribeCacheSecurityGroupsRequestStub != nil {
		return fake.DescribeCacheSecurityGroupsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheSecurityGroupsRequestReturns.result1, fake.describeCacheSecurityGroupsRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsRequestCallCount() int {
	fake.describeCacheSecurityGroupsRequestMutex.RLock()
	defer fake.describeCacheSecurityGroupsRequestMutex.RUnlock()
	return len(fake.describeCacheSecurityGroupsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsRequestArgsForCall(i int) *elasticache.DescribeCacheSecurityGroupsInput {
	fake.describeCacheSecurityGroupsRequestMutex.RLock()
	defer fake.describeCacheSecurityGroupsRequestMutex.RUnlock()
	return fake.describeCacheSecurityGroupsRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeCacheSecurityGroupsOutput) {
	fake.DescribeCacheSecurityGroupsRequestStub = nil
	fake.describeCacheSecurityGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSecurityGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeCacheSecurityGroupsOutput) {
	fake.DescribeCacheSecurityGroupsRequestStub = nil
	if fake.describeCacheSecurityGroupsRequestReturnsOnCall == nil {
		fake.describeCacheSecurityGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeCacheSecurityGroupsOutput
		})
	}
	fake.describeCacheSecurityGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSecurityGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPages(arg1 *elasticache.DescribeCacheSecurityGroupsInput, arg2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) error {
	fake.describeCacheSecurityGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeCacheSecurityGroupsPagesReturnsOnCall[len(fake.describeCacheSecurityGroupsPagesArgsForCall)]
	fake.describeCacheSecurityGroupsPagesArgsForCall = append(fake.describeCacheSecurityGroupsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeCacheSecurityGroupsInput
		arg2 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeCacheSecurityGroupsPages", []interface{}{arg1, arg2})
	fake.describeCacheSecurityGroupsPagesMutex.Unlock()
	if fake.DescribeCacheSecurityGroupsPagesStub != nil {
		return fake.DescribeCacheSecurityGroupsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeCacheSecurityGroupsPagesReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesCallCount() int {
	fake.describeCacheSecurityGroupsPagesMutex.RLock()
	defer fake.describeCacheSecurityGroupsPagesMutex.RUnlock()
	return len(fake.describeCacheSecurityGroupsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesArgsForCall(i int) (*elasticache.DescribeCacheSecurityGroupsInput, func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool) {
	fake.describeCacheSecurityGroupsPagesMutex.RLock()
	defer fake.describeCacheSecurityGroupsPagesMutex.RUnlock()
	return fake.describeCacheSecurityGroupsPagesArgsForCall[i].arg1, fake.describeCacheSecurityGroupsPagesArgsForCall[i].arg2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesReturns(result1 error) {
	fake.DescribeCacheSecurityGroupsPagesStub = nil
	fake.describeCacheSecurityGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeCacheSecurityGroupsPagesStub = nil
	if fake.describeCacheSecurityGroupsPagesReturnsOnCall == nil {
		fake.describeCacheSecurityGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheSecurityGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheSecurityGroupsInput, arg3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCacheSecurityGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheSecurityGroupsPagesWithContextReturnsOnCall[len(fake.describeCacheSecurityGroupsPagesWithContextArgsForCall)]
	fake.describeCacheSecurityGroupsPagesWithContextArgsForCall = append(fake.describeCacheSecurityGroupsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheSecurityGroupsInput
		arg3 func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeCacheSecurityGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCacheSecurityGroupsPagesWithContextMutex.Unlock()
	if fake.DescribeCacheSecurityGroupsPagesWithContextStub != nil {
		return fake.DescribeCacheSecurityGroupsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeCacheSecurityGroupsPagesWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesWithContextCallCount() int {
	fake.describeCacheSecurityGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheSecurityGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeCacheSecurityGroupsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheSecurityGroupsInput, func(*elasticache.DescribeCacheSecurityGroupsOutput, bool) bool, []request.Option) {
	fake.describeCacheSecurityGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheSecurityGroupsPagesWithContextMutex.RUnlock()
	return fake.describeCacheSecurityGroupsPagesWithContextArgsForCall[i].arg1, fake.describeCacheSecurityGroupsPagesWithContextArgsForCall[i].arg2, fake.describeCacheSecurityGroupsPagesWithContextArgsForCall[i].arg3, fake.describeCacheSecurityGroupsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesWithContextReturns(result1 error) {
	fake.DescribeCacheSecurityGroupsPagesWithContextStub = nil
	fake.describeCacheSecurityGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSecurityGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeCacheSecurityGroupsPagesWithContextStub = nil
	if fake.describeCacheSecurityGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeCacheSecurityGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheSecurityGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroups(arg1 *elasticache.DescribeCacheSubnetGroupsInput) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	fake.describeCacheSubnetGroupsMutex.Lock()
	ret, specificReturn := fake.describeCacheSubnetGroupsReturnsOnCall[len(fake.describeCacheSubnetGroupsArgsForCall)]
	fake.describeCacheSubnetGroupsArgsForCall = append(fake.describeCacheSubnetGroupsArgsForCall, struct {
		arg1 *elasticache.DescribeCacheSubnetGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeCacheSubnetGroups", []interface{}{arg1})
	fake.describeCacheSubnetGroupsMutex.Unlock()
	if fake.DescribeCacheSubnetGroupsStub != nil {
		return fake.DescribeCacheSubnetGroupsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheSubnetGroupsReturns.result1, fake.describeCacheSubnetGroupsReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsCallCount() int {
	fake.describeCacheSubnetGroupsMutex.RLock()
	defer fake.describeCacheSubnetGroupsMutex.RUnlock()
	return len(fake.describeCacheSubnetGroupsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsArgsForCall(i int) *elasticache.DescribeCacheSubnetGroupsInput {
	fake.describeCacheSubnetGroupsMutex.RLock()
	defer fake.describeCacheSubnetGroupsMutex.RUnlock()
	return fake.describeCacheSubnetGroupsArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsReturns(result1 *elasticache.DescribeCacheSubnetGroupsOutput, result2 error) {
	fake.DescribeCacheSubnetGroupsStub = nil
	fake.describeCacheSubnetGroupsReturns = struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsReturnsOnCall(i int, result1 *elasticache.DescribeCacheSubnetGroupsOutput, result2 error) {
	fake.DescribeCacheSubnetGroupsStub = nil
	if fake.describeCacheSubnetGroupsReturnsOnCall == nil {
		fake.describeCacheSubnetGroupsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheSubnetGroupsOutput
			result2 error
		})
	}
	fake.describeCacheSubnetGroupsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheSubnetGroupsInput, arg3 ...request.Option) (*elasticache.DescribeCacheSubnetGroupsOutput, error) {
	fake.describeCacheSubnetGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheSubnetGroupsWithContextReturnsOnCall[len(fake.describeCacheSubnetGroupsWithContextArgsForCall)]
	fake.describeCacheSubnetGroupsWithContextArgsForCall = append(fake.describeCacheSubnetGroupsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheSubnetGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeCacheSubnetGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCacheSubnetGroupsWithContextMutex.Unlock()
	if fake.DescribeCacheSubnetGroupsWithContextStub != nil {
		return fake.DescribeCacheSubnetGroupsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheSubnetGroupsWithContextReturns.result1, fake.describeCacheSubnetGroupsWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsWithContextCallCount() int {
	fake.describeCacheSubnetGroupsWithContextMutex.RLock()
	defer fake.describeCacheSubnetGroupsWithContextMutex.RUnlock()
	return len(fake.describeCacheSubnetGroupsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheSubnetGroupsInput, []request.Option) {
	fake.describeCacheSubnetGroupsWithContextMutex.RLock()
	defer fake.describeCacheSubnetGroupsWithContextMutex.RUnlock()
	return fake.describeCacheSubnetGroupsWithContextArgsForCall[i].arg1, fake.describeCacheSubnetGroupsWithContextArgsForCall[i].arg2, fake.describeCacheSubnetGroupsWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsWithContextReturns(result1 *elasticache.DescribeCacheSubnetGroupsOutput, result2 error) {
	fake.DescribeCacheSubnetGroupsWithContextStub = nil
	fake.describeCacheSubnetGroupsWithContextReturns = struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheSubnetGroupsOutput, result2 error) {
	fake.DescribeCacheSubnetGroupsWithContextStub = nil
	if fake.describeCacheSubnetGroupsWithContextReturnsOnCall == nil {
		fake.describeCacheSubnetGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheSubnetGroupsOutput
			result2 error
		})
	}
	fake.describeCacheSubnetGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheSubnetGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsRequest(arg1 *elasticache.DescribeCacheSubnetGroupsInput) (*request.Request, *elasticache.DescribeCacheSubnetGroupsOutput) {
	fake.describeCacheSubnetGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeCacheSubnetGroupsRequestReturnsOnCall[len(fake.describeCacheSubnetGroupsRequestArgsForCall)]
	fake.describeCacheSubnetGroupsRequestArgsForCall = append(fake.describeCacheSubnetGroupsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeCacheSubnetGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeCacheSubnetGroupsRequest", []interface{}{arg1})
	fake.describeCacheSubnetGroupsRequestMutex.Unlock()
	if fake.DescribeCacheSubnetGroupsRequestStub != nil {
		return fake.DescribeCacheSubnetGroupsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheSubnetGroupsRequestReturns.result1, fake.describeCacheSubnetGroupsRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsRequestCallCount() int {
	fake.describeCacheSubnetGroupsRequestMutex.RLock()
	defer fake.describeCacheSubnetGroupsRequestMutex.RUnlock()
	return len(fake.describeCacheSubnetGroupsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsRequestArgsForCall(i int) *elasticache.DescribeCacheSubnetGroupsInput {
	fake.describeCacheSubnetGroupsRequestMutex.RLock()
	defer fake.describeCacheSubnetGroupsRequestMutex.RUnlock()
	return fake.describeCacheSubnetGroupsRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeCacheSubnetGroupsOutput) {
	fake.DescribeCacheSubnetGroupsRequestStub = nil
	fake.describeCacheSubnetGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSubnetGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeCacheSubnetGroupsOutput) {
	fake.DescribeCacheSubnetGroupsRequestStub = nil
	if fake.describeCacheSubnetGroupsRequestReturnsOnCall == nil {
		fake.describeCacheSubnetGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeCacheSubnetGroupsOutput
		})
	}
	fake.describeCacheSubnetGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeCacheSubnetGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPages(arg1 *elasticache.DescribeCacheSubnetGroupsInput, arg2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) error {
	fake.describeCacheSubnetGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeCacheSubnetGroupsPagesReturnsOnCall[len(fake.describeCacheSubnetGroupsPagesArgsForCall)]
	fake.describeCacheSubnetGroupsPagesArgsForCall = append(fake.describeCacheSubnetGroupsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeCacheSubnetGroupsInput
		arg2 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeCacheSubnetGroupsPages", []interface{}{arg1, arg2})
	fake.describeCacheSubnetGroupsPagesMutex.Unlock()
	if fake.DescribeCacheSubnetGroupsPagesStub != nil {
		return fake.DescribeCacheSubnetGroupsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeCacheSubnetGroupsPagesReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesCallCount() int {
	fake.describeCacheSubnetGroupsPagesMutex.RLock()
	defer fake.describeCacheSubnetGroupsPagesMutex.RUnlock()
	return len(fake.describeCacheSubnetGroupsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesArgsForCall(i int) (*elasticache.DescribeCacheSubnetGroupsInput, func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool) {
	fake.describeCacheSubnetGroupsPagesMutex.RLock()
	defer fake.describeCacheSubnetGroupsPagesMutex.RUnlock()
	return fake.describeCacheSubnetGroupsPagesArgsForCall[i].arg1, fake.describeCacheSubnetGroupsPagesArgsForCall[i].arg2
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesReturns(result1 error) {
	fake.DescribeCacheSubnetGroupsPagesStub = nil
	fake.describeCacheSubnetGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeCacheSubnetGroupsPagesStub = nil
	if fake.describeCacheSubnetGroupsPagesReturnsOnCall == nil {
		fake.describeCacheSubnetGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheSubnetGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheSubnetGroupsInput, arg3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeCacheSubnetGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheSubnetGroupsPagesWithContextReturnsOnCall[len(fake.describeCacheSubnetGroupsPagesWithContextArgsForCall)]
	fake.describeCacheSubnetGroupsPagesWithContextArgsForCall = append(fake.describeCacheSubnetGroupsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheSubnetGroupsInput
		arg3 func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeCacheSubnetGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeCacheSubnetGroupsPagesWithContextMutex.Unlock()
	if fake.DescribeCacheSubnetGroupsPagesWithContextStub != nil {
		return fake.DescribeCacheSubnetGroupsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeCacheSubnetGroupsPagesWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesWithContextCallCount() int {
	fake.describeCacheSubnetGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheSubnetGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeCacheSubnetGroupsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheSubnetGroupsInput, func(*elasticache.DescribeCacheSubnetGroupsOutput, bool) bool, []request.Option) {
	fake.describeCacheSubnetGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheSubnetGroupsPagesWithContextMutex.RUnlock()
	return fake.describeCacheSubnetGroupsPagesWithContextArgsForCall[i].arg1, fake.describeCacheSubnetGroupsPagesWithContextArgsForCall[i].arg2, fake.describeCacheSubnetGroupsPagesWithContextArgsForCall[i].arg3, fake.describeCacheSubnetGroupsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesWithContextReturns(result1 error) {
	fake.DescribeCacheSubnetGroupsPagesWithContextStub = nil
	fake.describeCacheSubnetGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeCacheSubnetGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeCacheSubnetGroupsPagesWithContextStub = nil
	if fake.describeCacheSubnetGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeCacheSubnetGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeCacheSubnetGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParameters(arg1 *elasticache.DescribeEngineDefaultParametersInput) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	fake.describeEngineDefaultParametersMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersReturnsOnCall[len(fake.describeEngineDefaultParametersArgsForCall)]
	fake.describeEngineDefaultParametersArgsForCall = append(fake.describeEngineDefaultParametersArgsForCall, struct {
		arg1 *elasticache.DescribeEngineDefaultParametersInput
	}{arg1})
	fake.recordInvocation("DescribeEngineDefaultParameters", []interface{}{arg1})
	fake.describeEngineDefaultParametersMutex.Unlock()
	if fake.DescribeEngineDefaultParametersStub != nil {
		return fake.DescribeEngineDefaultParametersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeEngineDefaultParametersReturns.result1, fake.describeEngineDefaultParametersReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersCallCount() int {
	fake.describeEngineDefaultParametersMutex.RLock()
	defer fake.describeEngineDefaultParametersMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersArgsForCall(i int) *elasticache.DescribeEngineDefaultParametersInput {
	fake.describeEngineDefaultParametersMutex.RLock()
	defer fake.describeEngineDefaultParametersMutex.RUnlock()
	return fake.describeEngineDefaultParametersArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersReturns(result1 *elasticache.DescribeEngineDefaultParametersOutput, result2 error) {
	fake.DescribeEngineDefaultParametersStub = nil
	fake.describeEngineDefaultParametersReturns = struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersReturnsOnCall(i int, result1 *elasticache.DescribeEngineDefaultParametersOutput, result2 error) {
	fake.DescribeEngineDefaultParametersStub = nil
	if fake.describeEngineDefaultParametersReturnsOnCall == nil {
		fake.describeEngineDefaultParametersReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeEngineDefaultParametersOutput
			result2 error
		})
	}
	fake.describeEngineDefaultParametersReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersWithContext(arg1 aws.Context, arg2 *elasticache.DescribeEngineDefaultParametersInput, arg3 ...request.Option) (*elasticache.DescribeEngineDefaultParametersOutput, error) {
	fake.describeEngineDefaultParametersWithContextMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersWithContextReturnsOnCall[len(fake.describeEngineDefaultParametersWithContextArgsForCall)]
	fake.describeEngineDefaultParametersWithContextArgsForCall = append(fake.describeEngineDefaultParametersWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeEngineDefaultParametersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeEngineDefaultParametersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEngineDefaultParametersWithContextMutex.Unlock()
	if fake.DescribeEngineDefaultParametersWithContextStub != nil {
		return fake.DescribeEngineDefaultParametersWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeEngineDefaultParametersWithContextReturns.result1, fake.describeEngineDefaultParametersWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersWithContextCallCount() int {
	fake.describeEngineDefaultParametersWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersWithContextMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeEngineDefaultParametersInput, []request.Option) {
	fake.describeEngineDefaultParametersWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersWithContextMutex.RUnlock()
	return fake.describeEngineDefaultParametersWithContextArgsForCall[i].arg1, fake.describeEngineDefaultParametersWithContextArgsForCall[i].arg2, fake.describeEngineDefaultParametersWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersWithContextReturns(result1 *elasticache.DescribeEngineDefaultParametersOutput, result2 error) {
	fake.DescribeEngineDefaultParametersWithContextStub = nil
	fake.describeEngineDefaultParametersWithContextReturns = struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersWithContextReturnsOnCall(i int, result1 *elasticache.DescribeEngineDefaultParametersOutput, result2 error) {
	fake.DescribeEngineDefaultParametersWithContextStub = nil
	if fake.describeEngineDefaultParametersWithContextReturnsOnCall == nil {
		fake.describeEngineDefaultParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeEngineDefaultParametersOutput
			result2 error
		})
	}
	fake.describeEngineDefaultParametersWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeEngineDefaultParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersRequest(arg1 *elasticache.DescribeEngineDefaultParametersInput) (*request.Request, *elasticache.DescribeEngineDefaultParametersOutput) {
	fake.describeEngineDefaultParametersRequestMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersRequestReturnsOnCall[len(fake.describeEngineDefaultParametersRequestArgsForCall)]
	fake.describeEngineDefaultParametersRequestArgsForCall = append(fake.describeEngineDefaultParametersRequestArgsForCall, struct {
		arg1 *elasticache.DescribeEngineDefaultParametersInput
	}{arg1})
	fake.recordInvocation("DescribeEngineDefaultParametersRequest", []interface{}{arg1})
	fake.describeEngineDefaultParametersRequestMutex.Unlock()
	if fake.DescribeEngineDefaultParametersRequestStub != nil {
		return fake.DescribeEngineDefaultParametersRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeEngineDefaultParametersRequestReturns.result1, fake.describeEngineDefaultParametersRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersRequestCallCount() int {
	fake.describeEngineDefaultParametersRequestMutex.RLock()
	defer fake.describeEngineDefaultParametersRequestMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersRequestArgsForCall(i int) *elasticache.DescribeEngineDefaultParametersInput {
	fake.describeEngineDefaultParametersRequestMutex.RLock()
	defer fake.describeEngineDefaultParametersRequestMutex.RUnlock()
	return fake.describeEngineDefaultParametersRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersRequestReturns(result1 *request.Request, result2 *elasticache.DescribeEngineDefaultParametersOutput) {
	fake.DescribeEngineDefaultParametersRequestStub = nil
	fake.describeEngineDefaultParametersRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeEngineDefaultParametersOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeEngineDefaultParametersOutput) {
	fake.DescribeEngineDefaultParametersRequestStub = nil
	if fake.describeEngineDefaultParametersRequestReturnsOnCall == nil {
		fake.describeEngineDefaultParametersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeEngineDefaultParametersOutput
		})
	}
	fake.describeEngineDefaultParametersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeEngineDefaultParametersOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPages(arg1 *elasticache.DescribeEngineDefaultParametersInput, arg2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) error {
	fake.describeEngineDefaultParametersPagesMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersPagesReturnsOnCall[len(fake.describeEngineDefaultParametersPagesArgsForCall)]
	fake.describeEngineDefaultParametersPagesArgsForCall = append(fake.describeEngineDefaultParametersPagesArgsForCall, struct {
		arg1 *elasticache.DescribeEngineDefaultParametersInput
		arg2 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeEngineDefaultParametersPages", []interface{}{arg1, arg2})
	fake.describeEngineDefaultParametersPagesMutex.Unlock()
	if fake.DescribeEngineDefaultParametersPagesStub != nil {
		return fake.DescribeEngineDefaultParametersPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeEngineDefaultParametersPagesReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesCallCount() int {
	fake.describeEngineDefaultParametersPagesMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesArgsForCall(i int) (*elasticache.DescribeEngineDefaultParametersInput, func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool) {
	fake.describeEngineDefaultParametersPagesMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesMutex.RUnlock()
	return fake.describeEngineDefaultParametersPagesArgsForCall[i].arg1, fake.describeEngineDefaultParametersPagesArgsForCall[i].arg2
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesReturns(result1 error) {
	fake.DescribeEngineDefaultParametersPagesStub = nil
	fake.describeEngineDefaultParametersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeEngineDefaultParametersPagesStub = nil
	if fake.describeEngineDefaultParametersPagesReturnsOnCall == nil {
		fake.describeEngineDefaultParametersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEngineDefaultParametersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeEngineDefaultParametersInput, arg3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEngineDefaultParametersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEngineDefaultParametersPagesWithContextReturnsOnCall[len(fake.describeEngineDefaultParametersPagesWithContextArgsForCall)]
	fake.describeEngineDefaultParametersPagesWithContextArgsForCall = append(fake.describeEngineDefaultParametersPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeEngineDefaultParametersInput
		arg3 func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeEngineDefaultParametersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEngineDefaultParametersPagesWithContextMutex.Unlock()
	if fake.DescribeEngineDefaultParametersPagesWithContextStub != nil {
		return fake.DescribeEngineDefaultParametersPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeEngineDefaultParametersPagesWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesWithContextCallCount() int {
	fake.describeEngineDefaultParametersPagesWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.RUnlock()
	return len(fake.describeEngineDefaultParametersPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeEngineDefaultParametersInput, func(*elasticache.DescribeEngineDefaultParametersOutput, bool) bool, []request.Option) {
	fake.describeEngineDefaultParametersPagesWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.RUnlock()
	return fake.describeEngineDefaultParametersPagesWithContextArgsForCall[i].arg1, fake.describeEngineDefaultParametersPagesWithContextArgsForCall[i].arg2, fake.describeEngineDefaultParametersPagesWithContextArgsForCall[i].arg3, fake.describeEngineDefaultParametersPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesWithContextReturns(result1 error) {
	fake.DescribeEngineDefaultParametersPagesWithContextStub = nil
	fake.describeEngineDefaultParametersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEngineDefaultParametersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeEngineDefaultParametersPagesWithContextStub = nil
	if fake.describeEngineDefaultParametersPagesWithContextReturnsOnCall == nil {
		fake.describeEngineDefaultParametersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEngineDefaultParametersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEvents(arg1 *elasticache.DescribeEventsInput) (*elasticache.DescribeEventsOutput, error) {
	fake.describeEventsMutex.Lock()
	ret, specificReturn := fake.describeEventsReturnsOnCall[len(fake.describeEventsArgsForCall)]
	fake.describeEventsArgsForCall = append(fake.describeEventsArgsForCall, struct {
		arg1 *elasticache.DescribeEventsInput
	}{arg1})
	fake.recordInvocation("DescribeEvents", []interface{}{arg1})
	fake.describeEventsMutex.Unlock()
	if fake.DescribeEventsStub != nil {
		return fake.DescribeEventsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeEventsReturns.result1, fake.describeEventsReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeEventsCallCount() int {
	fake.describeEventsMutex.RLock()
	defer fake.describeEventsMutex.RUnlock()
	return len(fake.describeEventsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEventsArgsForCall(i int) *elasticache.DescribeEventsInput {
	fake.describeEventsMutex.RLock()
	defer fake.describeEventsMutex.RUnlock()
	return fake.describeEventsArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeEventsReturns(result1 *elasticache.DescribeEventsOutput, result2 error) {
	fake.DescribeEventsStub = nil
	fake.describeEventsReturns = struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEventsReturnsOnCall(i int, result1 *elasticache.DescribeEventsOutput, result2 error) {
	fake.DescribeEventsStub = nil
	if fake.describeEventsReturnsOnCall == nil {
		fake.describeEventsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeEventsOutput
			result2 error
		})
	}
	fake.describeEventsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEventsWithContext(arg1 aws.Context, arg2 *elasticache.DescribeEventsInput, arg3 ...request.Option) (*elasticache.DescribeEventsOutput, error) {
	fake.describeEventsWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventsWithContextReturnsOnCall[len(fake.describeEventsWithContextArgsForCall)]
	fake.describeEventsWithContextArgsForCall = append(fake.describeEventsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeEventsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeEventsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeEventsWithContextMutex.Unlock()
	if fake.DescribeEventsWithContextStub != nil {
		return fake.DescribeEventsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeEventsWithContextReturns.result1, fake.describeEventsWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeEventsWithContextCallCount() int {
	fake.describeEventsWithContextMutex.RLock()
	defer fake.describeEventsWithContextMutex.RUnlock()
	return len(fake.describeEventsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEventsWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeEventsInput, []request.Option) {
	fake.describeEventsWithContextMutex.RLock()
	defer fake.describeEventsWithContextMutex.RUnlock()
	return fake.describeEventsWithContextArgsForCall[i].arg1, fake.describeEventsWithContextArgsForCall[i].arg2, fake.describeEventsWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DescribeEventsWithContextReturns(result1 *elasticache.DescribeEventsOutput, result2 error) {
	fake.DescribeEventsWithContextStub = nil
	fake.describeEventsWithContextReturns = struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEventsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeEventsOutput, result2 error) {
	fake.DescribeEventsWithContextStub = nil
	if fake.describeEventsWithContextReturnsOnCall == nil {
		fake.describeEventsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeEventsOutput
			result2 error
		})
	}
	fake.describeEventsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeEventsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEventsRequest(arg1 *elasticache.DescribeEventsInput) (*request.Request, *elasticache.DescribeEventsOutput) {
	fake.describeEventsRequestMutex.Lock()
	ret, specificReturn := fake.describeEventsRequestReturnsOnCall[len(fake.describeEventsRequestArgsForCall)]
	fake.describeEventsRequestArgsForCall = append(fake.describeEventsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeEventsInput
	}{arg1})
	fake.recordInvocation("DescribeEventsRequest", []interface{}{arg1})
	fake.describeEventsRequestMutex.Unlock()
	if fake.DescribeEventsRequestStub != nil {
		return fake.DescribeEventsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeEventsRequestReturns.result1, fake.describeEventsRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeEventsRequestCallCount() int {
	fake.describeEventsRequestMutex.RLock()
	defer fake.describeEventsRequestMutex.RUnlock()
	return len(fake.describeEventsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEventsRequestArgsForCall(i int) *elasticache.DescribeEventsInput {
	fake.describeEventsRequestMutex.RLock()
	defer fake.describeEventsRequestMutex.RUnlock()
	return fake.describeEventsRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeEventsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeEventsOutput) {
	fake.DescribeEventsRequestStub = nil
	fake.describeEventsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeEventsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEventsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeEventsOutput) {
	fake.DescribeEventsRequestStub = nil
	if fake.describeEventsRequestReturnsOnCall == nil {
		fake.describeEventsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeEventsOutput
		})
	}
	fake.describeEventsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeEventsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeEventsPages(arg1 *elasticache.DescribeEventsInput, arg2 func(*elasticache.DescribeEventsOutput, bool) bool) error {
	fake.describeEventsPagesMutex.Lock()
	ret, specificReturn := fake.describeEventsPagesReturnsOnCall[len(fake.describeEventsPagesArgsForCall)]
	fake.describeEventsPagesArgsForCall = append(fake.describeEventsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeEventsInput
		arg2 func(*elasticache.DescribeEventsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeEventsPages", []interface{}{arg1, arg2})
	fake.describeEventsPagesMutex.Unlock()
	if fake.DescribeEventsPagesStub != nil {
		return fake.DescribeEventsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeEventsPagesReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesCallCount() int {
	fake.describeEventsPagesMutex.RLock()
	defer fake.describeEventsPagesMutex.RUnlock()
	return len(fake.describeEventsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesArgsForCall(i int) (*elasticache.DescribeEventsInput, func(*elasticache.DescribeEventsOutput, bool) bool) {
	fake.describeEventsPagesMutex.RLock()
	defer fake.describeEventsPagesMutex.RUnlock()
	return fake.describeEventsPagesArgsForCall[i].arg1, fake.describeEventsPagesArgsForCall[i].arg2
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesReturns(result1 error) {
	fake.DescribeEventsPagesStub = nil
	fake.describeEventsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeEventsPagesStub = nil
	if fake.describeEventsPagesReturnsOnCall == nil {
		fake.describeEventsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeEventsInput, arg3 func(*elasticache.DescribeEventsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeEventsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeEventsPagesWithContextReturnsOnCall[len(fake.describeEventsPagesWithContextArgsForCall)]
	fake.describeEventsPagesWithContextArgsForCall = append(fake.describeEventsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeEventsInput
		arg3 func(*elasticache.DescribeEventsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeEventsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeEventsPagesWithContextMutex.Unlock()
	if fake.DescribeEventsPagesWithContextStub != nil {
		return fake.DescribeEventsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeEventsPagesWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesWithContextCallCount() int {
	fake.describeEventsPagesWithContextMutex.RLock()
	defer fake.describeEventsPagesWithContextMutex.RUnlock()
	return len(fake.describeEventsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeEventsInput, func(*elasticache.DescribeEventsOutput, bool) bool, []request.Option) {
	fake.describeEventsPagesWithContextMutex.RLock()
	defer fake.describeEventsPagesWithContextMutex.RUnlock()
	return fake.describeEventsPagesWithContextArgsForCall[i].arg1, fake.describeEventsPagesWithContextArgsForCall[i].arg2, fake.describeEventsPagesWithContextArgsForCall[i].arg3, fake.describeEventsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesWithContextReturns(result1 error) {
	fake.DescribeEventsPagesWithContextStub = nil
	fake.describeEventsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeEventsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeEventsPagesWithContextStub = nil
	if fake.describeEventsPagesWithContextReturnsOnCall == nil {
		fake.describeEventsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeEventsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroups(arg1 *elasticache.DescribeReplicationGroupsInput) (*elasticache.DescribeReplicationGroupsOutput, error) {
	fake.describeReplicationGroupsMutex.Lock()
	ret, specificReturn := fake.describeReplicationGroupsReturnsOnCall[len(fake.describeReplicationGroupsArgsForCall)]
	fake.describeReplicationGroupsArgsForCall = append(fake.describeReplicationGroupsArgsForCall, struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeReplicationGroups", []interface{}{arg1})
	fake.describeReplicationGroupsMutex.Unlock()
	if fake.DescribeReplicationGroupsStub != nil {
		return fake.DescribeReplicationGroupsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeReplicationGroupsReturns.result1, fake.describeReplicationGroupsReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsCallCount() int {
	fake.describeReplicationGroupsMutex.RLock()
	defer fake.describeReplicationGroupsMutex.RUnlock()
	return len(fake.describeReplicationGroupsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsArgsForCall(i int) *elasticache.DescribeReplicationGroupsInput {
	fake.describeReplicationGroupsMutex.RLock()
	defer fake.describeReplicationGroupsMutex.RUnlock()
	return fake.describeReplicationGroupsArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsReturns(result1 *elasticache.DescribeReplicationGroupsOutput, result2 error) {
	fake.DescribeReplicationGroupsStub = nil
	fake.describeReplicationGroupsReturns = struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsReturnsOnCall(i int, result1 *elasticache.DescribeReplicationGroupsOutput, result2 error) {
	fake.DescribeReplicationGroupsStub = nil
	if fake.describeReplicationGroupsReturnsOnCall == nil {
		fake.describeReplicationGroupsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReplicationGroupsOutput
			result2 error
		})
	}
	fake.describeReplicationGroupsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsWithContext(arg1 aws.Context, arg2 *elasticache.DescribeReplicationGroupsInput, arg3 ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error) {
	fake.describeReplicationGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeReplicationGroupsWithContextReturnsOnCall[len(fake.describeReplicationGroupsWithContextArgsForCall)]
	fake.describeReplicationGroupsWithContextArgsForCall = append(fake.describeReplicationGroupsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeReplicationGroupsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReplicationGroupsWithContextMutex.Unlock()
	if fake.DescribeReplicationGroupsWithContextStub != nil {
		return fake.DescribeReplicationGroupsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeReplicationGroupsWithContextReturns.result1, fake.describeReplicationGroupsWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsWithContextCallCount() int {
	fake.describeReplicationGroupsWithContextMutex.RLock()
	defer fake.describeReplicationGroupsWithContextMutex.RUnlock()
	return len(fake.describeReplicationGroupsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeReplicationGroupsInput, []request.Option) {
	fake.describeReplicationGroupsWithContextMutex.RLock()
	defer fake.describeReplicationGroupsWithContextMutex.RUnlock()
	return fake.describeReplicationGroupsWithContextArgsForCall[i].arg1, fake.describeReplicationGroupsWithContextArgsForCall[i].arg2, fake.describeReplicationGroupsWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsWithContextReturns(result1 *elasticache.DescribeReplicationGroupsOutput, result2 error) {
	fake.DescribeReplicationGroupsWithContextStub = nil
	fake.describeReplicationGroupsWithContextReturns = struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeReplicationGroupsOutput, result2 error) {
	fake.DescribeReplicationGroupsWithContextStub = nil
	if fake.describeReplicationGroupsWithContextReturnsOnCall == nil {
		fake.describeReplicationGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReplicationGroupsOutput
			result2 error
		})
	}
	fake.describeReplicationGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsRequest(arg1 *elasticache.DescribeReplicationGroupsInput) (*request.Request, *elasticache.DescribeReplicationGroupsOutput) {
	fake.describeReplicationGroupsRequestMutex.Lock()
	ret, specificReturn := fake.describeReplicationGroupsRequestReturnsOnCall[len(fake.describeReplicationGroupsRequestArgsForCall)]
	fake.describeReplicationGroupsRequestArgsForCall = append(fake.describeReplicationGroupsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}{arg1})
	fake.recordInvocation("DescribeReplicationGroupsRequest", []interface{}{arg1})
	fake.describeReplicationGroupsRequestMutex.Unlock()
	if fake.DescribeReplicationGroupsRequestStub != nil {
		return fake.DescribeReplicationGroupsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeReplicationGroupsRequestReturns.result1, fake.describeReplicationGroupsRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsRequestCallCount() int {
	fake.describeReplicationGroupsRequestMutex.RLock()
	defer fake.describeReplicationGroupsRequestMutex.RUnlock()
	return len(fake.describeReplicationGroupsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsRequestArgsForCall(i int) *elasticache.DescribeReplicationGroupsInput {
	fake.describeReplicationGroupsRequestMutex.RLock()
	defer fake.describeReplicationGroupsRequestMutex.RUnlock()
	return fake.describeReplicationGroupsRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeReplicationGroupsOutput) {
	fake.DescribeReplicationGroupsRequestStub = nil
	fake.describeReplicationGroupsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeReplicationGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeReplicationGroupsOutput) {
	fake.DescribeReplicationGroupsRequestStub = nil
	if fake.describeReplicationGroupsRequestReturnsOnCall == nil {
		fake.describeReplicationGroupsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeReplicationGroupsOutput
		})
	}
	fake.describeReplicationGroupsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeReplicationGroupsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPages(arg1 *elasticache.DescribeReplicationGroupsInput, arg2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) error {
	fake.describeReplicationGroupsPagesMutex.Lock()
	ret, specificReturn := fake.describeReplicationGroupsPagesReturnsOnCall[len(fake.describeReplicationGroupsPagesArgsForCall)]
	fake.describeReplicationGroupsPagesArgsForCall = append(fake.describeReplicationGroupsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
		arg2 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeReplicationGroupsPages", []interface{}{arg1, arg2})
	fake.describeReplicationGroupsPagesMutex.Unlock()
	if fake.DescribeReplicationGroupsPagesStub != nil {
		return fake.DescribeReplicationGroupsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeReplicationGroupsPagesReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesCallCount() int {
	fake.describeReplicationGroupsPagesMutex.RLock()
	defer fake.describeReplicationGroupsPagesMutex.RUnlock()
	return len(fake.describeReplicationGroupsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesArgsForCall(i int) (*elasticache.DescribeReplicationGroupsInput, func(*elasticache.DescribeReplicationGroupsOutput, bool) bool) {
	fake.describeReplicationGroupsPagesMutex.RLock()
	defer fake.describeReplicationGroupsPagesMutex.RUnlock()
	return fake.describeReplicationGroupsPagesArgsForCall[i].arg1, fake.describeReplicationGroupsPagesArgsForCall[i].arg2
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesReturns(result1 error) {
	fake.DescribeReplicationGroupsPagesStub = nil
	fake.describeReplicationGroupsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeReplicationGroupsPagesStub = nil
	if fake.describeReplicationGroupsPagesReturnsOnCall == nil {
		fake.describeReplicationGroupsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReplicationGroupsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeReplicationGroupsInput, arg3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeReplicationGroupsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReplicationGroupsPagesWithContextReturnsOnCall[len(fake.describeReplicationGroupsPagesWithContextArgsForCall)]
	fake.describeReplicationGroupsPagesWithContextArgsForCall = append(fake.describeReplicationGroupsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 func(*elasticache.DescribeReplicationGroupsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeReplicationGroupsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeReplicationGroupsPagesWithContextMutex.Unlock()
	if fake.DescribeReplicationGroupsPagesWithContextStub != nil {
		return fake.DescribeReplicationGroupsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeReplicationGroupsPagesWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesWithContextCallCount() int {
	fake.describeReplicationGroupsPagesWithContextMutex.RLock()
	defer fake.describeReplicationGroupsPagesWithContextMutex.RUnlock()
	return len(fake.describeReplicationGroupsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeReplicationGroupsInput, func(*elasticache.DescribeReplicationGroupsOutput, bool) bool, []request.Option) {
	fake.describeReplicationGroupsPagesWithContextMutex.RLock()
	defer fake.describeReplicationGroupsPagesWithContextMutex.RUnlock()
	return fake.describeReplicationGroupsPagesWithContextArgsForCall[i].arg1, fake.describeReplicationGroupsPagesWithContextArgsForCall[i].arg2, fake.describeReplicationGroupsPagesWithContextArgsForCall[i].arg3, fake.describeReplicationGroupsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesWithContextReturns(result1 error) {
	fake.DescribeReplicationGroupsPagesWithContextStub = nil
	fake.describeReplicationGroupsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReplicationGroupsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeReplicationGroupsPagesWithContextStub = nil
	if fake.describeReplicationGroupsPagesWithContextReturnsOnCall == nil {
		fake.describeReplicationGroupsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReplicationGroupsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodes(arg1 *elasticache.DescribeReservedCacheNodesInput) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	fake.describeReservedCacheNodesMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesReturnsOnCall[len(fake.describeReservedCacheNodesArgsForCall)]
	fake.describeReservedCacheNodesArgsForCall = append(fake.describeReservedCacheNodesArgsForCall, struct {
		arg1 *elasticache.DescribeReservedCacheNodesInput
	}{arg1})
	fake.recordInvocation("DescribeReservedCacheNodes", []interface{}{arg1})
	fake.describeReservedCacheNodesMutex.Unlock()
	if fake.DescribeReservedCacheNodesStub != nil {
		return fake.DescribeReservedCacheNodesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeReservedCacheNodesReturns.result1, fake.describeReservedCacheNodesReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesCallCount() int {
	fake.describeReservedCacheNodesMutex.RLock()
	defer fake.describeReservedCacheNodesMutex.RUnlock()
	return len(fake.describeReservedCacheNodesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesArgsForCall(i int) *elasticache.DescribeReservedCacheNodesInput {
	fake.describeReservedCacheNodesMutex.RLock()
	defer fake.describeReservedCacheNodesMutex.RUnlock()
	return fake.describeReservedCacheNodesArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesReturns(result1 *elasticache.DescribeReservedCacheNodesOutput, result2 error) {
	fake.DescribeReservedCacheNodesStub = nil
	fake.describeReservedCacheNodesReturns = struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesReturnsOnCall(i int, result1 *elasticache.DescribeReservedCacheNodesOutput, result2 error) {
	fake.DescribeReservedCacheNodesStub = nil
	if fake.describeReservedCacheNodesReturnsOnCall == nil {
		fake.describeReservedCacheNodesReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReservedCacheNodesOutput
			result2 error
		})
	}
	fake.describeReservedCacheNodesReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeReservedCacheNodesInput, arg3 ...request.Option) (*elasticache.DescribeReservedCacheNodesOutput, error) {
	fake.describeReservedCacheNodesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesWithContextReturnsOnCall[len(fake.describeReservedCacheNodesWithContextArgsForCall)]
	fake.describeReservedCacheNodesWithContextArgsForCall = append(fake.describeReservedCacheNodesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReservedCacheNodesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeReservedCacheNodesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReservedCacheNodesWithContextMutex.Unlock()
	if fake.DescribeReservedCacheNodesWithContextStub != nil {
		return fake.DescribeReservedCacheNodesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeReservedCacheNodesWithContextReturns.result1, fake.describeReservedCacheNodesWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesWithContextCallCount() int {
	fake.describeReservedCacheNodesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesWithContextMutex.RUnlock()
	return len(fake.describeReservedCacheNodesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeReservedCacheNodesInput, []request.Option) {
	fake.describeReservedCacheNodesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesWithContextMutex.RUnlock()
	return fake.describeReservedCacheNodesWithContextArgsForCall[i].arg1, fake.describeReservedCacheNodesWithContextArgsForCall[i].arg2, fake.describeReservedCacheNodesWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesWithContextReturns(result1 *elasticache.DescribeReservedCacheNodesOutput, result2 error) {
	fake.DescribeReservedCacheNodesWithContextStub = nil
	fake.describeReservedCacheNodesWithContextReturns = struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesWithContextReturnsOnCall(i int, result1 *elasticache.DescribeReservedCacheNodesOutput, result2 error) {
	fake.DescribeReservedCacheNodesWithContextStub = nil
	if fake.describeReservedCacheNodesWithContextReturnsOnCall == nil {
		fake.describeReservedCacheNodesWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReservedCacheNodesOutput
			result2 error
		})
	}
	fake.describeReservedCacheNodesWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReservedCacheNodesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesRequest(arg1 *elasticache.DescribeReservedCacheNodesInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOutput) {
	fake.describeReservedCacheNodesRequestMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesRequestReturnsOnCall[len(fake.describeReservedCacheNodesRequestArgsForCall)]
	fake.describeReservedCacheNodesRequestArgsForCall = append(fake.describeReservedCacheNodesRequestArgsForCall, struct {
		arg1 *elasticache.DescribeReservedCacheNodesInput
	}{arg1})
	fake.recordInvocation("DescribeReservedCacheNodesRequest", []interface{}{arg1})
	fake.describeReservedCacheNodesRequestMutex.Unlock()
	if fake.DescribeReservedCacheNodesRequestStub != nil {
		return fake.DescribeReservedCacheNodesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeReservedCacheNodesRequestReturns.result1, fake.describeReservedCacheNodesRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesRequestCallCount() int {
	fake.describeReservedCacheNodesRequestMutex.RLock()
	defer fake.describeReservedCacheNodesRequestMutex.RUnlock()
	return len(fake.describeReservedCacheNodesRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesRequestArgsForCall(i int) *elasticache.DescribeReservedCacheNodesInput {
	fake.describeReservedCacheNodesRequestMutex.RLock()
	defer fake.describeReservedCacheNodesRequestMutex.RUnlock()
	return fake.describeReservedCacheNodesRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesRequestReturns(result1 *request.Request, result2 *elasticache.DescribeReservedCacheNodesOutput) {
	fake.DescribeReservedCacheNodesRequestStub = nil
	fake.describeReservedCacheNodesRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeReservedCacheNodesOutput) {
	fake.DescribeReservedCacheNodesRequestStub = nil
	if fake.describeReservedCacheNodesRequestReturnsOnCall == nil {
		fake.describeReservedCacheNodesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeReservedCacheNodesOutput
		})
	}
	fake.describeReservedCacheNodesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPages(arg1 *elasticache.DescribeReservedCacheNodesInput, arg2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) error {
	fake.describeReservedCacheNodesPagesMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesPagesReturnsOnCall[len(fake.describeReservedCacheNodesPagesArgsForCall)]
	fake.describeReservedCacheNodesPagesArgsForCall = append(fake.describeReservedCacheNodesPagesArgsForCall, struct {
		arg1 *elasticache.DescribeReservedCacheNodesInput
		arg2 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeReservedCacheNodesPages", []interface{}{arg1, arg2})
	fake.describeReservedCacheNodesPagesMutex.Unlock()
	if fake.DescribeReservedCacheNodesPagesStub != nil {
		return fake.DescribeReservedCacheNodesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeReservedCacheNodesPagesReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesCallCount() int {
	fake.describeReservedCacheNodesPagesMutex.RLock()
	defer fake.describeReservedCacheNodesPagesMutex.RUnlock()
	return len(fake.describeReservedCacheNodesPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesArgsForCall(i int) (*elasticache.DescribeReservedCacheNodesInput, func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool) {
	fake.describeReservedCacheNodesPagesMutex.RLock()
	defer fake.describeReservedCacheNodesPagesMutex.RUnlock()
	return fake.describeReservedCacheNodesPagesArgsForCall[i].arg1, fake.describeReservedCacheNodesPagesArgsForCall[i].arg2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesReturns(result1 error) {
	fake.DescribeReservedCacheNodesPagesStub = nil
	fake.describeReservedCacheNodesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeReservedCacheNodesPagesStub = nil
	if fake.describeReservedCacheNodesPagesReturnsOnCall == nil {
		fake.describeReservedCacheNodesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedCacheNodesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeReservedCacheNodesInput, arg3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeReservedCacheNodesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesPagesWithContextReturnsOnCall[len(fake.describeReservedCacheNodesPagesWithContextArgsForCall)]
	fake.describeReservedCacheNodesPagesWithContextArgsForCall = append(fake.describeReservedCacheNodesPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReservedCacheNodesInput
		arg3 func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeReservedCacheNodesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeReservedCacheNodesPagesWithContextMutex.Unlock()
	if fake.DescribeReservedCacheNodesPagesWithContextStub != nil {
		return fake.DescribeReservedCacheNodesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeReservedCacheNodesPagesWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesWithContextCallCount() int {
	fake.describeReservedCacheNodesPagesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesPagesWithContextMutex.RUnlock()
	return len(fake.describeReservedCacheNodesPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeReservedCacheNodesInput, func(*elasticache.DescribeReservedCacheNodesOutput, bool) bool, []request.Option) {
	fake.describeReservedCacheNodesPagesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesPagesWithContextMutex.RUnlock()
	return fake.describeReservedCacheNodesPagesWithContextArgsForCall[i].arg1, fake.describeReservedCacheNodesPagesWithContextArgsForCall[i].arg2, fake.describeReservedCacheNodesPagesWithContextArgsForCall[i].arg3, fake.describeReservedCacheNodesPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesWithContextReturns(result1 error) {
	fake.DescribeReservedCacheNodesPagesWithContextStub = nil
	fake.describeReservedCacheNodesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeReservedCacheNodesPagesWithContextStub = nil
	if fake.describeReservedCacheNodesPagesWithContextReturnsOnCall == nil {
		fake.describeReservedCacheNodesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedCacheNodesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferings(arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	fake.describeReservedCacheNodesOfferingsMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesOfferingsReturnsOnCall[len(fake.describeReservedCacheNodesOfferingsArgsForCall)]
	fake.describeReservedCacheNodesOfferingsArgsForCall = append(fake.describeReservedCacheNodesOfferingsArgsForCall, struct {
		arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	}{arg1})
	fake.recordInvocation("DescribeReservedCacheNodesOfferings", []interface{}{arg1})
	fake.describeReservedCacheNodesOfferingsMutex.Unlock()
	if fake.DescribeReservedCacheNodesOfferingsStub != nil {
		return fake.DescribeReservedCacheNodesOfferingsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeReservedCacheNodesOfferingsReturns.result1, fake.describeReservedCacheNodesOfferingsReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsCallCount() int {
	fake.describeReservedCacheNodesOfferingsMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsMutex.RUnlock()
	return len(fake.describeReservedCacheNodesOfferingsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsArgsForCall(i int) *elasticache.DescribeReservedCacheNodesOfferingsInput {
	fake.describeReservedCacheNodesOfferingsMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsMutex.RUnlock()
	return fake.describeReservedCacheNodesOfferingsArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsReturns(result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput, result2 error) {
	fake.DescribeReservedCacheNodesOfferingsStub = nil
	fake.describeReservedCacheNodesOfferingsReturns = struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsReturnsOnCall(i int, result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput, result2 error) {
	fake.DescribeReservedCacheNodesOfferingsStub = nil
	if fake.describeReservedCacheNodesOfferingsReturnsOnCall == nil {
		fake.describeReservedCacheNodesOfferingsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
			result2 error
		})
	}
	fake.describeReservedCacheNodesOfferingsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsWithContext(arg1 aws.Context, arg2 *elasticache.DescribeReservedCacheNodesOfferingsInput, arg3 ...request.Option) (*elasticache.DescribeReservedCacheNodesOfferingsOutput, error) {
	fake.describeReservedCacheNodesOfferingsWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesOfferingsWithContextReturnsOnCall[len(fake.describeReservedCacheNodesOfferingsWithContextArgsForCall)]
	fake.describeReservedCacheNodesOfferingsWithContextArgsForCall = append(fake.describeReservedCacheNodesOfferingsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReservedCacheNodesOfferingsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeReservedCacheNodesOfferingsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeReservedCacheNodesOfferingsWithContextMutex.Unlock()
	if fake.DescribeReservedCacheNodesOfferingsWithContextStub != nil {
		return fake.DescribeReservedCacheNodesOfferingsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeReservedCacheNodesOfferingsWithContextReturns.result1, fake.describeReservedCacheNodesOfferingsWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsWithContextCallCount() int {
	fake.describeReservedCacheNodesOfferingsWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsWithContextMutex.RUnlock()
	return len(fake.describeReservedCacheNodesOfferingsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeReservedCacheNodesOfferingsInput, []request.Option) {
	fake.describeReservedCacheNodesOfferingsWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsWithContextMutex.RUnlock()
	return fake.describeReservedCacheNodesOfferingsWithContextArgsForCall[i].arg1, fake.describeReservedCacheNodesOfferingsWithContextArgsForCall[i].arg2, fake.describeReservedCacheNodesOfferingsWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsWithContextReturns(result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput, result2 error) {
	fake.DescribeReservedCacheNodesOfferingsWithContextStub = nil
	fake.describeReservedCacheNodesOfferingsWithContextReturns = struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput, result2 error) {
	fake.DescribeReservedCacheNodesOfferingsWithContextStub = nil
	if fake.describeReservedCacheNodesOfferingsWithContextReturnsOnCall == nil {
		fake.describeReservedCacheNodesOfferingsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
			result2 error
		})
	}
	fake.describeReservedCacheNodesOfferingsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsRequest(arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput) (*request.Request, *elasticache.DescribeReservedCacheNodesOfferingsOutput) {
	fake.describeReservedCacheNodesOfferingsRequestMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesOfferingsRequestReturnsOnCall[len(fake.describeReservedCacheNodesOfferingsRequestArgsForCall)]
	fake.describeReservedCacheNodesOfferingsRequestArgsForCall = append(fake.describeReservedCacheNodesOfferingsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput
	}{arg1})
	fake.recordInvocation("DescribeReservedCacheNodesOfferingsRequest", []interface{}{arg1})
	fake.describeReservedCacheNodesOfferingsRequestMutex.Unlock()
	if fake.DescribeReservedCacheNodesOfferingsRequestStub != nil {
		return fake.DescribeReservedCacheNodesOfferingsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeReservedCacheNodesOfferingsRequestReturns.result1, fake.describeReservedCacheNodesOfferingsRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsRequestCallCount() int {
	fake.describeReservedCacheNodesOfferingsRequestMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsRequestMutex.RUnlock()
	return len(fake.describeReservedCacheNodesOfferingsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsRequestArgsForCall(i int) *elasticache.DescribeReservedCacheNodesOfferingsInput {
	fake.describeReservedCacheNodesOfferingsRequestMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsRequestMutex.RUnlock()
	return fake.describeReservedCacheNodesOfferingsRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput) {
	fake.DescribeReservedCacheNodesOfferingsRequestStub = nil
	fake.describeReservedCacheNodesOfferingsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput) {
	fake.DescribeReservedCacheNodesOfferingsRequestStub = nil
	if fake.describeReservedCacheNodesOfferingsRequestReturnsOnCall == nil {
		fake.describeReservedCacheNodesOfferingsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput
		})
	}
	fake.describeReservedCacheNodesOfferingsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeReservedCacheNodesOfferingsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPages(arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput, arg2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) error {
	fake.describeReservedCacheNodesOfferingsPagesMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesOfferingsPagesReturnsOnCall[len(fake.describeReservedCacheNodesOfferingsPagesArgsForCall)]
	fake.describeReservedCacheNodesOfferingsPagesArgsForCall = append(fake.describeReservedCacheNodesOfferingsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeReservedCacheNodesOfferingsInput
		arg2 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeReservedCacheNodesOfferingsPages", []interface{}{arg1, arg2})
	fake.describeReservedCacheNodesOfferingsPagesMutex.Unlock()
	if fake.DescribeReservedCacheNodesOfferingsPagesStub != nil {
		return fake.DescribeReservedCacheNodesOfferingsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeReservedCacheNodesOfferingsPagesReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesCallCount() int {
	fake.describeReservedCacheNodesOfferingsPagesMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsPagesMutex.RUnlock()
	return len(fake.describeReservedCacheNodesOfferingsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesArgsForCall(i int) (*elasticache.DescribeReservedCacheNodesOfferingsInput, func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool) {
	fake.describeReservedCacheNodesOfferingsPagesMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsPagesMutex.RUnlock()
	return fake.describeReservedCacheNodesOfferingsPagesArgsForCall[i].arg1, fake.describeReservedCacheNodesOfferingsPagesArgsForCall[i].arg2
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesReturns(result1 error) {
	fake.DescribeReservedCacheNodesOfferingsPagesStub = nil
	fake.describeReservedCacheNodesOfferingsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeReservedCacheNodesOfferingsPagesStub = nil
	if fake.describeReservedCacheNodesOfferingsPagesReturnsOnCall == nil {
		fake.describeReservedCacheNodesOfferingsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedCacheNodesOfferingsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeReservedCacheNodesOfferingsInput, arg3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeReservedCacheNodesOfferingsPagesWithContextReturnsOnCall[len(fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall)]
	fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall = append(fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReservedCacheNodesOfferingsInput
		arg3 func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeReservedCacheNodesOfferingsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.Unlock()
	if fake.DescribeReservedCacheNodesOfferingsPagesWithContextStub != nil {
		return fake.DescribeReservedCacheNodesOfferingsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeReservedCacheNodesOfferingsPagesWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesWithContextCallCount() int {
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.RUnlock()
	return len(fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeReservedCacheNodesOfferingsInput, func(*elasticache.DescribeReservedCacheNodesOfferingsOutput, bool) bool, []request.Option) {
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.RUnlock()
	return fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall[i].arg1, fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall[i].arg2, fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall[i].arg3, fake.describeReservedCacheNodesOfferingsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesWithContextReturns(result1 error) {
	fake.DescribeReservedCacheNodesOfferingsPagesWithContextStub = nil
	fake.describeReservedCacheNodesOfferingsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeReservedCacheNodesOfferingsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeReservedCacheNodesOfferingsPagesWithContextStub = nil
	if fake.describeReservedCacheNodesOfferingsPagesWithContextReturnsOnCall == nil {
		fake.describeReservedCacheNodesOfferingsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeReservedCacheNodesOfferingsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshots(arg1 *elasticache.DescribeSnapshotsInput) (*elasticache.DescribeSnapshotsOutput, error) {
	fake.describeSnapshotsMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsReturnsOnCall[len(fake.describeSnapshotsArgsForCall)]
	fake.describeSnapshotsArgsForCall = append(fake.describeSnapshotsArgsForCall, struct {
		arg1 *elasticache.DescribeSnapshotsInput
	}{arg1})
	fake.recordInvocation("DescribeSnapshots", []interface{}{arg1})
	fake.describeSnapshotsMutex.Unlock()
	if fake.DescribeSnapshotsStub != nil {
		return fake.DescribeSnapshotsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeSnapshotsReturns.result1, fake.describeSnapshotsReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsCallCount() int {
	fake.describeSnapshotsMutex.RLock()
	defer fake.describeSnapshotsMutex.RUnlock()
	return len(fake.describeSnapshotsArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsArgsForCall(i int) *elasticache.DescribeSnapshotsInput {
	fake.describeSnapshotsMutex.RLock()
	defer fake.describeSnapshotsMutex.RUnlock()
	return fake.describeSnapshotsArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsReturns(result1 *elasticache.DescribeSnapshotsOutput, result2 error) {
	fake.DescribeSnapshotsStub = nil
	fake.describeSnapshotsReturns = struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsReturnsOnCall(i int, result1 *elasticache.DescribeSnapshotsOutput, result2 error) {
	fake.DescribeSnapshotsStub = nil
	if fake.describeSnapshotsReturnsOnCall == nil {
		fake.describeSnapshotsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeSnapshotsOutput
			result2 error
		})
	}
	fake.describeSnapshotsReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsWithContext(arg1 aws.Context, arg2 *elasticache.DescribeSnapshotsInput, arg3 ...request.Option) (*elasticache.DescribeSnapshotsOutput, error) {
	fake.describeSnapshotsWithContextMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsWithContextReturnsOnCall[len(fake.describeSnapshotsWithContextArgsForCall)]
	fake.describeSnapshotsWithContextArgsForCall = append(fake.describeSnapshotsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeSnapshotsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeSnapshotsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeSnapshotsWithContextMutex.Unlock()
	if fake.DescribeSnapshotsWithContextStub != nil {
		return fake.DescribeSnapshotsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeSnapshotsWithContextReturns.result1, fake.describeSnapshotsWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsWithContextCallCount() int {
	fake.describeSnapshotsWithContextMutex.RLock()
	defer fake.describeSnapshotsWithContextMutex.RUnlock()
	return len(fake.describeSnapshotsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeSnapshotsInput, []request.Option) {
	fake.describeSnapshotsWithContextMutex.RLock()
	defer fake.describeSnapshotsWithContextMutex.RUnlock()
	return fake.describeSnapshotsWithContextArgsForCall[i].arg1, fake.describeSnapshotsWithContextArgsForCall[i].arg2, fake.describeSnapshotsWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsWithContextReturns(result1 *elasticache.DescribeSnapshotsOutput, result2 error) {
	fake.DescribeSnapshotsWithContextStub = nil
	fake.describeSnapshotsWithContextReturns = struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeSnapshotsOutput, result2 error) {
	fake.DescribeSnapshotsWithContextStub = nil
	if fake.describeSnapshotsWithContextReturnsOnCall == nil {
		fake.describeSnapshotsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeSnapshotsOutput
			result2 error
		})
	}
	fake.describeSnapshotsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeSnapshotsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsRequest(arg1 *elasticache.DescribeSnapshotsInput) (*request.Request, *elasticache.DescribeSnapshotsOutput) {
	fake.describeSnapshotsRequestMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsRequestReturnsOnCall[len(fake.describeSnapshotsRequestArgsForCall)]
	fake.describeSnapshotsRequestArgsForCall = append(fake.describeSnapshotsRequestArgsForCall, struct {
		arg1 *elasticache.DescribeSnapshotsInput
	}{arg1})
	fake.recordInvocation("DescribeSnapshotsRequest", []interface{}{arg1})
	fake.describeSnapshotsRequestMutex.Unlock()
	if fake.DescribeSnapshotsRequestStub != nil {
		return fake.DescribeSnapshotsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeSnapshotsRequestReturns.result1, fake.describeSnapshotsRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsRequestCallCount() int {
	fake.describeSnapshotsRequestMutex.RLock()
	defer fake.describeSnapshotsRequestMutex.RUnlock()
	return len(fake.describeSnapshotsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsRequestArgsForCall(i int) *elasticache.DescribeSnapshotsInput {
	fake.describeSnapshotsRequestMutex.RLock()
	defer fake.describeSnapshotsRequestMutex.RUnlock()
	return fake.describeSnapshotsRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsRequestReturns(result1 *request.Request, result2 *elasticache.DescribeSnapshotsOutput) {
	fake.DescribeSnapshotsRequestStub = nil
	fake.describeSnapshotsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.DescribeSnapshotsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.DescribeSnapshotsOutput) {
	fake.DescribeSnapshotsRequestStub = nil
	if fake.describeSnapshotsRequestReturnsOnCall == nil {
		fake.describeSnapshotsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.DescribeSnapshotsOutput
		})
	}
	fake.describeSnapshotsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.DescribeSnapshotsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPages(arg1 *elasticache.DescribeSnapshotsInput, arg2 func(*elasticache.DescribeSnapshotsOutput, bool) bool) error {
	fake.describeSnapshotsPagesMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsPagesReturnsOnCall[len(fake.describeSnapshotsPagesArgsForCall)]
	fake.describeSnapshotsPagesArgsForCall = append(fake.describeSnapshotsPagesArgsForCall, struct {
		arg1 *elasticache.DescribeSnapshotsInput
		arg2 func(*elasticache.DescribeSnapshotsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeSnapshotsPages", []interface{}{arg1, arg2})
	fake.describeSnapshotsPagesMutex.Unlock()
	if fake.DescribeSnapshotsPagesStub != nil {
		return fake.DescribeSnapshotsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeSnapshotsPagesReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesCallCount() int {
	fake.describeSnapshotsPagesMutex.RLock()
	defer fake.describeSnapshotsPagesMutex.RUnlock()
	return len(fake.describeSnapshotsPagesArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesArgsForCall(i int) (*elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool) {
	fake.describeSnapshotsPagesMutex.RLock()
	defer fake.describeSnapshotsPagesMutex.RUnlock()
	return fake.describeSnapshotsPagesArgsForCall[i].arg1, fake.describeSnapshotsPagesArgsForCall[i].arg2
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesReturns(result1 error) {
	fake.DescribeSnapshotsPagesStub = nil
	fake.describeSnapshotsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesReturnsOnCall(i int, result1 error) {
	fake.DescribeSnapshotsPagesStub = nil
	if fake.describeSnapshotsPagesReturnsOnCall == nil {
		fake.describeSnapshotsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSnapshotsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesWithContext(arg1 aws.Context, arg2 *elasticache.DescribeSnapshotsInput, arg3 func(*elasticache.DescribeSnapshotsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsPagesWithContextReturnsOnCall[len(fake.describeSnapshotsPagesWithContextArgsForCall)]
	fake.describeSnapshotsPagesWithContextArgsForCall = append(fake.describeSnapshotsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeSnapshotsInput
		arg3 func(*elasticache.DescribeSnapshotsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeSnapshotsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeSnapshotsPagesWithContextMutex.Unlock()
	if fake.DescribeSnapshotsPagesWithContextStub != nil {
		return fake.DescribeSnapshotsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeSnapshotsPagesWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesWithContextCallCount() int {
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	return len(fake.describeSnapshotsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool, []request.Option) {
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	return fake.describeSnapshotsPagesWithContextArgsForCall[i].arg1, fake.describeSnapshotsPagesWithContextArgsForCall[i].arg2, fake.describeSnapshotsPagesWithContextArgsForCall[i].arg3, fake.describeSnapshotsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesWithContextReturns(result1 error) {
	fake.DescribeSnapshotsPagesWithContextStub = nil
	fake.describeSnapshotsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) DescribeSnapshotsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeSnapshotsPagesWithContextStub = nil
	if fake.describeSnapshotsPagesWithContextReturnsOnCall == nil {
		fake.describeSnapshotsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSnapshotsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModifications(arg1 *elasticache.ListAllowedNodeTypeModificationsInput) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	fake.listAllowedNodeTypeModificationsMutex.Lock()
	ret, specificReturn := fake.listAllowedNodeTypeModificationsReturnsOnCall[len(fake.listAllowedNodeTypeModificationsArgsForCall)]
	fake.listAllowedNodeTypeModificationsArgsForCall = append(fake.listAllowedNodeTypeModificationsArgsForCall, struct {
		arg1 *elasticache.ListAllowedNodeTypeModificationsInput
	}{arg1})
	fake.recordInvocation("ListAllowedNodeTypeModifications", []interface{}{arg1})
	fake.listAllowedNodeTypeModificationsMutex.Unlock()
	if fake.ListAllowedNodeTypeModificationsStub != nil {
		return fake.ListAllowedNodeTypeModificationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listAllowedNodeTypeModificationsReturns.result1, fake.listAllowedNodeTypeModificationsReturns.result2
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsCallCount() int {
	fake.listAllowedNodeTypeModificationsMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsMutex.RUnlock()
	return len(fake.listAllowedNodeTypeModificationsArgsForCall)
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsArgsForCall(i int) *elasticache.ListAllowedNodeTypeModificationsInput {
	fake.listAllowedNodeTypeModificationsMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsMutex.RUnlock()
	return fake.listAllowedNodeTypeModificationsArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsReturns(result1 *elasticache.ListAllowedNodeTypeModificationsOutput, result2 error) {
	fake.ListAllowedNodeTypeModificationsStub = nil
	fake.listAllowedNodeTypeModificationsReturns = struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsReturnsOnCall(i int, result1 *elasticache.ListAllowedNodeTypeModificationsOutput, result2 error) {
	fake.ListAllowedNodeTypeModificationsStub = nil
	if fake.listAllowedNodeTypeModificationsReturnsOnCall == nil {
		fake.listAllowedNodeTypeModificationsReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ListAllowedNodeTypeModificationsOutput
			result2 error
		})
	}
	fake.listAllowedNodeTypeModificationsReturnsOnCall[i] = struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsWithContext(arg1 aws.Context, arg2 *elasticache.ListAllowedNodeTypeModificationsInput, arg3 ...request.Option) (*elasticache.ListAllowedNodeTypeModificationsOutput, error) {
	fake.listAllowedNodeTypeModificationsWithContextMutex.Lock()
	ret, specificReturn := fake.listAllowedNodeTypeModificationsWithContextReturnsOnCall[len(fake.listAllowedNodeTypeModificationsWithContextArgsForCall)]
	fake.listAllowedNodeTypeModificationsWithContextArgsForCall = append(fake.listAllowedNodeTypeModificationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.ListAllowedNodeTypeModificationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListAllowedNodeTypeModificationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAllowedNodeTypeModificationsWithContextMutex.Unlock()
	if fake.ListAllowedNodeTypeModificationsWithContextStub != nil {
		return fake.ListAllowedNodeTypeModificationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listAllowedNodeTypeModificationsWithContextReturns.result1, fake.listAllowedNodeTypeModificationsWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsWithContextCallCount() int {
	fake.listAllowedNodeTypeModificationsWithContextMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsWithContextMutex.RUnlock()
	return len(fake.listAllowedNodeTypeModificationsWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsWithContextArgsForCall(i int) (aws.Context, *elasticache.ListAllowedNodeTypeModificationsInput, []request.Option) {
	fake.listAllowedNodeTypeModificationsWithContextMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsWithContextMutex.RUnlock()
	return fake.listAllowedNodeTypeModificationsWithContextArgsForCall[i].arg1, fake.listAllowedNodeTypeModificationsWithContextArgsForCall[i].arg2, fake.listAllowedNodeTypeModificationsWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsWithContextReturns(result1 *elasticache.ListAllowedNodeTypeModificationsOutput, result2 error) {
	fake.ListAllowedNodeTypeModificationsWithContextStub = nil
	fake.listAllowedNodeTypeModificationsWithContextReturns = struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsWithContextReturnsOnCall(i int, result1 *elasticache.ListAllowedNodeTypeModificationsOutput, result2 error) {
	fake.ListAllowedNodeTypeModificationsWithContextStub = nil
	if fake.listAllowedNodeTypeModificationsWithContextReturnsOnCall == nil {
		fake.listAllowedNodeTypeModificationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ListAllowedNodeTypeModificationsOutput
			result2 error
		})
	}
	fake.listAllowedNodeTypeModificationsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.ListAllowedNodeTypeModificationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsRequest(arg1 *elasticache.ListAllowedNodeTypeModificationsInput) (*request.Request, *elasticache.ListAllowedNodeTypeModificationsOutput) {
	fake.listAllowedNodeTypeModificationsRequestMutex.Lock()
	ret, specificReturn := fake.listAllowedNodeTypeModificationsRequestReturnsOnCall[len(fake.listAllowedNodeTypeModificationsRequestArgsForCall)]
	fake.listAllowedNodeTypeModificationsRequestArgsForCall = append(fake.listAllowedNodeTypeModificationsRequestArgsForCall, struct {
		arg1 *elasticache.ListAllowedNodeTypeModificationsInput
	}{arg1})
	fake.recordInvocation("ListAllowedNodeTypeModificationsRequest", []interface{}{arg1})
	fake.listAllowedNodeTypeModificationsRequestMutex.Unlock()
	if fake.ListAllowedNodeTypeModificationsRequestStub != nil {
		return fake.ListAllowedNodeTypeModificationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listAllowedNodeTypeModificationsRequestReturns.result1, fake.listAllowedNodeTypeModificationsRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsRequestCallCount() int {
	fake.listAllowedNodeTypeModificationsRequestMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsRequestMutex.RUnlock()
	return len(fake.listAllowedNodeTypeModificationsRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsRequestArgsForCall(i int) *elasticache.ListAllowedNodeTypeModificationsInput {
	fake.listAllowedNodeTypeModificationsRequestMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsRequestMutex.RUnlock()
	return fake.listAllowedNodeTypeModificationsRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsRequestReturns(result1 *request.Request, result2 *elasticache.ListAllowedNodeTypeModificationsOutput) {
	fake.ListAllowedNodeTypeModificationsRequestStub = nil
	fake.listAllowedNodeTypeModificationsRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.ListAllowedNodeTypeModificationsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListAllowedNodeTypeModificationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.ListAllowedNodeTypeModificationsOutput) {
	fake.ListAllowedNodeTypeModificationsRequestStub = nil
	if fake.listAllowedNodeTypeModificationsRequestReturnsOnCall == nil {
		fake.listAllowedNodeTypeModificationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.ListAllowedNodeTypeModificationsOutput
		})
	}
	fake.listAllowedNodeTypeModificationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.ListAllowedNodeTypeModificationsOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListTagsForResource(arg1 *elasticache.ListTagsForResourceInput) (*elasticache.TagListMessage, error) {
	fake.listTagsForResourceMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceReturnsOnCall[len(fake.listTagsForResourceArgsForCall)]
	fake.listTagsForResourceArgsForCall = append(fake.listTagsForResourceArgsForCall, struct {
		arg1 *elasticache.ListTagsForResourceInput
	}{arg1})
	fake.recordInvocation("ListTagsForResource", []interface{}{arg1})
	fake.listTagsForResourceMutex.Unlock()
	if fake.ListTagsForResourceStub != nil {
		return fake.ListTagsForResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listTagsForResourceReturns.result1, fake.listTagsForResourceReturns.result2
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceCallCount() int {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	return len(fake.listTagsForResourceArgsForCall)
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceArgsForCall(i int) *elasticache.ListTagsForResourceInput {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	return fake.listTagsForResourceArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.ListTagsForResourceStub = nil
	fake.listTagsForResourceReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.ListTagsForResourceStub = nil
	if fake.listTagsForResourceReturnsOnCall == nil {
		fake.listTagsForResourceReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.listTagsForResourceReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceWithContext(arg1 aws.Context, arg2 *elasticache.ListTagsForResourceInput, arg3 ...request.Option) (*elasticache.TagListMessage, error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceWithContextReturnsOnCall[len(fake.listTagsForResourceWithContextArgsForCall)]
	fake.listTagsForResourceWithContextArgsForCall = append(fake.listTagsForResourceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.ListTagsForResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListTagsForResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTagsForResourceWithContextMutex.Unlock()
	if fake.ListTagsForResourceWithContextStub != nil {
		return fake.ListTagsForResourceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listTagsForResourceWithContextReturns.result1, fake.listTagsForResourceWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceWithContextCallCount() int {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return len(fake.listTagsForResourceWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceWithContextArgsForCall(i int) (aws.Context, *elasticache.ListTagsForResourceInput, []request.Option) {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return fake.listTagsForResourceWithContextArgsForCall[i].arg1, fake.listTagsForResourceWithContextArgsForCall[i].arg2, fake.listTagsForResourceWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceWithContextReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.ListTagsForResourceWithContextStub = nil
	fake.listTagsForResourceWithContextReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceWithContextReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.ListTagsForResourceWithContextStub = nil
	if fake.listTagsForResourceWithContextReturnsOnCall == nil {
		fake.listTagsForResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.listTagsForResourceWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceRequest(arg1 *elasticache.ListTagsForResourceInput) (*request.Request, *elasticache.TagListMessage) {
	fake.listTagsForResourceRequestMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceRequestReturnsOnCall[len(fake.listTagsForResourceRequestArgsForCall)]
	fake.listTagsForResourceRequestArgsForCall = append(fake.listTagsForResourceRequestArgsForCall, struct {
		arg1 *elasticache.ListTagsForResourceInput
	}{arg1})
	fake.recordInvocation("ListTagsForResourceRequest", []interface{}{arg1})
	fake.listTagsForResourceRequestMutex.Unlock()
	if fake.ListTagsForResourceRequestStub != nil {
		return fake.ListTagsForResourceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listTagsForResourceRequestReturns.result1, fake.listTagsForResourceRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceRequestCallCount() int {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	return len(fake.listTagsForResourceRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceRequestArgsForCall(i int) *elasticache.ListTagsForResourceInput {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	return fake.listTagsForResourceRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceRequestReturns(result1 *request.Request, result2 *elasticache.TagListMessage) {
	fake.ListTagsForResourceRequestStub = nil
	fake.listTagsForResourceRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ListTagsForResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.TagListMessage) {
	fake.ListTagsForResourceRequestStub = nil
	if fake.listTagsForResourceRequestReturnsOnCall == nil {
		fake.listTagsForResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.TagListMessage
		})
	}
	fake.listTagsForResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheCluster(arg1 *elasticache.ModifyCacheClusterInput) (*elasticache.ModifyCacheClusterOutput, error) {
	fake.modifyCacheClusterMutex.Lock()
	ret, specificReturn := fake.modifyCacheClusterReturnsOnCall[len(fake.modifyCacheClusterArgsForCall)]
	fake.modifyCacheClusterArgsForCall = append(fake.modifyCacheClusterArgsForCall, struct {
		arg1 *elasticache.ModifyCacheClusterInput
	}{arg1})
	fake.recordInvocation("ModifyCacheCluster", []interface{}{arg1})
	fake.modifyCacheClusterMutex.Unlock()
	if fake.ModifyCacheClusterStub != nil {
		return fake.ModifyCacheClusterStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyCacheClusterReturns.result1, fake.modifyCacheClusterReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterCallCount() int {
	fake.modifyCacheClusterMutex.RLock()
	defer fake.modifyCacheClusterMutex.RUnlock()
	return len(fake.modifyCacheClusterArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterArgsForCall(i int) *elasticache.ModifyCacheClusterInput {
	fake.modifyCacheClusterMutex.RLock()
	defer fake.modifyCacheClusterMutex.RUnlock()
	return fake.modifyCacheClusterArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterReturns(result1 *elasticache.ModifyCacheClusterOutput, result2 error) {
	fake.ModifyCacheClusterStub = nil
	fake.modifyCacheClusterReturns = struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterReturnsOnCall(i int, result1 *elasticache.ModifyCacheClusterOutput, result2 error) {
	fake.ModifyCacheClusterStub = nil
	if fake.modifyCacheClusterReturnsOnCall == nil {
		fake.modifyCacheClusterReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyCacheClusterOutput
			result2 error
		})
	}
	fake.modifyCacheClusterReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterWithContext(arg1 aws.Context, arg2 *elasticache.ModifyCacheClusterInput, arg3 ...request.Option) (*elasticache.ModifyCacheClusterOutput, error) {
	fake.modifyCacheClusterWithContextMutex.Lock()
	ret, specificReturn := fake.modifyCacheClusterWithContextReturnsOnCall[len(fake.modifyCacheClusterWithContextArgsForCall)]
	fake.modifyCacheClusterWithContextArgsForCall = append(fake.modifyCacheClusterWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.ModifyCacheClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyCacheClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyCacheClusterWithContextMutex.Unlock()
	if fake.ModifyCacheClusterWithContextStub != nil {
		return fake.ModifyCacheClusterWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyCacheClusterWithContextReturns.result1, fake.modifyCacheClusterWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterWithContextCallCount() int {
	fake.modifyCacheClusterWithContextMutex.RLock()
	defer fake.modifyCacheClusterWithContextMutex.RUnlock()
	return len(fake.modifyCacheClusterWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterWithContextArgsForCall(i int) (aws.Context, *elasticache.ModifyCacheClusterInput, []request.Option) {
	fake.modifyCacheClusterWithContextMutex.RLock()
	defer fake.modifyCacheClusterWithContextMutex.RUnlock()
	return fake.modifyCacheClusterWithContextArgsForCall[i].arg1, fake.modifyCacheClusterWithContextArgsForCall[i].arg2, fake.modifyCacheClusterWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterWithContextReturns(result1 *elasticache.ModifyCacheClusterOutput, result2 error) {
	fake.ModifyCacheClusterWithContextStub = nil
	fake.modifyCacheClusterWithContextReturns = struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterWithContextReturnsOnCall(i int, result1 *elasticache.ModifyCacheClusterOutput, result2 error) {
	fake.ModifyCacheClusterWithContextStub = nil
	if fake.modifyCacheClusterWithContextReturnsOnCall == nil {
		fake.modifyCacheClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyCacheClusterOutput
			result2 error
		})
	}
	fake.modifyCacheClusterWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterRequest(arg1 *elasticache.ModifyCacheClusterInput) (*request.Request, *elasticache.ModifyCacheClusterOutput) {
	fake.modifyCacheClusterRequestMutex.Lock()
	ret, specificReturn := fake.modifyCacheClusterRequestReturnsOnCall[len(fake.modifyCacheClusterRequestArgsForCall)]
	fake.modifyCacheClusterRequestArgsForCall = append(fake.modifyCacheClusterRequestArgsForCall, struct {
		arg1 *elasticache.ModifyCacheClusterInput
	}{arg1})
	fake.recordInvocation("ModifyCacheClusterRequest", []interface{}{arg1})
	fake.modifyCacheClusterRequestMutex.Unlock()
	if fake.ModifyCacheClusterRequestStub != nil {
		return fake.ModifyCacheClusterRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyCacheClusterRequestReturns.result1, fake.modifyCacheClusterRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterRequestCallCount() int {
	fake.modifyCacheClusterRequestMutex.RLock()
	defer fake.modifyCacheClusterRequestMutex.RUnlock()
	return len(fake.modifyCacheClusterRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterRequestArgsForCall(i int) *elasticache.ModifyCacheClusterInput {
	fake.modifyCacheClusterRequestMutex.RLock()
	defer fake.modifyCacheClusterRequestMutex.RUnlock()
	return fake.modifyCacheClusterRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterRequestReturns(result1 *request.Request, result2 *elasticache.ModifyCacheClusterOutput) {
	fake.ModifyCacheClusterRequestStub = nil
	fake.modifyCacheClusterRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.ModifyCacheClusterOutput) {
	fake.ModifyCacheClusterRequestStub = nil
	if fake.modifyCacheClusterRequestReturnsOnCall == nil {
		fake.modifyCacheClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.ModifyCacheClusterOutput
		})
	}
	fake.modifyCacheClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroup(arg1 *elasticache.ModifyCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	fake.modifyCacheParameterGroupMutex.Lock()
	ret, specificReturn := fake.modifyCacheParameterGroupReturnsOnCall[len(fake.modifyCacheParameterGroupArgsForCall)]
	fake.modifyCacheParameterGroupArgsForCall = append(fake.modifyCacheParameterGroupArgsForCall, struct {
		arg1 *elasticache.ModifyCacheParameterGroupInput
	}{arg1})
	fake.recordInvocation("ModifyCacheParameterGroup", []interface{}{arg1})
	fake.modifyCacheParameterGroupMutex.Unlock()
	if fake.ModifyCacheParameterGroupStub != nil {
		return fake.ModifyCacheParameterGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyCacheParameterGroupReturns.result1, fake.modifyCacheParameterGroupReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupCallCount() int {
	fake.modifyCacheParameterGroupMutex.RLock()
	defer fake.modifyCacheParameterGroupMutex.RUnlock()
	return len(fake.modifyCacheParameterGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupArgsForCall(i int) *elasticache.ModifyCacheParameterGroupInput {
	fake.modifyCacheParameterGroupMutex.RLock()
	defer fake.modifyCacheParameterGroupMutex.RUnlock()
	return fake.modifyCacheParameterGroupArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupReturns(result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.ModifyCacheParameterGroupStub = nil
	fake.modifyCacheParameterGroupReturns = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupReturnsOnCall(i int, result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.ModifyCacheParameterGroupStub = nil
	if fake.modifyCacheParameterGroupReturnsOnCall == nil {
		fake.modifyCacheParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CacheParameterGroupNameMessage
			result2 error
		})
	}
	fake.modifyCacheParameterGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupWithContext(arg1 aws.Context, arg2 *elasticache.ModifyCacheParameterGroupInput, arg3 ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
	fake.modifyCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyCacheParameterGroupWithContextReturnsOnCall[len(fake.modifyCacheParameterGroupWithContextArgsForCall)]
	fake.modifyCacheParameterGroupWithContextArgsForCall = append(fake.modifyCacheParameterGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.ModifyCacheParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyCacheParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyCacheParameterGroupWithContextMutex.Unlock()
	if fake.ModifyCacheParameterGroupWithContextStub != nil {
		return fake.ModifyCacheParameterGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyCacheParameterGroupWithContextReturns.result1, fake.modifyCacheParameterGroupWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupWithContextCallCount() int {
	fake.modifyCacheParameterGroupWithContextMutex.RLock()
	defer fake.modifyCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.modifyCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.ModifyCacheParameterGroupInput, []request.Option) {
	fake.modifyCacheParameterGroupWithContextMutex.RLock()
	defer fake.modifyCacheParameterGroupWithContextMutex.RUnlock()
	return fake.modifyCacheParameterGroupWithContextArgsForCall[i].arg1, fake.modifyCacheParameterGroupWithContextArgsForCall[i].arg2, fake.modifyCacheParameterGroupWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupWithContextReturns(result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.ModifyCacheParameterGroupWithContextStub = nil
	fake.modifyCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.ModifyCacheParameterGroupWithContextStub = nil
	if fake.modifyCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.modifyCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CacheParameterGroupNameMessage
			result2 error
		})
	}
	fake.modifyCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupRequest(arg1 *elasticache.ModifyCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage) {
	fake.modifyCacheParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyCacheParameterGroupRequestReturnsOnCall[len(fake.modifyCacheParameterGroupRequestArgsForCall)]
	fake.modifyCacheParameterGroupRequestArgsForCall = append(fake.modifyCacheParameterGroupRequestArgsForCall, struct {
		arg1 *elasticache.ModifyCacheParameterGroupInput
	}{arg1})
	fake.recordInvocation("ModifyCacheParameterGroupRequest", []interface{}{arg1})
	fake.modifyCacheParameterGroupRequestMutex.Unlock()
	if fake.ModifyCacheParameterGroupRequestStub != nil {
		return fake.ModifyCacheParameterGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyCacheParameterGroupRequestReturns.result1, fake.modifyCacheParameterGroupRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupRequestCallCount() int {
	fake.modifyCacheParameterGroupRequestMutex.RLock()
	defer fake.modifyCacheParameterGroupRequestMutex.RUnlock()
	return len(fake.modifyCacheParameterGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupRequestArgsForCall(i int) *elasticache.ModifyCacheParameterGroupInput {
	fake.modifyCacheParameterGroupRequestMutex.RLock()
	defer fake.modifyCacheParameterGroupRequestMutex.RUnlock()
	return fake.modifyCacheParameterGroupRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupRequestReturns(result1 *request.Request, result2 *elasticache.CacheParameterGroupNameMessage) {
	fake.ModifyCacheParameterGroupRequestStub = nil
	fake.modifyCacheParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CacheParameterGroupNameMessage) {
	fake.ModifyCacheParameterGroupRequestStub = nil
	if fake.modifyCacheParameterGroupRequestReturnsOnCall == nil {
		fake.modifyCacheParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CacheParameterGroupNameMessage
		})
	}
	fake.modifyCacheParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroup(arg1 *elasticache.ModifyCacheSubnetGroupInput) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	fake.modifyCacheSubnetGroupMutex.Lock()
	ret, specificReturn := fake.modifyCacheSubnetGroupReturnsOnCall[len(fake.modifyCacheSubnetGroupArgsForCall)]
	fake.modifyCacheSubnetGroupArgsForCall = append(fake.modifyCacheSubnetGroupArgsForCall, struct {
		arg1 *elasticache.ModifyCacheSubnetGroupInput
	}{arg1})
	fake.recordInvocation("ModifyCacheSubnetGroup", []interface{}{arg1})
	fake.modifyCacheSubnetGroupMutex.Unlock()
	if fake.ModifyCacheSubnetGroupStub != nil {
		return fake.ModifyCacheSubnetGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyCacheSubnetGroupReturns.result1, fake.modifyCacheSubnetGroupReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupCallCount() int {
	fake.modifyCacheSubnetGroupMutex.RLock()
	defer fake.modifyCacheSubnetGroupMutex.RUnlock()
	return len(fake.modifyCacheSubnetGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupArgsForCall(i int) *elasticache.ModifyCacheSubnetGroupInput {
	fake.modifyCacheSubnetGroupMutex.RLock()
	defer fake.modifyCacheSubnetGroupMutex.RUnlock()
	return fake.modifyCacheSubnetGroupArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupReturns(result1 *elasticache.ModifyCacheSubnetGroupOutput, result2 error) {
	fake.ModifyCacheSubnetGroupStub = nil
	fake.modifyCacheSubnetGroupReturns = struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupReturnsOnCall(i int, result1 *elasticache.ModifyCacheSubnetGroupOutput, result2 error) {
	fake.ModifyCacheSubnetGroupStub = nil
	if fake.modifyCacheSubnetGroupReturnsOnCall == nil {
		fake.modifyCacheSubnetGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyCacheSubnetGroupOutput
			result2 error
		})
	}
	fake.modifyCacheSubnetGroupReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupWithContext(arg1 aws.Context, arg2 *elasticache.ModifyCacheSubnetGroupInput, arg3 ...request.Option) (*elasticache.ModifyCacheSubnetGroupOutput, error) {
	fake.modifyCacheSubnetGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyCacheSubnetGroupWithContextReturnsOnCall[len(fake.modifyCacheSubnetGroupWithContextArgsForCall)]
	fake.modifyCacheSubnetGroupWithContextArgsForCall = append(fake.modifyCacheSubnetGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.ModifyCacheSubnetGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyCacheSubnetGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyCacheSubnetGroupWithContextMutex.Unlock()
	if fake.ModifyCacheSubnetGroupWithContextStub != nil {
		return fake.ModifyCacheSubnetGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyCacheSubnetGroupWithContextReturns.result1, fake.modifyCacheSubnetGroupWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupWithContextCallCount() int {
	fake.modifyCacheSubnetGroupWithContextMutex.RLock()
	defer fake.modifyCacheSubnetGroupWithContextMutex.RUnlock()
	return len(fake.modifyCacheSubnetGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.ModifyCacheSubnetGroupInput, []request.Option) {
	fake.modifyCacheSubnetGroupWithContextMutex.RLock()
	defer fake.modifyCacheSubnetGroupWithContextMutex.RUnlock()
	return fake.modifyCacheSubnetGroupWithContextArgsForCall[i].arg1, fake.modifyCacheSubnetGroupWithContextArgsForCall[i].arg2, fake.modifyCacheSubnetGroupWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupWithContextReturns(result1 *elasticache.ModifyCacheSubnetGroupOutput, result2 error) {
	fake.ModifyCacheSubnetGroupWithContextStub = nil
	fake.modifyCacheSubnetGroupWithContextReturns = struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupWithContextReturnsOnCall(i int, result1 *elasticache.ModifyCacheSubnetGroupOutput, result2 error) {
	fake.ModifyCacheSubnetGroupWithContextStub = nil
	if fake.modifyCacheSubnetGroupWithContextReturnsOnCall == nil {
		fake.modifyCacheSubnetGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyCacheSubnetGroupOutput
			result2 error
		})
	}
	fake.modifyCacheSubnetGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyCacheSubnetGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupRequest(arg1 *elasticache.ModifyCacheSubnetGroupInput) (*request.Request, *elasticache.ModifyCacheSubnetGroupOutput) {
	fake.modifyCacheSubnetGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyCacheSubnetGroupRequestReturnsOnCall[len(fake.modifyCacheSubnetGroupRequestArgsForCall)]
	fake.modifyCacheSubnetGroupRequestArgsForCall = append(fake.modifyCacheSubnetGroupRequestArgsForCall, struct {
		arg1 *elasticache.ModifyCacheSubnetGroupInput
	}{arg1})
	fake.recordInvocation("ModifyCacheSubnetGroupRequest", []interface{}{arg1})
	fake.modifyCacheSubnetGroupRequestMutex.Unlock()
	if fake.ModifyCacheSubnetGroupRequestStub != nil {
		return fake.ModifyCacheSubnetGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyCacheSubnetGroupRequestReturns.result1, fake.modifyCacheSubnetGroupRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupRequestCallCount() int {
	fake.modifyCacheSubnetGroupRequestMutex.RLock()
	defer fake.modifyCacheSubnetGroupRequestMutex.RUnlock()
	return len(fake.modifyCacheSubnetGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupRequestArgsForCall(i int) *elasticache.ModifyCacheSubnetGroupInput {
	fake.modifyCacheSubnetGroupRequestMutex.RLock()
	defer fake.modifyCacheSubnetGroupRequestMutex.RUnlock()
	return fake.modifyCacheSubnetGroupRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupRequestReturns(result1 *request.Request, result2 *elasticache.ModifyCacheSubnetGroupOutput) {
	fake.ModifyCacheSubnetGroupRequestStub = nil
	fake.modifyCacheSubnetGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyCacheSubnetGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.ModifyCacheSubnetGroupOutput) {
	fake.ModifyCacheSubnetGroupRequestStub = nil
	if fake.modifyCacheSubnetGroupRequestReturnsOnCall == nil {
		fake.modifyCacheSubnetGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.ModifyCacheSubnetGroupOutput
		})
	}
	fake.modifyCacheSubnetGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.ModifyCacheSubnetGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroup(arg1 *elasticache.ModifyReplicationGroupInput) (*elasticache.ModifyReplicationGroupOutput, error) {
	fake.modifyReplicationGroupMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupReturnsOnCall[len(fake.modifyReplicationGroupArgsForCall)]
	fake.modifyReplicationGroupArgsForCall = append(fake.modifyReplicationGroupArgsForCall, struct {
		arg1 *elasticache.ModifyReplicationGroupInput
	}{arg1})
	fake.recordInvocation("ModifyReplicationGroup", []interface{}{arg1})
	fake.modifyReplicationGroupMutex.Unlock()
	if fake.ModifyReplicationGroupStub != nil {
		return fake.ModifyReplicationGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyReplicationGroupReturns.result1, fake.modifyReplicationGroupReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupCallCount() int {
	fake.modifyReplicationGroupMutex.RLock()
	defer fake.modifyReplicationGroupMutex.RUnlock()
	return len(fake.modifyReplicationGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupArgsForCall(i int) *elasticache.ModifyReplicationGroupInput {
	fake.modifyReplicationGroupMutex.RLock()
	defer fake.modifyReplicationGroupMutex.RUnlock()
	return fake.modifyReplicationGroupArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupReturns(result1 *elasticache.ModifyReplicationGroupOutput, result2 error) {
	fake.ModifyReplicationGroupStub = nil
	fake.modifyReplicationGroupReturns = struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupReturnsOnCall(i int, result1 *elasticache.ModifyReplicationGroupOutput, result2 error) {
	fake.ModifyReplicationGroupStub = nil
	if fake.modifyReplicationGroupReturnsOnCall == nil {
		fake.modifyReplicationGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyReplicationGroupOutput
			result2 error
		})
	}
	fake.modifyReplicationGroupReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupWithContext(arg1 aws.Context, arg2 *elasticache.ModifyReplicationGroupInput, arg3 ...request.Option) (*elasticache.ModifyReplicationGroupOutput, error) {
	fake.modifyReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupWithContextReturnsOnCall[len(fake.modifyReplicationGroupWithContextArgsForCall)]
	fake.modifyReplicationGroupWithContextArgsForCall = append(fake.modifyReplicationGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.ModifyReplicationGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyReplicationGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyReplicationGroupWithContextMutex.Unlock()
	if fake.ModifyReplicationGroupWithContextStub != nil {
		return fake.ModifyReplicationGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyReplicationGroupWithContextReturns.result1, fake.modifyReplicationGroupWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupWithContextCallCount() int {
	fake.modifyReplicationGroupWithContextMutex.RLock()
	defer fake.modifyReplicationGroupWithContextMutex.RUnlock()
	return len(fake.modifyReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.ModifyReplicationGroupInput, []request.Option) {
	fake.modifyReplicationGroupWithContextMutex.RLock()
	defer fake.modifyReplicationGroupWithContextMutex.RUnlock()
	return fake.modifyReplicationGroupWithContextArgsForCall[i].arg1, fake.modifyReplicationGroupWithContextArgsForCall[i].arg2, fake.modifyReplicationGroupWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupWithContextReturns(result1 *elasticache.ModifyReplicationGroupOutput, result2 error) {
	fake.ModifyReplicationGroupWithContextStub = nil
	fake.modifyReplicationGroupWithContextReturns = struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.ModifyReplicationGroupOutput, result2 error) {
	fake.ModifyReplicationGroupWithContextStub = nil
	if fake.modifyReplicationGroupWithContextReturnsOnCall == nil {
		fake.modifyReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyReplicationGroupOutput
			result2 error
		})
	}
	fake.modifyReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupRequest(arg1 *elasticache.ModifyReplicationGroupInput) (*request.Request, *elasticache.ModifyReplicationGroupOutput) {
	fake.modifyReplicationGroupRequestMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupRequestReturnsOnCall[len(fake.modifyReplicationGroupRequestArgsForCall)]
	fake.modifyReplicationGroupRequestArgsForCall = append(fake.modifyReplicationGroupRequestArgsForCall, struct {
		arg1 *elasticache.ModifyReplicationGroupInput
	}{arg1})
	fake.recordInvocation("ModifyReplicationGroupRequest", []interface{}{arg1})
	fake.modifyReplicationGroupRequestMutex.Unlock()
	if fake.ModifyReplicationGroupRequestStub != nil {
		return fake.ModifyReplicationGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyReplicationGroupRequestReturns.result1, fake.modifyReplicationGroupRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupRequestCallCount() int {
	fake.modifyReplicationGroupRequestMutex.RLock()
	defer fake.modifyReplicationGroupRequestMutex.RUnlock()
	return len(fake.modifyReplicationGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupRequestArgsForCall(i int) *elasticache.ModifyReplicationGroupInput {
	fake.modifyReplicationGroupRequestMutex.RLock()
	defer fake.modifyReplicationGroupRequestMutex.RUnlock()
	return fake.modifyReplicationGroupRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupRequestReturns(result1 *request.Request, result2 *elasticache.ModifyReplicationGroupOutput) {
	fake.ModifyReplicationGroupRequestStub = nil
	fake.modifyReplicationGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.ModifyReplicationGroupOutput) {
	fake.ModifyReplicationGroupRequestStub = nil
	if fake.modifyReplicationGroupRequestReturnsOnCall == nil {
		fake.modifyReplicationGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.ModifyReplicationGroupOutput
		})
	}
	fake.modifyReplicationGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfiguration(arg1 *elasticache.ModifyReplicationGroupShardConfigurationInput) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	fake.modifyReplicationGroupShardConfigurationMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupShardConfigurationReturnsOnCall[len(fake.modifyReplicationGroupShardConfigurationArgsForCall)]
	fake.modifyReplicationGroupShardConfigurationArgsForCall = append(fake.modifyReplicationGroupShardConfigurationArgsForCall, struct {
		arg1 *elasticache.ModifyReplicationGroupShardConfigurationInput
	}{arg1})
	fake.recordInvocation("ModifyReplicationGroupShardConfiguration", []interface{}{arg1})
	fake.modifyReplicationGroupShardConfigurationMutex.Unlock()
	if fake.ModifyReplicationGroupShardConfigurationStub != nil {
		return fake.ModifyReplicationGroupShardConfigurationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyReplicationGroupShardConfigurationReturns.result1, fake.modifyReplicationGroupShardConfigurationReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationCallCount() int {
	fake.modifyReplicationGroupShardConfigurationMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationMutex.RUnlock()
	return len(fake.modifyReplicationGroupShardConfigurationArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationArgsForCall(i int) *elasticache.ModifyReplicationGroupShardConfigurationInput {
	fake.modifyReplicationGroupShardConfigurationMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationMutex.RUnlock()
	return fake.modifyReplicationGroupShardConfigurationArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationReturns(result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput, result2 error) {
	fake.ModifyReplicationGroupShardConfigurationStub = nil
	fake.modifyReplicationGroupShardConfigurationReturns = struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationReturnsOnCall(i int, result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput, result2 error) {
	fake.ModifyReplicationGroupShardConfigurationStub = nil
	if fake.modifyReplicationGroupShardConfigurationReturnsOnCall == nil {
		fake.modifyReplicationGroupShardConfigurationReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
			result2 error
		})
	}
	fake.modifyReplicationGroupShardConfigurationReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationWithContext(arg1 aws.Context, arg2 *elasticache.ModifyReplicationGroupShardConfigurationInput, arg3 ...request.Option) (*elasticache.ModifyReplicationGroupShardConfigurationOutput, error) {
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupShardConfigurationWithContextReturnsOnCall[len(fake.modifyReplicationGroupShardConfigurationWithContextArgsForCall)]
	fake.modifyReplicationGroupShardConfigurationWithContextArgsForCall = append(fake.modifyReplicationGroupShardConfigurationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.ModifyReplicationGroupShardConfigurationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ModifyReplicationGroupShardConfigurationWithContext", []interface{}{arg1, arg2, arg3})
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.Unlock()
	if fake.ModifyReplicationGroupShardConfigurationWithContextStub != nil {
		return fake.ModifyReplicationGroupShardConfigurationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyReplicationGroupShardConfigurationWithContextReturns.result1, fake.modifyReplicationGroupShardConfigurationWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationWithContextCallCount() int {
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationWithContextMutex.RUnlock()
	return len(fake.modifyReplicationGroupShardConfigurationWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationWithContextArgsForCall(i int) (aws.Context, *elasticache.ModifyReplicationGroupShardConfigurationInput, []request.Option) {
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationWithContextMutex.RUnlock()
	return fake.modifyReplicationGroupShardConfigurationWithContextArgsForCall[i].arg1, fake.modifyReplicationGroupShardConfigurationWithContextArgsForCall[i].arg2, fake.modifyReplicationGroupShardConfigurationWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationWithContextReturns(result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput, result2 error) {
	fake.ModifyReplicationGroupShardConfigurationWithContextStub = nil
	fake.modifyReplicationGroupShardConfigurationWithContextReturns = struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationWithContextReturnsOnCall(i int, result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput, result2 error) {
	fake.ModifyReplicationGroupShardConfigurationWithContextStub = nil
	if fake.modifyReplicationGroupShardConfigurationWithContextReturnsOnCall == nil {
		fake.modifyReplicationGroupShardConfigurationWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
			result2 error
		})
	}
	fake.modifyReplicationGroupShardConfigurationWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationRequest(arg1 *elasticache.ModifyReplicationGroupShardConfigurationInput) (*request.Request, *elasticache.ModifyReplicationGroupShardConfigurationOutput) {
	fake.modifyReplicationGroupShardConfigurationRequestMutex.Lock()
	ret, specificReturn := fake.modifyReplicationGroupShardConfigurationRequestReturnsOnCall[len(fake.modifyReplicationGroupShardConfigurationRequestArgsForCall)]
	fake.modifyReplicationGroupShardConfigurationRequestArgsForCall = append(fake.modifyReplicationGroupShardConfigurationRequestArgsForCall, struct {
		arg1 *elasticache.ModifyReplicationGroupShardConfigurationInput
	}{arg1})
	fake.recordInvocation("ModifyReplicationGroupShardConfigurationRequest", []interface{}{arg1})
	fake.modifyReplicationGroupShardConfigurationRequestMutex.Unlock()
	if fake.ModifyReplicationGroupShardConfigurationRequestStub != nil {
		return fake.ModifyReplicationGroupShardConfigurationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyReplicationGroupShardConfigurationRequestReturns.result1, fake.modifyReplicationGroupShardConfigurationRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationRequestCallCount() int {
	fake.modifyReplicationGroupShardConfigurationRequestMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationRequestMutex.RUnlock()
	return len(fake.modifyReplicationGroupShardConfigurationRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationRequestArgsForCall(i int) *elasticache.ModifyReplicationGroupShardConfigurationInput {
	fake.modifyReplicationGroupShardConfigurationRequestMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationRequestMutex.RUnlock()
	return fake.modifyReplicationGroupShardConfigurationRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationRequestReturns(result1 *request.Request, result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput) {
	fake.ModifyReplicationGroupShardConfigurationRequestStub = nil
	fake.modifyReplicationGroupShardConfigurationRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ModifyReplicationGroupShardConfigurationRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput) {
	fake.ModifyReplicationGroupShardConfigurationRequestStub = nil
	if fake.modifyReplicationGroupShardConfigurationRequestReturnsOnCall == nil {
		fake.modifyReplicationGroupShardConfigurationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput
		})
	}
	fake.modifyReplicationGroupShardConfigurationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.ModifyReplicationGroupShardConfigurationOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOffering(arg1 *elasticache.PurchaseReservedCacheNodesOfferingInput) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	fake.purchaseReservedCacheNodesOfferingMutex.Lock()
	ret, specificReturn := fake.purchaseReservedCacheNodesOfferingReturnsOnCall[len(fake.purchaseReservedCacheNodesOfferingArgsForCall)]
	fake.purchaseReservedCacheNodesOfferingArgsForCall = append(fake.purchaseReservedCacheNodesOfferingArgsForCall, struct {
		arg1 *elasticache.PurchaseReservedCacheNodesOfferingInput
	}{arg1})
	fake.recordInvocation("PurchaseReservedCacheNodesOffering", []interface{}{arg1})
	fake.purchaseReservedCacheNodesOfferingMutex.Unlock()
	if fake.PurchaseReservedCacheNodesOfferingStub != nil {
		return fake.PurchaseReservedCacheNodesOfferingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.purchaseReservedCacheNodesOfferingReturns.result1, fake.purchaseReservedCacheNodesOfferingReturns.result2
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingCallCount() int {
	fake.purchaseReservedCacheNodesOfferingMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingMutex.RUnlock()
	return len(fake.purchaseReservedCacheNodesOfferingArgsForCall)
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingArgsForCall(i int) *elasticache.PurchaseReservedCacheNodesOfferingInput {
	fake.purchaseReservedCacheNodesOfferingMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingMutex.RUnlock()
	return fake.purchaseReservedCacheNodesOfferingArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingReturns(result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput, result2 error) {
	fake.PurchaseReservedCacheNodesOfferingStub = nil
	fake.purchaseReservedCacheNodesOfferingReturns = struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingReturnsOnCall(i int, result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput, result2 error) {
	fake.PurchaseReservedCacheNodesOfferingStub = nil
	if fake.purchaseReservedCacheNodesOfferingReturnsOnCall == nil {
		fake.purchaseReservedCacheNodesOfferingReturnsOnCall = make(map[int]struct {
			result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
			result2 error
		})
	}
	fake.purchaseReservedCacheNodesOfferingReturnsOnCall[i] = struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingWithContext(arg1 aws.Context, arg2 *elasticache.PurchaseReservedCacheNodesOfferingInput, arg3 ...request.Option) (*elasticache.PurchaseReservedCacheNodesOfferingOutput, error) {
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.Lock()
	ret, specificReturn := fake.purchaseReservedCacheNodesOfferingWithContextReturnsOnCall[len(fake.purchaseReservedCacheNodesOfferingWithContextArgsForCall)]
	fake.purchaseReservedCacheNodesOfferingWithContextArgsForCall = append(fake.purchaseReservedCacheNodesOfferingWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.PurchaseReservedCacheNodesOfferingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PurchaseReservedCacheNodesOfferingWithContext", []interface{}{arg1, arg2, arg3})
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.Unlock()
	if fake.PurchaseReservedCacheNodesOfferingWithContextStub != nil {
		return fake.PurchaseReservedCacheNodesOfferingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.purchaseReservedCacheNodesOfferingWithContextReturns.result1, fake.purchaseReservedCacheNodesOfferingWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingWithContextCallCount() int {
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingWithContextMutex.RUnlock()
	return len(fake.purchaseReservedCacheNodesOfferingWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingWithContextArgsForCall(i int) (aws.Context, *elasticache.PurchaseReservedCacheNodesOfferingInput, []request.Option) {
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingWithContextMutex.RUnlock()
	return fake.purchaseReservedCacheNodesOfferingWithContextArgsForCall[i].arg1, fake.purchaseReservedCacheNodesOfferingWithContextArgsForCall[i].arg2, fake.purchaseReservedCacheNodesOfferingWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingWithContextReturns(result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput, result2 error) {
	fake.PurchaseReservedCacheNodesOfferingWithContextStub = nil
	fake.purchaseReservedCacheNodesOfferingWithContextReturns = struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingWithContextReturnsOnCall(i int, result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput, result2 error) {
	fake.PurchaseReservedCacheNodesOfferingWithContextStub = nil
	if fake.purchaseReservedCacheNodesOfferingWithContextReturnsOnCall == nil {
		fake.purchaseReservedCacheNodesOfferingWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
			result2 error
		})
	}
	fake.purchaseReservedCacheNodesOfferingWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingRequest(arg1 *elasticache.PurchaseReservedCacheNodesOfferingInput) (*request.Request, *elasticache.PurchaseReservedCacheNodesOfferingOutput) {
	fake.purchaseReservedCacheNodesOfferingRequestMutex.Lock()
	ret, specificReturn := fake.purchaseReservedCacheNodesOfferingRequestReturnsOnCall[len(fake.purchaseReservedCacheNodesOfferingRequestArgsForCall)]
	fake.purchaseReservedCacheNodesOfferingRequestArgsForCall = append(fake.purchaseReservedCacheNodesOfferingRequestArgsForCall, struct {
		arg1 *elasticache.PurchaseReservedCacheNodesOfferingInput
	}{arg1})
	fake.recordInvocation("PurchaseReservedCacheNodesOfferingRequest", []interface{}{arg1})
	fake.purchaseReservedCacheNodesOfferingRequestMutex.Unlock()
	if fake.PurchaseReservedCacheNodesOfferingRequestStub != nil {
		return fake.PurchaseReservedCacheNodesOfferingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.purchaseReservedCacheNodesOfferingRequestReturns.result1, fake.purchaseReservedCacheNodesOfferingRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingRequestCallCount() int {
	fake.purchaseReservedCacheNodesOfferingRequestMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingRequestMutex.RUnlock()
	return len(fake.purchaseReservedCacheNodesOfferingRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingRequestArgsForCall(i int) *elasticache.PurchaseReservedCacheNodesOfferingInput {
	fake.purchaseReservedCacheNodesOfferingRequestMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingRequestMutex.RUnlock()
	return fake.purchaseReservedCacheNodesOfferingRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingRequestReturns(result1 *request.Request, result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput) {
	fake.PurchaseReservedCacheNodesOfferingRequestStub = nil
	fake.purchaseReservedCacheNodesOfferingRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) PurchaseReservedCacheNodesOfferingRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput) {
	fake.PurchaseReservedCacheNodesOfferingRequestStub = nil
	if fake.purchaseReservedCacheNodesOfferingRequestReturnsOnCall == nil {
		fake.purchaseReservedCacheNodesOfferingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput
		})
	}
	fake.purchaseReservedCacheNodesOfferingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.PurchaseReservedCacheNodesOfferingOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebootCacheCluster(arg1 *elasticache.RebootCacheClusterInput) (*elasticache.RebootCacheClusterOutput, error) {
	fake.rebootCacheClusterMutex.Lock()
	ret, specificReturn := fake.rebootCacheClusterReturnsOnCall[len(fake.rebootCacheClusterArgsForCall)]
	fake.rebootCacheClusterArgsForCall = append(fake.rebootCacheClusterArgsForCall, struct {
		arg1 *elasticache.RebootCacheClusterInput
	}{arg1})
	fake.recordInvocation("RebootCacheCluster", []interface{}{arg1})
	fake.rebootCacheClusterMutex.Unlock()
	if fake.RebootCacheClusterStub != nil {
		return fake.RebootCacheClusterStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.rebootCacheClusterReturns.result1, fake.rebootCacheClusterReturns.result2
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterCallCount() int {
	fake.rebootCacheClusterMutex.RLock()
	defer fake.rebootCacheClusterMutex.RUnlock()
	return len(fake.rebootCacheClusterArgsForCall)
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterArgsForCall(i int) *elasticache.RebootCacheClusterInput {
	fake.rebootCacheClusterMutex.RLock()
	defer fake.rebootCacheClusterMutex.RUnlock()
	return fake.rebootCacheClusterArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterReturns(result1 *elasticache.RebootCacheClusterOutput, result2 error) {
	fake.RebootCacheClusterStub = nil
	fake.rebootCacheClusterReturns = struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterReturnsOnCall(i int, result1 *elasticache.RebootCacheClusterOutput, result2 error) {
	fake.RebootCacheClusterStub = nil
	if fake.rebootCacheClusterReturnsOnCall == nil {
		fake.rebootCacheClusterReturnsOnCall = make(map[int]struct {
			result1 *elasticache.RebootCacheClusterOutput
			result2 error
		})
	}
	fake.rebootCacheClusterReturnsOnCall[i] = struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterWithContext(arg1 aws.Context, arg2 *elasticache.RebootCacheClusterInput, arg3 ...request.Option) (*elasticache.RebootCacheClusterOutput, error) {
	fake.rebootCacheClusterWithContextMutex.Lock()
	ret, specificReturn := fake.rebootCacheClusterWithContextReturnsOnCall[len(fake.rebootCacheClusterWithContextArgsForCall)]
	fake.rebootCacheClusterWithContextArgsForCall = append(fake.rebootCacheClusterWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.RebootCacheClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RebootCacheClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.rebootCacheClusterWithContextMutex.Unlock()
	if fake.RebootCacheClusterWithContextStub != nil {
		return fake.RebootCacheClusterWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.rebootCacheClusterWithContextReturns.result1, fake.rebootCacheClusterWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterWithContextCallCount() int {
	fake.rebootCacheClusterWithContextMutex.RLock()
	defer fake.rebootCacheClusterWithContextMutex.RUnlock()
	return len(fake.rebootCacheClusterWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterWithContextArgsForCall(i int) (aws.Context, *elasticache.RebootCacheClusterInput, []request.Option) {
	fake.rebootCacheClusterWithContextMutex.RLock()
	defer fake.rebootCacheClusterWithContextMutex.RUnlock()
	return fake.rebootCacheClusterWithContextArgsForCall[i].arg1, fake.rebootCacheClusterWithContextArgsForCall[i].arg2, fake.rebootCacheClusterWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterWithContextReturns(result1 *elasticache.RebootCacheClusterOutput, result2 error) {
	fake.RebootCacheClusterWithContextStub = nil
	fake.rebootCacheClusterWithContextReturns = struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterWithContextReturnsOnCall(i int, result1 *elasticache.RebootCacheClusterOutput, result2 error) {
	fake.RebootCacheClusterWithContextStub = nil
	if fake.rebootCacheClusterWithContextReturnsOnCall == nil {
		fake.rebootCacheClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.RebootCacheClusterOutput
			result2 error
		})
	}
	fake.rebootCacheClusterWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.RebootCacheClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterRequest(arg1 *elasticache.RebootCacheClusterInput) (*request.Request, *elasticache.RebootCacheClusterOutput) {
	fake.rebootCacheClusterRequestMutex.Lock()
	ret, specificReturn := fake.rebootCacheClusterRequestReturnsOnCall[len(fake.rebootCacheClusterRequestArgsForCall)]
	fake.rebootCacheClusterRequestArgsForCall = append(fake.rebootCacheClusterRequestArgsForCall, struct {
		arg1 *elasticache.RebootCacheClusterInput
	}{arg1})
	fake.recordInvocation("RebootCacheClusterRequest", []interface{}{arg1})
	fake.rebootCacheClusterRequestMutex.Unlock()
	if fake.RebootCacheClusterRequestStub != nil {
		return fake.RebootCacheClusterRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.rebootCacheClusterRequestReturns.result1, fake.rebootCacheClusterRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterRequestCallCount() int {
	fake.rebootCacheClusterRequestMutex.RLock()
	defer fake.rebootCacheClusterRequestMutex.RUnlock()
	return len(fake.rebootCacheClusterRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterRequestArgsForCall(i int) *elasticache.RebootCacheClusterInput {
	fake.rebootCacheClusterRequestMutex.RLock()
	defer fake.rebootCacheClusterRequestMutex.RUnlock()
	return fake.rebootCacheClusterRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterRequestReturns(result1 *request.Request, result2 *elasticache.RebootCacheClusterOutput) {
	fake.RebootCacheClusterRequestStub = nil
	fake.rebootCacheClusterRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.RebootCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RebootCacheClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.RebootCacheClusterOutput) {
	fake.RebootCacheClusterRequestStub = nil
	if fake.rebootCacheClusterRequestReturnsOnCall == nil {
		fake.rebootCacheClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.RebootCacheClusterOutput
		})
	}
	fake.rebootCacheClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.RebootCacheClusterOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResource(arg1 *elasticache.RemoveTagsFromResourceInput) (*elasticache.TagListMessage, error) {
	fake.removeTagsFromResourceMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceReturnsOnCall[len(fake.removeTagsFromResourceArgsForCall)]
	fake.removeTagsFromResourceArgsForCall = append(fake.removeTagsFromResourceArgsForCall, struct {
		arg1 *elasticache.RemoveTagsFromResourceInput
	}{arg1})
	fake.recordInvocation("RemoveTagsFromResource", []interface{}{arg1})
	fake.removeTagsFromResourceMutex.Unlock()
	if fake.RemoveTagsFromResourceStub != nil {
		return fake.RemoveTagsFromResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.removeTagsFromResourceReturns.result1, fake.removeTagsFromResourceReturns.result2
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceCallCount() int {
	fake.removeTagsFromResourceMutex.RLock()
	defer fake.removeTagsFromResourceMutex.RUnlock()
	return len(fake.removeTagsFromResourceArgsForCall)
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceArgsForCall(i int) *elasticache.RemoveTagsFromResourceInput {
	fake.removeTagsFromResourceMutex.RLock()
	defer fake.removeTagsFromResourceMutex.RUnlock()
	return fake.removeTagsFromResourceArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.RemoveTagsFromResourceStub = nil
	fake.removeTagsFromResourceReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.RemoveTagsFromResourceStub = nil
	if fake.removeTagsFromResourceReturnsOnCall == nil {
		fake.removeTagsFromResourceReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.removeTagsFromResourceReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceWithContext(arg1 aws.Context, arg2 *elasticache.RemoveTagsFromResourceInput, arg3 ...request.Option) (*elasticache.TagListMessage, error) {
	fake.removeTagsFromResourceWithContextMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceWithContextReturnsOnCall[len(fake.removeTagsFromResourceWithContextArgsForCall)]
	fake.removeTagsFromResourceWithContextArgsForCall = append(fake.removeTagsFromResourceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.RemoveTagsFromResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveTagsFromResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.removeTagsFromResourceWithContextMutex.Unlock()
	if fake.RemoveTagsFromResourceWithContextStub != nil {
		return fake.RemoveTagsFromResourceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.removeTagsFromResourceWithContextReturns.result1, fake.removeTagsFromResourceWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceWithContextCallCount() int {
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	return len(fake.removeTagsFromResourceWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceWithContextArgsForCall(i int) (aws.Context, *elasticache.RemoveTagsFromResourceInput, []request.Option) {
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	return fake.removeTagsFromResourceWithContextArgsForCall[i].arg1, fake.removeTagsFromResourceWithContextArgsForCall[i].arg2, fake.removeTagsFromResourceWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceWithContextReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.RemoveTagsFromResourceWithContextStub = nil
	fake.removeTagsFromResourceWithContextReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceWithContextReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.RemoveTagsFromResourceWithContextStub = nil
	if fake.removeTagsFromResourceWithContextReturnsOnCall == nil {
		fake.removeTagsFromResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.removeTagsFromResourceWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceRequest(arg1 *elasticache.RemoveTagsFromResourceInput) (*request.Request, *elasticache.TagListMessage) {
	fake.removeTagsFromResourceRequestMutex.Lock()
	ret, specificReturn := fake.removeTagsFromResourceRequestReturnsOnCall[len(fake.removeTagsFromResourceRequestArgsForCall)]
	fake.removeTagsFromResourceRequestArgsForCall = append(fake.removeTagsFromResourceRequestArgsForCall, struct {
		arg1 *elasticache.RemoveTagsFromResourceInput
	}{arg1})
	fake.recordInvocation("RemoveTagsFromResourceRequest", []interface{}{arg1})
	fake.removeTagsFromResourceRequestMutex.Unlock()
	if fake.RemoveTagsFromResourceRequestStub != nil {
		return fake.RemoveTagsFromResourceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.removeTagsFromResourceRequestReturns.result1, fake.removeTagsFromResourceRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceRequestCallCount() int {
	fake.removeTagsFromResourceRequestMutex.RLock()
	defer fake.removeTagsFromResourceRequestMutex.RUnlock()
	return len(fake.removeTagsFromResourceRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceRequestArgsForCall(i int) *elasticache.RemoveTagsFromResourceInput {
	fake.removeTagsFromResourceRequestMutex.RLock()
	defer fake.removeTagsFromResourceRequestMutex.RUnlock()
	return fake.removeTagsFromResourceRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceRequestReturns(result1 *request.Request, result2 *elasticache.TagListMessage) {
	fake.RemoveTagsFromResourceRequestStub = nil
	fake.removeTagsFromResourceRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RemoveTagsFromResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.TagListMessage) {
	fake.RemoveTagsFromResourceRequestStub = nil
	if fake.removeTagsFromResourceRequestReturnsOnCall == nil {
		fake.removeTagsFromResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.TagListMessage
		})
	}
	fake.removeTagsFromResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.TagListMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroup(arg1 *elasticache.ResetCacheParameterGroupInput) (*elasticache.CacheParameterGroupNameMessage, error) {
	fake.resetCacheParameterGroupMutex.Lock()
	ret, specificReturn := fake.resetCacheParameterGroupReturnsOnCall[len(fake.resetCacheParameterGroupArgsForCall)]
	fake.resetCacheParameterGroupArgsForCall = append(fake.resetCacheParameterGroupArgsForCall, struct {
		arg1 *elasticache.ResetCacheParameterGroupInput
	}{arg1})
	fake.recordInvocation("ResetCacheParameterGroup", []interface{}{arg1})
	fake.resetCacheParameterGroupMutex.Unlock()
	if fake.ResetCacheParameterGroupStub != nil {
		return fake.ResetCacheParameterGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.resetCacheParameterGroupReturns.result1, fake.resetCacheParameterGroupReturns.result2
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupCallCount() int {
	fake.resetCacheParameterGroupMutex.RLock()
	defer fake.resetCacheParameterGroupMutex.RUnlock()
	return len(fake.resetCacheParameterGroupArgsForCall)
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupArgsForCall(i int) *elasticache.ResetCacheParameterGroupInput {
	fake.resetCacheParameterGroupMutex.RLock()
	defer fake.resetCacheParameterGroupMutex.RUnlock()
	return fake.resetCacheParameterGroupArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupReturns(result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.ResetCacheParameterGroupStub = nil
	fake.resetCacheParameterGroupReturns = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupReturnsOnCall(i int, result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.ResetCacheParameterGroupStub = nil
	if fake.resetCacheParameterGroupReturnsOnCall == nil {
		fake.resetCacheParameterGroupReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CacheParameterGroupNameMessage
			result2 error
		})
	}
	fake.resetCacheParameterGroupReturnsOnCall[i] = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupWithContext(arg1 aws.Context, arg2 *elasticache.ResetCacheParameterGroupInput, arg3 ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
	fake.resetCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.resetCacheParameterGroupWithContextReturnsOnCall[len(fake.resetCacheParameterGroupWithContextArgsForCall)]
	fake.resetCacheParameterGroupWithContextArgsForCall = append(fake.resetCacheParameterGroupWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.ResetCacheParameterGroupInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ResetCacheParameterGroupWithContext", []interface{}{arg1, arg2, arg3})
	fake.resetCacheParameterGroupWithContextMutex.Unlock()
	if fake.ResetCacheParameterGroupWithContextStub != nil {
		return fake.ResetCacheParameterGroupWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.resetCacheParameterGroupWithContextReturns.result1, fake.resetCacheParameterGroupWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupWithContextCallCount() int {
	fake.resetCacheParameterGroupWithContextMutex.RLock()
	defer fake.resetCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.resetCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.ResetCacheParameterGroupInput, []request.Option) {
	fake.resetCacheParameterGroupWithContextMutex.RLock()
	defer fake.resetCacheParameterGroupWithContextMutex.RUnlock()
	return fake.resetCacheParameterGroupWithContextArgsForCall[i].arg1, fake.resetCacheParameterGroupWithContextArgsForCall[i].arg2, fake.resetCacheParameterGroupWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupWithContextReturns(result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.ResetCacheParameterGroupWithContextStub = nil
	fake.resetCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.ResetCacheParameterGroupWithContextStub = nil
	if fake.resetCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.resetCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CacheParameterGroupNameMessage
			result2 error
		})
	}
	fake.resetCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupRequest(arg1 *elasticache.ResetCacheParameterGroupInput) (*request.Request, *elasticache.CacheParameterGroupNameMessage) {
	fake.resetCacheParameterGroupRequestMutex.Lock()
	ret, specificReturn := fake.resetCacheParameterGroupRequestReturnsOnCall[len(fake.resetCacheParameterGroupRequestArgsForCall)]
	fake.resetCacheParameterGroupRequestArgsForCall = append(fake.resetCacheParameterGroupRequestArgsForCall, struct {
		arg1 *elasticache.ResetCacheParameterGroupInput
	}{arg1})
	fake.recordInvocation("ResetCacheParameterGroupRequest", []interface{}{arg1})
	fake.resetCacheParameterGroupRequestMutex.Unlock()
	if fake.ResetCacheParameterGroupRequestStub != nil {
		return fake.ResetCacheParameterGroupRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.resetCacheParameterGroupRequestReturns.result1, fake.resetCacheParameterGroupRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupRequestCallCount() int {
	fake.resetCacheParameterGroupRequestMutex.RLock()
	defer fake.resetCacheParameterGroupRequestMutex.RUnlock()
	return len(fake.resetCacheParameterGroupRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupRequestArgsForCall(i int) *elasticache.ResetCacheParameterGroupInput {
	fake.resetCacheParameterGroupRequestMutex.RLock()
	defer fake.resetCacheParameterGroupRequestMutex.RUnlock()
	return fake.resetCacheParameterGroupRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupRequestReturns(result1 *request.Request, result2 *elasticache.CacheParameterGroupNameMessage) {
	fake.ResetCacheParameterGroupRequestStub = nil
	fake.resetCacheParameterGroupRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) ResetCacheParameterGroupRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.CacheParameterGroupNameMessage) {
	fake.ResetCacheParameterGroupRequestStub = nil
	if fake.resetCacheParameterGroupRequestReturnsOnCall == nil {
		fake.resetCacheParameterGroupRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.CacheParameterGroupNameMessage
		})
	}
	fake.resetCacheParameterGroupRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.CacheParameterGroupNameMessage
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngress(arg1 *elasticache.RevokeCacheSecurityGroupIngressInput) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	fake.revokeCacheSecurityGroupIngressMutex.Lock()
	ret, specificReturn := fake.revokeCacheSecurityGroupIngressReturnsOnCall[len(fake.revokeCacheSecurityGroupIngressArgsForCall)]
	fake.revokeCacheSecurityGroupIngressArgsForCall = append(fake.revokeCacheSecurityGroupIngressArgsForCall, struct {
		arg1 *elasticache.RevokeCacheSecurityGroupIngressInput
	}{arg1})
	fake.recordInvocation("RevokeCacheSecurityGroupIngress", []interface{}{arg1})
	fake.revokeCacheSecurityGroupIngressMutex.Unlock()
	if fake.RevokeCacheSecurityGroupIngressStub != nil {
		return fake.RevokeCacheSecurityGroupIngressStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.revokeCacheSecurityGroupIngressReturns.result1, fake.revokeCacheSecurityGroupIngressReturns.result2
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressCallCount() int {
	fake.revokeCacheSecurityGroupIngressMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressMutex.RUnlock()
	return len(fake.revokeCacheSecurityGroupIngressArgsForCall)
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressArgsForCall(i int) *elasticache.RevokeCacheSecurityGroupIngressInput {
	fake.revokeCacheSecurityGroupIngressMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressMutex.RUnlock()
	return fake.revokeCacheSecurityGroupIngressArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressReturns(result1 *elasticache.RevokeCacheSecurityGroupIngressOutput, result2 error) {
	fake.RevokeCacheSecurityGroupIngressStub = nil
	fake.revokeCacheSecurityGroupIngressReturns = struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressReturnsOnCall(i int, result1 *elasticache.RevokeCacheSecurityGroupIngressOutput, result2 error) {
	fake.RevokeCacheSecurityGroupIngressStub = nil
	if fake.revokeCacheSecurityGroupIngressReturnsOnCall == nil {
		fake.revokeCacheSecurityGroupIngressReturnsOnCall = make(map[int]struct {
			result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.revokeCacheSecurityGroupIngressReturnsOnCall[i] = struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressWithContext(arg1 aws.Context, arg2 *elasticache.RevokeCacheSecurityGroupIngressInput, arg3 ...request.Option) (*elasticache.RevokeCacheSecurityGroupIngressOutput, error) {
	fake.revokeCacheSecurityGroupIngressWithContextMutex.Lock()
	ret, specificReturn := fake.revokeCacheSecurityGroupIngressWithContextReturnsOnCall[len(fake.revokeCacheSecurityGroupIngressWithContextArgsForCall)]
	fake.revokeCacheSecurityGroupIngressWithContextArgsForCall = append(fake.revokeCacheSecurityGroupIngressWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.RevokeCacheSecurityGroupIngressInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RevokeCacheSecurityGroupIngressWithContext", []interface{}{arg1, arg2, arg3})
	fake.revokeCacheSecurityGroupIngressWithContextMutex.Unlock()
	if fake.RevokeCacheSecurityGroupIngressWithContextStub != nil {
		return fake.RevokeCacheSecurityGroupIngressWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.revokeCacheSecurityGroupIngressWithContextReturns.result1, fake.revokeCacheSecurityGroupIngressWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressWithContextCallCount() int {
	fake.revokeCacheSecurityGroupIngressWithContextMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressWithContextMutex.RUnlock()
	return len(fake.revokeCacheSecurityGroupIngressWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressWithContextArgsForCall(i int) (aws.Context, *elasticache.RevokeCacheSecurityGroupIngressInput, []request.Option) {
	fake.revokeCacheSecurityGroupIngressWithContextMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressWithContextMutex.RUnlock()
	return fake.revokeCacheSecurityGroupIngressWithContextArgsForCall[i].arg1, fake.revokeCacheSecurityGroupIngressWithContextArgsForCall[i].arg2, fake.revokeCacheSecurityGroupIngressWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressWithContextReturns(result1 *elasticache.RevokeCacheSecurityGroupIngressOutput, result2 error) {
	fake.RevokeCacheSecurityGroupIngressWithContextStub = nil
	fake.revokeCacheSecurityGroupIngressWithContextReturns = struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressWithContextReturnsOnCall(i int, result1 *elasticache.RevokeCacheSecurityGroupIngressOutput, result2 error) {
	fake.RevokeCacheSecurityGroupIngressWithContextStub = nil
	if fake.revokeCacheSecurityGroupIngressWithContextReturnsOnCall == nil {
		fake.revokeCacheSecurityGroupIngressWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
			result2 error
		})
	}
	fake.revokeCacheSecurityGroupIngressWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.RevokeCacheSecurityGroupIngressOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressRequest(arg1 *elasticache.RevokeCacheSecurityGroupIngressInput) (*request.Request, *elasticache.RevokeCacheSecurityGroupIngressOutput) {
	fake.revokeCacheSecurityGroupIngressRequestMutex.Lock()
	ret, specificReturn := fake.revokeCacheSecurityGroupIngressRequestReturnsOnCall[len(fake.revokeCacheSecurityGroupIngressRequestArgsForCall)]
	fake.revokeCacheSecurityGroupIngressRequestArgsForCall = append(fake.revokeCacheSecurityGroupIngressRequestArgsForCall, struct {
		arg1 *elasticache.RevokeCacheSecurityGroupIngressInput
	}{arg1})
	fake.recordInvocation("RevokeCacheSecurityGroupIngressRequest", []interface{}{arg1})
	fake.revokeCacheSecurityGroupIngressRequestMutex.Unlock()
	if fake.RevokeCacheSecurityGroupIngressRequestStub != nil {
		return fake.RevokeCacheSecurityGroupIngressRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.revokeCacheSecurityGroupIngressRequestReturns.result1, fake.revokeCacheSecurityGroupIngressRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressRequestCallCount() int {
	fake.revokeCacheSecurityGroupIngressRequestMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressRequestMutex.RUnlock()
	return len(fake.revokeCacheSecurityGroupIngressRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressRequestArgsForCall(i int) *elasticache.RevokeCacheSecurityGroupIngressInput {
	fake.revokeCacheSecurityGroupIngressRequestMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressRequestMutex.RUnlock()
	return fake.revokeCacheSecurityGroupIngressRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressRequestReturns(result1 *request.Request, result2 *elasticache.RevokeCacheSecurityGroupIngressOutput) {
	fake.RevokeCacheSecurityGroupIngressRequestStub = nil
	fake.revokeCacheSecurityGroupIngressRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.RevokeCacheSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) RevokeCacheSecurityGroupIngressRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.RevokeCacheSecurityGroupIngressOutput) {
	fake.RevokeCacheSecurityGroupIngressRequestStub = nil
	if fake.revokeCacheSecurityGroupIngressRequestReturnsOnCall == nil {
		fake.revokeCacheSecurityGroupIngressRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.RevokeCacheSecurityGroupIngressOutput
		})
	}
	fake.revokeCacheSecurityGroupIngressRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.RevokeCacheSecurityGroupIngressOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) TestFailover(arg1 *elasticache.TestFailoverInput) (*elasticache.TestFailoverOutput, error) {
	fake.testFailoverMutex.Lock()
	ret, specificReturn := fake.testFailoverReturnsOnCall[len(fake.testFailoverArgsForCall)]
	fake.testFailoverArgsForCall = append(fake.testFailoverArgsForCall, struct {
		arg1 *elasticache.TestFailoverInput
	}{arg1})
	fake.recordInvocation("TestFailover", []interface{}{arg1})
	fake.testFailoverMutex.Unlock()
	if fake.TestFailoverStub != nil {
		return fake.TestFailoverStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.testFailoverReturns.result1, fake.testFailoverReturns.result2
}

func (fake *FakeElastiCacheAPI) TestFailoverCallCount() int {
	fake.testFailoverMutex.RLock()
	defer fake.testFailoverMutex.RUnlock()
	return len(fake.testFailoverArgsForCall)
}

func (fake *FakeElastiCacheAPI) TestFailoverArgsForCall(i int) *elasticache.TestFailoverInput {
	fake.testFailoverMutex.RLock()
	defer fake.testFailoverMutex.RUnlock()
	return fake.testFailoverArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) TestFailoverReturns(result1 *elasticache.TestFailoverOutput, result2 error) {
	fake.TestFailoverStub = nil
	fake.testFailoverReturns = struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) TestFailoverReturnsOnCall(i int, result1 *elasticache.TestFailoverOutput, result2 error) {
	fake.TestFailoverStub = nil
	if fake.testFailoverReturnsOnCall == nil {
		fake.testFailoverReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TestFailoverOutput
			result2 error
		})
	}
	fake.testFailoverReturnsOnCall[i] = struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) TestFailoverWithContext(arg1 aws.Context, arg2 *elasticache.TestFailoverInput, arg3 ...request.Option) (*elasticache.TestFailoverOutput, error) {
	fake.testFailoverWithContextMutex.Lock()
	ret, specificReturn := fake.testFailoverWithContextReturnsOnCall[len(fake.testFailoverWithContextArgsForCall)]
	fake.testFailoverWithContextArgsForCall = append(fake.testFailoverWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.TestFailoverInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("TestFailoverWithContext", []interface{}{arg1, arg2, arg3})
	fake.testFailoverWithContextMutex.Unlock()
	if fake.TestFailoverWithContextStub != nil {
		return fake.TestFailoverWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.testFailoverWithContextReturns.result1, fake.testFailoverWithContextReturns.result2
}

func (fake *FakeElastiCacheAPI) TestFailoverWithContextCallCount() int {
	fake.testFailoverWithContextMutex.RLock()
	defer fake.testFailoverWithContextMutex.RUnlock()
	return len(fake.testFailoverWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) TestFailoverWithContextArgsForCall(i int) (aws.Context, *elasticache.TestFailoverInput, []request.Option) {
	fake.testFailoverWithContextMutex.RLock()
	defer fake.testFailoverWithContextMutex.RUnlock()
	return fake.testFailoverWithContextArgsForCall[i].arg1, fake.testFailoverWithContextArgsForCall[i].arg2, fake.testFailoverWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) TestFailoverWithContextReturns(result1 *elasticache.TestFailoverOutput, result2 error) {
	fake.TestFailoverWithContextStub = nil
	fake.testFailoverWithContextReturns = struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) TestFailoverWithContextReturnsOnCall(i int, result1 *elasticache.TestFailoverOutput, result2 error) {
	fake.TestFailoverWithContextStub = nil
	if fake.testFailoverWithContextReturnsOnCall == nil {
		fake.testFailoverWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TestFailoverOutput
			result2 error
		})
	}
	fake.testFailoverWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TestFailoverOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) TestFailoverRequest(arg1 *elasticache.TestFailoverInput) (*request.Request, *elasticache.TestFailoverOutput) {
	fake.testFailoverRequestMutex.Lock()
	ret, specificReturn := fake.testFailoverRequestReturnsOnCall[len(fake.testFailoverRequestArgsForCall)]
	fake.testFailoverRequestArgsForCall = append(fake.testFailoverRequestArgsForCall, struct {
		arg1 *elasticache.TestFailoverInput
	}{arg1})
	fake.recordInvocation("TestFailoverRequest", []interface{}{arg1})
	fake.testFailoverRequestMutex.Unlock()
	if fake.TestFailoverRequestStub != nil {
		return fake.TestFailoverRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.testFailoverRequestReturns.result1, fake.testFailoverRequestReturns.result2
}

func (fake *FakeElastiCacheAPI) TestFailoverRequestCallCount() int {
	fake.testFailoverRequestMutex.RLock()
	defer fake.testFailoverRequestMutex.RUnlock()
	return len(fake.testFailoverRequestArgsForCall)
}

func (fake *FakeElastiCacheAPI) TestFailoverRequestArgsForCall(i int) *elasticache.TestFailoverInput {
	fake.testFailoverRequestMutex.RLock()
	defer fake.testFailoverRequestMutex.RUnlock()
	return fake.testFailoverRequestArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) TestFailoverRequestReturns(result1 *request.Request, result2 *elasticache.TestFailoverOutput) {
	fake.TestFailoverRequestStub = nil
	fake.testFailoverRequestReturns = struct {
		result1 *request.Request
		result2 *elasticache.TestFailoverOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) TestFailoverRequestReturnsOnCall(i int, result1 *request.Request, result2 *elasticache.TestFailoverOutput) {
	fake.TestFailoverRequestStub = nil
	if fake.testFailoverRequestReturnsOnCall == nil {
		fake.testFailoverRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *elasticache.TestFailoverOutput
		})
	}
	fake.testFailoverRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *elasticache.TestFailoverOutput
	}{result1, result2}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailable(arg1 *elasticache.DescribeCacheClustersInput) error {
	fake.waitUntilCacheClusterAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilCacheClusterAvailableReturnsOnCall[len(fake.waitUntilCacheClusterAvailableArgsForCall)]
	fake.waitUntilCacheClusterAvailableArgsForCall = append(fake.waitUntilCacheClusterAvailableArgsForCall, struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}{arg1})
	fake.recordInvocation("WaitUntilCacheClusterAvailable", []interface{}{arg1})
	fake.waitUntilCacheClusterAvailableMutex.Unlock()
	if fake.WaitUntilCacheClusterAvailableStub != nil {
		return fake.WaitUntilCacheClusterAvailableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilCacheClusterAvailableReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableCallCount() int {
	fake.waitUntilCacheClusterAvailableMutex.RLock()
	defer fake.waitUntilCacheClusterAvailableMutex.RUnlock()
	return len(fake.waitUntilCacheClusterAvailableArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableArgsForCall(i int) *elasticache.DescribeCacheClustersInput {
	fake.waitUntilCacheClusterAvailableMutex.RLock()
	defer fake.waitUntilCacheClusterAvailableMutex.RUnlock()
	return fake.waitUntilCacheClusterAvailableArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableReturns(result1 error) {
	fake.WaitUntilCacheClusterAvailableStub = nil
	fake.waitUntilCacheClusterAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableReturnsOnCall(i int, result1 error) {
	fake.WaitUntilCacheClusterAvailableStub = nil
	if fake.waitUntilCacheClusterAvailableReturnsOnCall == nil {
		fake.waitUntilCacheClusterAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCacheClusterAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheClustersInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilCacheClusterAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilCacheClusterAvailableWithContextReturnsOnCall[len(fake.waitUntilCacheClusterAvailableWithContextArgsForCall)]
	fake.waitUntilCacheClusterAvailableWithContextArgsForCall = append(fake.waitUntilCacheClusterAvailableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilCacheClusterAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilCacheClusterAvailableWithContextMutex.Unlock()
	if fake.WaitUntilCacheClusterAvailableWithContextStub != nil {
		return fake.WaitUntilCacheClusterAvailableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilCacheClusterAvailableWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableWithContextCallCount() int {
	fake.waitUntilCacheClusterAvailableWithContextMutex.RLock()
	defer fake.waitUntilCacheClusterAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilCacheClusterAvailableWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheClustersInput, []request.WaiterOption) {
	fake.waitUntilCacheClusterAvailableWithContextMutex.RLock()
	defer fake.waitUntilCacheClusterAvailableWithContextMutex.RUnlock()
	return fake.waitUntilCacheClusterAvailableWithContextArgsForCall[i].arg1, fake.waitUntilCacheClusterAvailableWithContextArgsForCall[i].arg2, fake.waitUntilCacheClusterAvailableWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableWithContextReturns(result1 error) {
	fake.WaitUntilCacheClusterAvailableWithContextStub = nil
	fake.waitUntilCacheClusterAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.WaitUntilCacheClusterAvailableWithContextStub = nil
	if fake.waitUntilCacheClusterAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilCacheClusterAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCacheClusterAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeleted(arg1 *elasticache.DescribeCacheClustersInput) error {
	fake.waitUntilCacheClusterDeletedMutex.Lock()
	ret, specificReturn := fake.waitUntilCacheClusterDeletedReturnsOnCall[len(fake.waitUntilCacheClusterDeletedArgsForCall)]
	fake.waitUntilCacheClusterDeletedArgsForCall = append(fake.waitUntilCacheClusterDeletedArgsForCall, struct {
		arg1 *elasticache.DescribeCacheClustersInput
	}{arg1})
	fake.recordInvocation("WaitUntilCacheClusterDeleted", []interface{}{arg1})
	fake.waitUntilCacheClusterDeletedMutex.Unlock()
	if fake.WaitUntilCacheClusterDeletedStub != nil {
		return fake.WaitUntilCacheClusterDeletedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilCacheClusterDeletedReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedCallCount() int {
	fake.waitUntilCacheClusterDeletedMutex.RLock()
	defer fake.waitUntilCacheClusterDeletedMutex.RUnlock()
	return len(fake.waitUntilCacheClusterDeletedArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedArgsForCall(i int) *elasticache.DescribeCacheClustersInput {
	fake.waitUntilCacheClusterDeletedMutex.RLock()
	defer fake.waitUntilCacheClusterDeletedMutex.RUnlock()
	return fake.waitUntilCacheClusterDeletedArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedReturns(result1 error) {
	fake.WaitUntilCacheClusterDeletedStub = nil
	fake.waitUntilCacheClusterDeletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedReturnsOnCall(i int, result1 error) {
	fake.WaitUntilCacheClusterDeletedStub = nil
	if fake.waitUntilCacheClusterDeletedReturnsOnCall == nil {
		fake.waitUntilCacheClusterDeletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCacheClusterDeletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedWithContext(arg1 aws.Context, arg2 *elasticache.DescribeCacheClustersInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilCacheClusterDeletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilCacheClusterDeletedWithContextReturnsOnCall[len(fake.waitUntilCacheClusterDeletedWithContextArgsForCall)]
	fake.waitUntilCacheClusterDeletedWithContextArgsForCall = append(fake.waitUntilCacheClusterDeletedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeCacheClustersInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilCacheClusterDeletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilCacheClusterDeletedWithContextMutex.Unlock()
	if fake.WaitUntilCacheClusterDeletedWithContextStub != nil {
		return fake.WaitUntilCacheClusterDeletedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilCacheClusterDeletedWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedWithContextCallCount() int {
	fake.waitUntilCacheClusterDeletedWithContextMutex.RLock()
	defer fake.waitUntilCacheClusterDeletedWithContextMutex.RUnlock()
	return len(fake.waitUntilCacheClusterDeletedWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheClustersInput, []request.WaiterOption) {
	fake.waitUntilCacheClusterDeletedWithContextMutex.RLock()
	defer fake.waitUntilCacheClusterDeletedWithContextMutex.RUnlock()
	return fake.waitUntilCacheClusterDeletedWithContextArgsForCall[i].arg1, fake.waitUntilCacheClusterDeletedWithContextArgsForCall[i].arg2, fake.waitUntilCacheClusterDeletedWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedWithContextReturns(result1 error) {
	fake.WaitUntilCacheClusterDeletedWithContextStub = nil
	fake.waitUntilCacheClusterDeletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilCacheClusterDeletedWithContextReturnsOnCall(i int, result1 error) {
	fake.WaitUntilCacheClusterDeletedWithContextStub = nil
	if fake.waitUntilCacheClusterDeletedWithContextReturnsOnCall == nil {
		fake.waitUntilCacheClusterDeletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilCacheClusterDeletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailable(arg1 *elasticache.DescribeReplicationGroupsInput) error {
	fake.waitUntilReplicationGroupAvailableMutex.Lock()
	ret, specificReturn := fake.waitUntilReplicationGroupAvailableReturnsOnCall[len(fake.waitUntilReplicationGroupAvailableArgsForCall)]
	fake.waitUntilReplicationGroupAvailableArgsForCall = append(fake.waitUntilReplicationGroupAvailableArgsForCall, struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}{arg1})
	fake.recordInvocation("WaitUntilReplicationGroupAvailable", []interface{}{arg1})
	fake.waitUntilReplicationGroupAvailableMutex.Unlock()
	if fake.WaitUntilReplicationGroupAvailableStub != nil {
		return fake.WaitUntilReplicationGroupAvailableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilReplicationGroupAvailableReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableCallCount() int {
	fake.waitUntilReplicationGroupAvailableMutex.RLock()
	defer fake.waitUntilReplicationGroupAvailableMutex.RUnlock()
	return len(fake.waitUntilReplicationGroupAvailableArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableArgsForCall(i int) *elasticache.DescribeReplicationGroupsInput {
	fake.waitUntilReplicationGroupAvailableMutex.RLock()
	defer fake.waitUntilReplicationGroupAvailableMutex.RUnlock()
	return fake.waitUntilReplicationGroupAvailableArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableReturns(result1 error) {
	fake.WaitUntilReplicationGroupAvailableStub = nil
	fake.waitUntilReplicationGroupAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableReturnsOnCall(i int, result1 error) {
	fake.WaitUntilReplicationGroupAvailableStub = nil
	if fake.waitUntilReplicationGroupAvailableReturnsOnCall == nil {
		fake.waitUntilReplicationGroupAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilReplicationGroupAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableWithContext(arg1 aws.Context, arg2 *elasticache.DescribeReplicationGroupsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilReplicationGroupAvailableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilReplicationGroupAvailableWithContextReturnsOnCall[len(fake.waitUntilReplicationGroupAvailableWithContextArgsForCall)]
	fake.waitUntilReplicationGroupAvailableWithContextArgsForCall = append(fake.waitUntilReplicationGroupAvailableWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilReplicationGroupAvailableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilReplicationGroupAvailableWithContextMutex.Unlock()
	if fake.WaitUntilReplicationGroupAvailableWithContextStub != nil {
		return fake.WaitUntilReplicationGroupAvailableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilReplicationGroupAvailableWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableWithContextCallCount() int {
	fake.waitUntilReplicationGroupAvailableWithContextMutex.RLock()
	defer fake.waitUntilReplicationGroupAvailableWithContextMutex.RUnlock()
	return len(fake.waitUntilReplicationGroupAvailableWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeReplicationGroupsInput, []request.WaiterOption) {
	fake.waitUntilReplicationGroupAvailableWithContextMutex.RLock()
	defer fake.waitUntilReplicationGroupAvailableWithContextMutex.RUnlock()
	return fake.waitUntilReplicationGroupAvailableWithContextArgsForCall[i].arg1, fake.waitUntilReplicationGroupAvailableWithContextArgsForCall[i].arg2, fake.waitUntilReplicationGroupAvailableWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableWithContextReturns(result1 error) {
	fake.WaitUntilReplicationGroupAvailableWithContextStub = nil
	fake.waitUntilReplicationGroupAvailableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupAvailableWithContextReturnsOnCall(i int, result1 error) {
	fake.WaitUntilReplicationGroupAvailableWithContextStub = nil
	if fake.waitUntilReplicationGroupAvailableWithContextReturnsOnCall == nil {
		fake.waitUntilReplicationGroupAvailableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilReplicationGroupAvailableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeleted(arg1 *elasticache.DescribeReplicationGroupsInput) error {
	fake.waitUntilReplicationGroupDeletedMutex.Lock()
	ret, specificReturn := fake.waitUntilReplicationGroupDeletedReturnsOnCall[len(fake.waitUntilReplicationGroupDeletedArgsForCall)]
	fake.waitUntilReplicationGroupDeletedArgsForCall = append(fake.waitUntilReplicationGroupDeletedArgsForCall, struct {
		arg1 *elasticache.DescribeReplicationGroupsInput
	}{arg1})
	fake.recordInvocation("WaitUntilReplicationGroupDeleted", []interface{}{arg1})
	fake.waitUntilReplicationGroupDeletedMutex.Unlock()
	if fake.WaitUntilReplicationGroupDeletedStub != nil {
		return fake.WaitUntilReplicationGroupDeletedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilReplicationGroupDeletedReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedCallCount() int {
	fake.waitUntilReplicationGroupDeletedMutex.RLock()
	defer fake.waitUntilReplicationGroupDeletedMutex.RUnlock()
	return len(fake.waitUntilReplicationGroupDeletedArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedArgsForCall(i int) *elasticache.DescribeReplicationGroupsInput {
	fake.waitUntilReplicationGroupDeletedMutex.RLock()
	defer fake.waitUntilReplicationGroupDeletedMutex.RUnlock()
	return fake.waitUntilReplicationGroupDeletedArgsForCall[i].arg1
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedReturns(result1 error) {
	fake.WaitUntilReplicationGroupDeletedStub = nil
	fake.waitUntilReplicationGroupDeletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedReturnsOnCall(i int, result1 error) {
	fake.WaitUntilReplicationGroupDeletedStub = nil
	if fake.waitUntilReplicationGroupDeletedReturnsOnCall == nil {
		fake.waitUntilReplicationGroupDeletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilReplicationGroupDeletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedWithContext(arg1 aws.Context, arg2 *elasticache.DescribeReplicationGroupsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilReplicationGroupDeletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilReplicationGroupDeletedWithContextReturnsOnCall[len(fake.waitUntilReplicationGroupDeletedWithContextArgsForCall)]
	fake.waitUntilReplicationGroupDeletedWithContextArgsForCall = append(fake.waitUntilReplicationGroupDeletedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *elasticache.DescribeReplicationGroupsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilReplicationGroupDeletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilReplicationGroupDeletedWithContextMutex.Unlock()
	if fake.WaitUntilReplicationGroupDeletedWithContextStub != nil {
		return fake.WaitUntilReplicationGroupDeletedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilReplicationGroupDeletedWithContextReturns.result1
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedWithContextCallCount() int {
	fake.waitUntilReplicationGroupDeletedWithContextMutex.RLock()
	defer fake.waitUntilReplicationGroupDeletedWithContextMutex.RUnlock()
	return len(fake.waitUntilReplicationGroupDeletedWithContextArgsForCall)
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeReplicationGroupsInput, []request.WaiterOption) {
	fake.waitUntilReplicationGroupDeletedWithContextMutex.RLock()
	defer fake.waitUntilReplicationGroupDeletedWithContextMutex.RUnlock()
	return fake.waitUntilReplicationGroupDeletedWithContextArgsForCall[i].arg1, fake.waitUntilReplicationGroupDeletedWithContextArgsForCall[i].arg2, fake.waitUntilReplicationGroupDeletedWithContextArgsForCall[i].arg3
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedWithContextReturns(result1 error) {
	fake.WaitUntilReplicationGroupDeletedWithContextStub = nil
	fake.waitUntilReplicationGroupDeletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) WaitUntilReplicationGroupDeletedWithContextReturnsOnCall(i int, result1 error) {
	fake.WaitUntilReplicationGroupDeletedWithContextStub = nil
	if fake.waitUntilReplicationGroupDeletedWithContextReturnsOnCall == nil {
		fake.waitUntilReplicationGroupDeletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilReplicationGroupDeletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCacheAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addTagsToResourceMutex.RLock()
	defer fake.addTagsToResourceMutex.RUnlock()
	fake.addTagsToResourceWithContextMutex.RLock()
	defer fake.addTagsToResourceWithContextMutex.RUnlock()
	fake.addTagsToResourceRequestMutex.RLock()
	defer fake.addTagsToResourceRequestMutex.RUnlock()
	fake.authorizeCacheSecurityGroupIngressMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressMutex.RUnlock()
	fake.authorizeCacheSecurityGroupIngressWithContextMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressWithContextMutex.RUnlock()
	fake.authorizeCacheSecurityGroupIngressRequestMutex.RLock()
	defer fake.authorizeCacheSecurityGroupIngressRequestMutex.RUnlock()
	fake.copySnapshotMutex.RLock()
	defer fake.copySnapshotMutex.RUnlock()
	fake.copySnapshotWithContextMutex.RLock()
	defer fake.copySnapshotWithContextMutex.RUnlock()
	fake.copySnapshotRequestMutex.RLock()
	defer fake.copySnapshotRequestMutex.RUnlock()
	fake.createCacheClusterMutex.RLock()
	defer fake.createCacheClusterMutex.RUnlock()
	fake.createCacheClusterWithContextMutex.RLock()
	defer fake.createCacheClusterWithContextMutex.RUnlock()
	fake.createCacheClusterRequestMutex.RLock()
	defer fake.createCacheClusterRequestMutex.RUnlock()
	fake.createCacheParameterGroupMutex.RLock()
	defer fake.createCacheParameterGroupMutex.RUnlock()
	fake.createCacheParameterGroupWithContextMutex.RLock()
	defer fake.createCacheParameterGroupWithContextMutex.RUnlock()
	fake.createCacheParameterGroupRequestMutex.RLock()
	defer fake.createCacheParameterGroupRequestMutex.RUnlock()
	fake.createCacheSecurityGroupMutex.RLock()
	defer fake.createCacheSecurityGroupMutex.RUnlock()
	fake.createCacheSecurityGroupWithContextMutex.RLock()
	defer fake.createCacheSecurityGroupWithContextMutex.RUnlock()
	fake.createCacheSecurityGroupRequestMutex.RLock()
	defer fake.createCacheSecurityGroupRequestMutex.RUnlock()
	fake.createCacheSubnetGroupMutex.RLock()
	defer fake.createCacheSubnetGroupMutex.RUnlock()
	fake.createCacheSubnetGroupWithContextMutex.RLock()
	defer fake.createCacheSubnetGroupWithContextMutex.RUnlock()
	fake.createCacheSubnetGroupRequestMutex.RLock()
	defer fake.createCacheSubnetGroupRequestMutex.RUnlock()
	fake.createReplicationGroupMutex.RLock()
	defer fake.createReplicationGroupMutex.RUnlock()
	fake.createReplicationGroupWithContextMutex.RLock()
	defer fake.createReplicationGroupWithContextMutex.RUnlock()
	fake.createReplicationGroupRequestMutex.RLock()
	defer fake.createReplicationGroupRequestMutex.RUnlock()
	fake.createSnapshotMutex.RLock()
	defer fake.createSnapshotMutex.RUnlock()
	fake.createSnapshotWithContextMutex.RLock()
	defer fake.createSnapshotWithContextMutex.RUnlock()
	fake.createSnapshotRequestMutex.RLock()
	defer fake.createSnapshotRequestMutex.RUnlock()
	fake.deleteCacheClusterMutex.RLock()
	defer fake.deleteCacheClusterMutex.RUnlock()
	fake.deleteCacheClusterWithContextMutex.RLock()
	defer fake.deleteCacheClusterWithContextMutex.RUnlock()
	fake.deleteCacheClusterRequestMutex.RLock()
	defer fake.deleteCacheClusterRequestMutex.RUnlock()
	fake.deleteCacheParameterGroupMutex.RLock()
	defer fake.deleteCacheParameterGroupMutex.RUnlock()
	fake.deleteCacheParameterGroupWithContextMutex.RLock()
	defer fake.deleteCacheParameterGroupWithContextMutex.RUnlock()
	fake.deleteCacheParameterGroupRequestMutex.RLock()
	defer fake.deleteCacheParameterGroupRequestMutex.RUnlock()
	fake.deleteCacheSecurityGroupMutex.RLock()
	defer fake.deleteCacheSecurityGroupMutex.RUnlock()
	fake.deleteCacheSecurityGroupWithContextMutex.RLock()
	defer fake.deleteCacheSecurityGroupWithContextMutex.RUnlock()
	fake.deleteCacheSecurityGroupRequestMutex.RLock()
	defer fake.deleteCacheSecurityGroupRequestMutex.RUnlock()
	fake.deleteCacheSubnetGroupMutex.RLock()
	defer fake.deleteCacheSubnetGroupMutex.RUnlock()
	fake.deleteCacheSubnetGroupWithContextMutex.RLock()
	defer fake.deleteCacheSubnetGroupWithContextMutex.RUnlock()
	fake.deleteCacheSubnetGroupRequestMutex.RLock()
	defer fake.deleteCacheSubnetGroupRequestMutex.RUnlock()
	fake.deleteReplicationGroupMutex.RLock()
	defer fake.deleteReplicationGroupMutex.RUnlock()
	fake.deleteReplicationGroupWithContextMutex.RLock()
	defer fake.deleteReplicationGroupWithContextMutex.RUnlock()
	fake.deleteReplicationGroupRequestMutex.RLock()
	defer fake.deleteReplicationGroupRequestMutex.RUnlock()
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	fake.deleteSnapshotWithContextMutex.RLock()
	defer fake.deleteSnapshotWithContextMutex.RUnlock()
	fake.deleteSnapshotRequestMutex.RLock()
	defer fake.deleteSnapshotRequestMutex.RUnlock()
	fake.describeCacheClustersMutex.RLock()
	defer fake.describeCacheClustersMutex.RUnlock()
	fake.describeCacheClustersWithContextMutex.RLock()
	defer fake.describeCacheClustersWithContextMutex.RUnlock()
	fake.describeCacheClustersRequestMutex.RLock()
	defer fake.describeCacheClustersRequestMutex.RUnlock()
	fake.describeCacheClustersPagesMutex.RLock()
	defer fake.describeCacheClustersPagesMutex.RUnlock()
	fake.describeCacheClustersPagesWithContextMutex.RLock()
	defer fake.describeCacheClustersPagesWithContextMutex.RUnlock()
	fake.describeCacheEngineVersionsMutex.RLock()
	defer fake.describeCacheEngineVersionsMutex.RUnlock()
	fake.describeCacheEngineVersionsWithContextMutex.RLock()
	defer fake.describeCacheEngineVersionsWithContextMutex.RUnlock()
	fake.describeCacheEngineVersionsRequestMutex.RLock()
	defer fake.describeCacheEngineVersionsRequestMutex.RUnlock()
	fake.describeCacheEngineVersionsPagesMutex.RLock()
	defer fake.describeCacheEngineVersionsPagesMutex.RUnlock()
	fake.describeCacheEngineVersionsPagesWithContextMutex.RLock()
	defer fake.describeCacheEngineVersionsPagesWithContextMutex.RUnlock()
	fake.describeCacheParameterGroupsMutex.RLock()
	defer fake.describeCacheParameterGroupsMutex.RUnlock()
	fake.describeCacheParameterGroupsWithContextMutex.RLock()
	defer fake.describeCacheParameterGroupsWithContextMutex.RUnlock()
	fake.describeCacheParameterGroupsRequestMutex.RLock()
	defer fake.describeCacheParameterGroupsRequestMutex.RUnlock()
	fake.describeCacheParameterGroupsPagesMutex.RLock()
	defer fake.describeCacheParameterGroupsPagesMutex.RUnlock()
	fake.describeCacheParameterGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheParameterGroupsPagesWithContextMutex.RUnlock()
	fake.describeCacheParametersMutex.RLock()
	defer fake.describeCacheParametersMutex.RUnlock()
	fake.describeCacheParametersWithContextMutex.RLock()
	defer fake.describeCacheParametersWithContextMutex.RUnlock()
	fake.describeCacheParametersRequestMutex.RLock()
	defer fake.describeCacheParametersRequestMutex.RUnlock()
	fake.describeCacheParametersPagesMutex.RLock()
	defer fake.describeCacheParametersPagesMutex.RUnlock()
	fake.describeCacheParametersPagesWithContextMutex.RLock()
	defer fake.describeCacheParametersPagesWithContextMutex.RUnlock()
	fake.describeCacheSecurityGroupsMutex.RLock()
	defer fake.describeCacheSecurityGroupsMutex.RUnlock()
	fake.describeCacheSecurityGroupsWithContextMutex.RLock()
	defer fake.describeCacheSecurityGroupsWithContextMutex.RUnlock()
	fake.describeCacheSecurityGroupsRequestMutex.RLock()
	defer fake.describeCacheSecurityGroupsRequestMutex.RUnlock()
	fake.describeCacheSecurityGroupsPagesMutex.RLock()
	defer fake.describeCacheSecurityGroupsPagesMutex.RUnlock()
	fake.describeCacheSecurityGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheSecurityGroupsPagesWithContextMutex.RUnlock()
	fake.describeCacheSubnetGroupsMutex.RLock()
	defer fake.describeCacheSubnetGroupsMutex.RUnlock()
	fake.describeCacheSubnetGroupsWithContextMutex.RLock()
	defer fake.describeCacheSubnetGroupsWithContextMutex.RUnlock()
	fake.describeCacheSubnetGroupsRequestMutex.RLock()
	defer fake.describeCacheSubnetGroupsRequestMutex.RUnlock()
	fake.describeCacheSubnetGroupsPagesMutex.RLock()
	defer fake.describeCacheSubnetGroupsPagesMutex.RUnlock()
	fake.describeCacheSubnetGroupsPagesWithContextMutex.RLock()
	defer fake.describeCacheSubnetGroupsPagesWithContextMutex.RUnlock()
	fake.describeEngineDefaultParametersMutex.RLock()
	defer fake.describeEngineDefaultParametersMutex.RUnlock()
	fake.describeEngineDefaultParametersWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersWithContextMutex.RUnlock()
	fake.describeEngineDefaultParametersRequestMutex.RLock()
	defer fake.describeEngineDefaultParametersRequestMutex.RUnlock()
	fake.describeEngineDefaultParametersPagesMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesMutex.RUnlock()
	fake.describeEngineDefaultParametersPagesWithContextMutex.RLock()
	defer fake.describeEngineDefaultParametersPagesWithContextMutex.RUnlock()
	fake.describeEventsMutex.RLock()
	defer fake.describeEventsMutex.RUnlock()
	fake.describeEventsWithContextMutex.RLock()
	defer fake.describeEventsWithContextMutex.RUnlock()
	fake.describeEventsRequestMutex.RLock()
	defer fake.describeEventsRequestMutex.RUnlock()
	fake.describeEventsPagesMutex.RLock()
	defer fake.describeEventsPagesMutex.RUnlock()
	fake.describeEventsPagesWithContextMutex.RLock()
	defer fake.describeEventsPagesWithContextMutex.RUnlock()
	fake.describeReplicationGroupsMutex.RLock()
	defer fake.describeReplicationGroupsMutex.RUnlock()
	fake.describeReplicationGroupsWithContextMutex.RLock()
	defer fake.describeReplicationGroupsWithContextMutex.RUnlock()
	fake.describeReplicationGroupsRequestMutex.RLock()
	defer fake.describeReplicationGroupsRequestMutex.RUnlock()
	fake.describeReplicationGroupsPagesMutex.RLock()
	defer fake.describeReplicationGroupsPagesMutex.RUnlock()
	fake.describeReplicationGroupsPagesWithContextMutex.RLock()
	defer fake.describeReplicationGroupsPagesWithContextMutex.RUnlock()
	fake.describeReservedCacheNodesMutex.RLock()
	defer fake.describeReservedCacheNodesMutex.RUnlock()
	fake.describeReservedCacheNodesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesWithContextMutex.RUnlock()
	fake.describeReservedCacheNodesRequestMutex.RLock()
	defer fake.describeReservedCacheNodesRequestMutex.RUnlock()
	fake.describeReservedCacheNodesPagesMutex.RLock()
	defer fake.describeReservedCacheNodesPagesMutex.RUnlock()
	fake.describeReservedCacheNodesPagesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesPagesWithContextMutex.RUnlock()
	fake.describeReservedCacheNodesOfferingsMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsMutex.RUnlock()
	fake.describeReservedCacheNodesOfferingsWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsWithContextMutex.RUnlock()
	fake.describeReservedCacheNodesOfferingsRequestMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsRequestMutex.RUnlock()
	fake.describeReservedCacheNodesOfferingsPagesMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsPagesMutex.RUnlock()
	fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.RLock()
	defer fake.describeReservedCacheNodesOfferingsPagesWithContextMutex.RUnlock()
	fake.describeSnapshotsMutex.RLock()
	defer fake.describeSnapshotsMutex.RUnlock()
	fake.describeSnapshotsWithContextMutex.RLock()
	defer fake.describeSnapshotsWithContextMutex.RUnlock()
	fake.describeSnapshotsRequestMutex.RLock()
	defer fake.describeSnapshotsRequestMutex.RUnlock()
	fake.describeSnapshotsPagesMutex.RLock()
	defer fake.describeSnapshotsPagesMutex.RUnlock()
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	fake.listAllowedNodeTypeModificationsMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsMutex.RUnlock()
	fake.listAllowedNodeTypeModificationsWithContextMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsWithContextMutex.RUnlock()
	fake.listAllowedNodeTypeModificationsRequestMutex.RLock()
	defer fake.listAllowedNodeTypeModificationsRequestMutex.RUnlock()
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	fake.modifyCacheClusterMutex.RLock()
	defer fake.modifyCacheClusterMutex.RUnlock()
	fake.modifyCacheClusterWithContextMutex.RLock()
	defer fake.modifyCacheClusterWithContextMutex.RUnlock()
	fake.modifyCacheClusterRequestMutex.RLock()
	defer fake.modifyCacheClusterRequestMutex.RUnlock()
	fake.modifyCacheParameterGroupMutex.RLock()
	defer fake.modifyCacheParameterGroupMutex.RUnlock()
	fake.modifyCacheParameterGroupWithContextMutex.RLock()
	defer fake.modifyCacheParameterGroupWithContextMutex.RUnlock()
	fake.modifyCacheParameterGroupRequestMutex.RLock()
	defer fake.modifyCacheParameterGroupRequestMutex.RUnlock()
	fake.modifyCacheSubnetGroupMutex.RLock()
	defer fake.modifyCacheSubnetGroupMutex.RUnlock()
	fake.modifyCacheSubnetGroupWithContextMutex.RLock()
	defer fake.modifyCacheSubnetGroupWithContextMutex.RUnlock()
	fake.modifyCacheSubnetGroupRequestMutex.RLock()
	defer fake.modifyCacheSubnetGroupRequestMutex.RUnlock()
	fake.modifyReplicationGroupMutex.RLock()
	defer fake.modifyReplicationGroupMutex.RUnlock()
	fake.modifyReplicationGroupWithContextMutex.RLock()
	defer fake.modifyReplicationGroupWithContextMutex.RUnlock()
	fake.modifyReplicationGroupRequestMutex.RLock()
	defer fake.modifyReplicationGroupRequestMutex.RUnlock()
	fake.modifyReplicationGroupShardConfigurationMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationMutex.RUnlock()
	fake.modifyReplicationGroupShardConfigurationWithContextMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationWithContextMutex.RUnlock()
	fake.modifyReplicationGroupShardConfigurationRequestMutex.RLock()
	defer fake.modifyReplicationGroupShardConfigurationRequestMutex.RUnlock()
	fake.purchaseReservedCacheNodesOfferingMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingMutex.RUnlock()
	fake.purchaseReservedCacheNodesOfferingWithContextMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingWithContextMutex.RUnlock()
	fake.purchaseReservedCacheNodesOfferingRequestMutex.RLock()
	defer fake.purchaseReservedCacheNodesOfferingRequestMutex.RUnlock()
	fake.rebootCacheClusterMutex.RLock()
	defer fake.rebootCacheClusterMutex.RUnlock()
	fake.rebootCacheClusterWithContextMutex.RLock()
	defer fake.rebootCacheClusterWithContextMutex.RUnlock()
	fake.rebootCacheClusterRequestMutex.RLock()
	defer fake.rebootCacheClusterRequestMutex.RUnlock()
	fake.removeTagsFromResourceMutex.RLock()
	defer fake.removeTagsFromResourceMutex.RUnlock()
	fake.removeTagsFromResourceWithContextMutex.RLock()
	defer fake.removeTagsFromResourceWithContextMutex.RUnlock()
	fake.removeTagsFromResourceRequestMutex.RLock()
	defer fake.removeTagsFromResourceRequestMutex.RUnlock()
	fake.resetCacheParameterGroupMutex.RLock()
	defer fake.resetCacheParameterGroupMutex.RUnlock()
	fake.resetCacheParameterGroupWithContextMutex.RLock()
	defer fake.resetCacheParameterGroupWithContextMutex.RUnlock()
	fake.resetCacheParameterGroupRequestMutex.RLock()
	defer fake.resetCacheParameterGroupRequestMutex.RUnlock()
	fake.revokeCacheSecurityGroupIngressMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressMutex.RUnlock()
	fake.revokeCacheSecurityGroupIngressWithContextMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressWithContextMutex.RUnlock()
	fake.revokeCacheSecurityGroupIngressRequestMutex.RLock()
	defer fake.revokeCacheSecurityGroupIngressRequestMutex.RUnlock()
	fake.testFailoverMutex.RLock()
	defer fake.testFailoverMutex.RUnlock()
	fake.testFailoverWithContextMutex.RLock()
	defer fake.testFailoverWithContextMutex.RUnlock()
	fake.testFailoverRequestMutex.RLock()
	defer fake.testFailoverRequestMutex.RUnlock()
	fake.waitUntilCacheClusterAvailableMutex.RLock()
	defer fake.waitUntilCacheClusterAvailableMutex.RUnlock()
	fake.waitUntilCacheClusterAvailableWithContextMutex.RLock()
	defer fake.waitUntilCacheClusterAvailableWithContextMutex.RUnlock()
	fake.waitUntilCacheClusterDeletedMutex.RLock()
	defer fake.waitUntilCacheClusterDeletedMutex.RUnlock()
	fake.waitUntilCacheClusterDeletedWithContextMutex.RLock()
	defer fake.waitUntilCacheClusterDeletedWithContextMutex.RUnlock()
	fake.waitUntilReplicationGroupAvailableMutex.RLock()
	defer fake.waitUntilReplicationGroupAvailableMutex.RUnlock()
	fake.waitUntilReplicationGroupAvailableWithContextMutex.RLock()
	defer fake.waitUntilReplicationGroupAvailableWithContextMutex.RUnlock()
	fake.waitUntilReplicationGroupDeletedMutex.RLock()
	defer fake.waitUntilReplicationGroupDeletedMutex.RUnlock()
	fake.waitUntilReplicationGroupDeletedWithContextMutex.RLock()
	defer fake.waitUntilReplicationGroupDeletedWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeElastiCacheAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ elasticacheiface.ElastiCacheAPI = new(FakeElastiCacheAPI)
