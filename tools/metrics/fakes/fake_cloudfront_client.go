// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/cloudfront/cloudfrontiface"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudfront"
)

type FakeCloudFrontAPI struct {
	CreateCloudFrontOriginAccessIdentityStub        func(*cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error)
	createCloudFrontOriginAccessIdentityMutex       sync.RWMutex
	createCloudFrontOriginAccessIdentityArgsForCall []struct {
		arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput
	}
	createCloudFrontOriginAccessIdentityReturns struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	createCloudFrontOriginAccessIdentityReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	CreateCloudFrontOriginAccessIdentityWithContextStub        func(aws.Context, *cloudfront.CreateCloudFrontOriginAccessIdentityInput, ...request.Option) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error)
	createCloudFrontOriginAccessIdentityWithContextMutex       sync.RWMutex
	createCloudFrontOriginAccessIdentityWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.CreateCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}
	createCloudFrontOriginAccessIdentityWithContextReturns struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	createCloudFrontOriginAccessIdentityWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	CreateCloudFrontOriginAccessIdentityRequestStub        func(*cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.CreateCloudFrontOriginAccessIdentityOutput)
	createCloudFrontOriginAccessIdentityRequestMutex       sync.RWMutex
	createCloudFrontOriginAccessIdentityRequestArgsForCall []struct {
		arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput
	}
	createCloudFrontOriginAccessIdentityRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	}
	createCloudFrontOriginAccessIdentityRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	}
	CreateDistributionStub        func(*cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error)
	createDistributionMutex       sync.RWMutex
	createDistributionArgsForCall []struct {
		arg1 *cloudfront.CreateDistributionInput
	}
	createDistributionReturns struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}
	createDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}
	CreateDistributionWithContextStub        func(aws.Context, *cloudfront.CreateDistributionInput, ...request.Option) (*cloudfront.CreateDistributionOutput, error)
	createDistributionWithContextMutex       sync.RWMutex
	createDistributionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.CreateDistributionInput
		arg3 []request.Option
	}
	createDistributionWithContextReturns struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}
	createDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}
	CreateDistributionRequestStub        func(*cloudfront.CreateDistributionInput) (*request.Request, *cloudfront.CreateDistributionOutput)
	createDistributionRequestMutex       sync.RWMutex
	createDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.CreateDistributionInput
	}
	createDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionOutput
	}
	createDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionOutput
	}
	CreateDistributionWithTagsStub        func(*cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error)
	createDistributionWithTagsMutex       sync.RWMutex
	createDistributionWithTagsArgsForCall []struct {
		arg1 *cloudfront.CreateDistributionWithTagsInput
	}
	createDistributionWithTagsReturns struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}
	createDistributionWithTagsReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}
	CreateDistributionWithTagsWithContextStub        func(aws.Context, *cloudfront.CreateDistributionWithTagsInput, ...request.Option) (*cloudfront.CreateDistributionWithTagsOutput, error)
	createDistributionWithTagsWithContextMutex       sync.RWMutex
	createDistributionWithTagsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.CreateDistributionWithTagsInput
		arg3 []request.Option
	}
	createDistributionWithTagsWithContextReturns struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}
	createDistributionWithTagsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}
	CreateDistributionWithTagsRequestStub        func(*cloudfront.CreateDistributionWithTagsInput) (*request.Request, *cloudfront.CreateDistributionWithTagsOutput)
	createDistributionWithTagsRequestMutex       sync.RWMutex
	createDistributionWithTagsRequestArgsForCall []struct {
		arg1 *cloudfront.CreateDistributionWithTagsInput
	}
	createDistributionWithTagsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionWithTagsOutput
	}
	createDistributionWithTagsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionWithTagsOutput
	}
	CreateInvalidationStub        func(*cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error)
	createInvalidationMutex       sync.RWMutex
	createInvalidationArgsForCall []struct {
		arg1 *cloudfront.CreateInvalidationInput
	}
	createInvalidationReturns struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}
	createInvalidationReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}
	CreateInvalidationWithContextStub        func(aws.Context, *cloudfront.CreateInvalidationInput, ...request.Option) (*cloudfront.CreateInvalidationOutput, error)
	createInvalidationWithContextMutex       sync.RWMutex
	createInvalidationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.CreateInvalidationInput
		arg3 []request.Option
	}
	createInvalidationWithContextReturns struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}
	createInvalidationWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}
	CreateInvalidationRequestStub        func(*cloudfront.CreateInvalidationInput) (*request.Request, *cloudfront.CreateInvalidationOutput)
	createInvalidationRequestMutex       sync.RWMutex
	createInvalidationRequestArgsForCall []struct {
		arg1 *cloudfront.CreateInvalidationInput
	}
	createInvalidationRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateInvalidationOutput
	}
	createInvalidationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateInvalidationOutput
	}
	CreateStreamingDistributionStub        func(*cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error)
	createStreamingDistributionMutex       sync.RWMutex
	createStreamingDistributionArgsForCall []struct {
		arg1 *cloudfront.CreateStreamingDistributionInput
	}
	createStreamingDistributionReturns struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}
	createStreamingDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}
	CreateStreamingDistributionWithContextStub        func(aws.Context, *cloudfront.CreateStreamingDistributionInput, ...request.Option) (*cloudfront.CreateStreamingDistributionOutput, error)
	createStreamingDistributionWithContextMutex       sync.RWMutex
	createStreamingDistributionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.CreateStreamingDistributionInput
		arg3 []request.Option
	}
	createStreamingDistributionWithContextReturns struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}
	createStreamingDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}
	CreateStreamingDistributionRequestStub        func(*cloudfront.CreateStreamingDistributionInput) (*request.Request, *cloudfront.CreateStreamingDistributionOutput)
	createStreamingDistributionRequestMutex       sync.RWMutex
	createStreamingDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.CreateStreamingDistributionInput
	}
	createStreamingDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionOutput
	}
	createStreamingDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionOutput
	}
	CreateStreamingDistributionWithTagsStub        func(*cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error)
	createStreamingDistributionWithTagsMutex       sync.RWMutex
	createStreamingDistributionWithTagsArgsForCall []struct {
		arg1 *cloudfront.CreateStreamingDistributionWithTagsInput
	}
	createStreamingDistributionWithTagsReturns struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}
	createStreamingDistributionWithTagsReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}
	CreateStreamingDistributionWithTagsWithContextStub        func(aws.Context, *cloudfront.CreateStreamingDistributionWithTagsInput, ...request.Option) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error)
	createStreamingDistributionWithTagsWithContextMutex       sync.RWMutex
	createStreamingDistributionWithTagsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.CreateStreamingDistributionWithTagsInput
		arg3 []request.Option
	}
	createStreamingDistributionWithTagsWithContextReturns struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}
	createStreamingDistributionWithTagsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}
	CreateStreamingDistributionWithTagsRequestStub        func(*cloudfront.CreateStreamingDistributionWithTagsInput) (*request.Request, *cloudfront.CreateStreamingDistributionWithTagsOutput)
	createStreamingDistributionWithTagsRequestMutex       sync.RWMutex
	createStreamingDistributionWithTagsRequestArgsForCall []struct {
		arg1 *cloudfront.CreateStreamingDistributionWithTagsInput
	}
	createStreamingDistributionWithTagsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionWithTagsOutput
	}
	createStreamingDistributionWithTagsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionWithTagsOutput
	}
	DeleteCloudFrontOriginAccessIdentityStub        func(*cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error)
	deleteCloudFrontOriginAccessIdentityMutex       sync.RWMutex
	deleteCloudFrontOriginAccessIdentityArgsForCall []struct {
		arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput
	}
	deleteCloudFrontOriginAccessIdentityReturns struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	deleteCloudFrontOriginAccessIdentityReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	DeleteCloudFrontOriginAccessIdentityWithContextStub        func(aws.Context, *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, ...request.Option) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error)
	deleteCloudFrontOriginAccessIdentityWithContextMutex       sync.RWMutex
	deleteCloudFrontOriginAccessIdentityWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}
	deleteCloudFrontOriginAccessIdentityWithContextReturns struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	deleteCloudFrontOriginAccessIdentityWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	DeleteCloudFrontOriginAccessIdentityRequestStub        func(*cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput)
	deleteCloudFrontOriginAccessIdentityRequestMutex       sync.RWMutex
	deleteCloudFrontOriginAccessIdentityRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput
	}
	deleteCloudFrontOriginAccessIdentityRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	}
	deleteCloudFrontOriginAccessIdentityRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	}
	DeleteDistributionStub        func(*cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error)
	deleteDistributionMutex       sync.RWMutex
	deleteDistributionArgsForCall []struct {
		arg1 *cloudfront.DeleteDistributionInput
	}
	deleteDistributionReturns struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}
	deleteDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}
	DeleteDistributionWithContextStub        func(aws.Context, *cloudfront.DeleteDistributionInput, ...request.Option) (*cloudfront.DeleteDistributionOutput, error)
	deleteDistributionWithContextMutex       sync.RWMutex
	deleteDistributionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.DeleteDistributionInput
		arg3 []request.Option
	}
	deleteDistributionWithContextReturns struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}
	deleteDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}
	DeleteDistributionRequestStub        func(*cloudfront.DeleteDistributionInput) (*request.Request, *cloudfront.DeleteDistributionOutput)
	deleteDistributionRequestMutex       sync.RWMutex
	deleteDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteDistributionInput
	}
	deleteDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteDistributionOutput
	}
	deleteDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteDistributionOutput
	}
	DeleteServiceLinkedRoleStub        func(*cloudfront.DeleteServiceLinkedRoleInput) (*cloudfront.DeleteServiceLinkedRoleOutput, error)
	deleteServiceLinkedRoleMutex       sync.RWMutex
	deleteServiceLinkedRoleArgsForCall []struct {
		arg1 *cloudfront.DeleteServiceLinkedRoleInput
	}
	deleteServiceLinkedRoleReturns struct {
		result1 *cloudfront.DeleteServiceLinkedRoleOutput
		result2 error
	}
	deleteServiceLinkedRoleReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteServiceLinkedRoleOutput
		result2 error
	}
	DeleteServiceLinkedRoleWithContextStub        func(aws.Context, *cloudfront.DeleteServiceLinkedRoleInput, ...request.Option) (*cloudfront.DeleteServiceLinkedRoleOutput, error)
	deleteServiceLinkedRoleWithContextMutex       sync.RWMutex
	deleteServiceLinkedRoleWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.DeleteServiceLinkedRoleInput
		arg3 []request.Option
	}
	deleteServiceLinkedRoleWithContextReturns struct {
		result1 *cloudfront.DeleteServiceLinkedRoleOutput
		result2 error
	}
	deleteServiceLinkedRoleWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteServiceLinkedRoleOutput
		result2 error
	}
	DeleteServiceLinkedRoleRequestStub        func(*cloudfront.DeleteServiceLinkedRoleInput) (*request.Request, *cloudfront.DeleteServiceLinkedRoleOutput)
	deleteServiceLinkedRoleRequestMutex       sync.RWMutex
	deleteServiceLinkedRoleRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteServiceLinkedRoleInput
	}
	deleteServiceLinkedRoleRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteServiceLinkedRoleOutput
	}
	deleteServiceLinkedRoleRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteServiceLinkedRoleOutput
	}
	DeleteStreamingDistributionStub        func(*cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error)
	deleteStreamingDistributionMutex       sync.RWMutex
	deleteStreamingDistributionArgsForCall []struct {
		arg1 *cloudfront.DeleteStreamingDistributionInput
	}
	deleteStreamingDistributionReturns struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}
	deleteStreamingDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}
	DeleteStreamingDistributionWithContextStub        func(aws.Context, *cloudfront.DeleteStreamingDistributionInput, ...request.Option) (*cloudfront.DeleteStreamingDistributionOutput, error)
	deleteStreamingDistributionWithContextMutex       sync.RWMutex
	deleteStreamingDistributionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.DeleteStreamingDistributionInput
		arg3 []request.Option
	}
	deleteStreamingDistributionWithContextReturns struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}
	deleteStreamingDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}
	DeleteStreamingDistributionRequestStub        func(*cloudfront.DeleteStreamingDistributionInput) (*request.Request, *cloudfront.DeleteStreamingDistributionOutput)
	deleteStreamingDistributionRequestMutex       sync.RWMutex
	deleteStreamingDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.DeleteStreamingDistributionInput
	}
	deleteStreamingDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.DeleteStreamingDistributionOutput
	}
	deleteStreamingDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.DeleteStreamingDistributionOutput
	}
	GetCloudFrontOriginAccessIdentityStub        func(*cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error)
	getCloudFrontOriginAccessIdentityMutex       sync.RWMutex
	getCloudFrontOriginAccessIdentityArgsForCall []struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput
	}
	getCloudFrontOriginAccessIdentityReturns struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	getCloudFrontOriginAccessIdentityReturnsOnCall map[int]struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	GetCloudFrontOriginAccessIdentityWithContextStub        func(aws.Context, *cloudfront.GetCloudFrontOriginAccessIdentityInput, ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error)
	getCloudFrontOriginAccessIdentityWithContextMutex       sync.RWMutex
	getCloudFrontOriginAccessIdentityWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.GetCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}
	getCloudFrontOriginAccessIdentityWithContextReturns struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	getCloudFrontOriginAccessIdentityWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	GetCloudFrontOriginAccessIdentityRequestStub        func(*cloudfront.GetCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityOutput)
	getCloudFrontOriginAccessIdentityRequestMutex       sync.RWMutex
	getCloudFrontOriginAccessIdentityRequestArgsForCall []struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput
	}
	getCloudFrontOriginAccessIdentityRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
	}
	getCloudFrontOriginAccessIdentityRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
	}
	GetCloudFrontOriginAccessIdentityConfigStub        func(*cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error)
	getCloudFrontOriginAccessIdentityConfigMutex       sync.RWMutex
	getCloudFrontOriginAccessIdentityConfigArgsForCall []struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput
	}
	getCloudFrontOriginAccessIdentityConfigReturns struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}
	getCloudFrontOriginAccessIdentityConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}
	GetCloudFrontOriginAccessIdentityConfigWithContextStub        func(aws.Context, *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error)
	getCloudFrontOriginAccessIdentityConfigWithContextMutex       sync.RWMutex
	getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput
		arg3 []request.Option
	}
	getCloudFrontOriginAccessIdentityConfigWithContextReturns struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}
	getCloudFrontOriginAccessIdentityConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}
	GetCloudFrontOriginAccessIdentityConfigRequestStub        func(*cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput)
	getCloudFrontOriginAccessIdentityConfigRequestMutex       sync.RWMutex
	getCloudFrontOriginAccessIdentityConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput
	}
	getCloudFrontOriginAccessIdentityConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	}
	getCloudFrontOriginAccessIdentityConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	}
	GetDistributionStub        func(*cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error)
	getDistributionMutex       sync.RWMutex
	getDistributionArgsForCall []struct {
		arg1 *cloudfront.GetDistributionInput
	}
	getDistributionReturns struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}
	getDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}
	GetDistributionWithContextStub        func(aws.Context, *cloudfront.GetDistributionInput, ...request.Option) (*cloudfront.GetDistributionOutput, error)
	getDistributionWithContextMutex       sync.RWMutex
	getDistributionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.GetDistributionInput
		arg3 []request.Option
	}
	getDistributionWithContextReturns struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}
	getDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}
	GetDistributionRequestStub        func(*cloudfront.GetDistributionInput) (*request.Request, *cloudfront.GetDistributionOutput)
	getDistributionRequestMutex       sync.RWMutex
	getDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.GetDistributionInput
	}
	getDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionOutput
	}
	getDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionOutput
	}
	GetDistributionConfigStub        func(*cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error)
	getDistributionConfigMutex       sync.RWMutex
	getDistributionConfigArgsForCall []struct {
		arg1 *cloudfront.GetDistributionConfigInput
	}
	getDistributionConfigReturns struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}
	getDistributionConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}
	GetDistributionConfigWithContextStub        func(aws.Context, *cloudfront.GetDistributionConfigInput, ...request.Option) (*cloudfront.GetDistributionConfigOutput, error)
	getDistributionConfigWithContextMutex       sync.RWMutex
	getDistributionConfigWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.GetDistributionConfigInput
		arg3 []request.Option
	}
	getDistributionConfigWithContextReturns struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}
	getDistributionConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}
	GetDistributionConfigRequestStub        func(*cloudfront.GetDistributionConfigInput) (*request.Request, *cloudfront.GetDistributionConfigOutput)
	getDistributionConfigRequestMutex       sync.RWMutex
	getDistributionConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetDistributionConfigInput
	}
	getDistributionConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionConfigOutput
	}
	getDistributionConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionConfigOutput
	}
	GetInvalidationStub        func(*cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error)
	getInvalidationMutex       sync.RWMutex
	getInvalidationArgsForCall []struct {
		arg1 *cloudfront.GetInvalidationInput
	}
	getInvalidationReturns struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}
	getInvalidationReturnsOnCall map[int]struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}
	GetInvalidationWithContextStub        func(aws.Context, *cloudfront.GetInvalidationInput, ...request.Option) (*cloudfront.GetInvalidationOutput, error)
	getInvalidationWithContextMutex       sync.RWMutex
	getInvalidationWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.GetInvalidationInput
		arg3 []request.Option
	}
	getInvalidationWithContextReturns struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}
	getInvalidationWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}
	GetInvalidationRequestStub        func(*cloudfront.GetInvalidationInput) (*request.Request, *cloudfront.GetInvalidationOutput)
	getInvalidationRequestMutex       sync.RWMutex
	getInvalidationRequestArgsForCall []struct {
		arg1 *cloudfront.GetInvalidationInput
	}
	getInvalidationRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetInvalidationOutput
	}
	getInvalidationRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetInvalidationOutput
	}
	GetStreamingDistributionStub        func(*cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error)
	getStreamingDistributionMutex       sync.RWMutex
	getStreamingDistributionArgsForCall []struct {
		arg1 *cloudfront.GetStreamingDistributionInput
	}
	getStreamingDistributionReturns struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}
	getStreamingDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}
	GetStreamingDistributionWithContextStub        func(aws.Context, *cloudfront.GetStreamingDistributionInput, ...request.Option) (*cloudfront.GetStreamingDistributionOutput, error)
	getStreamingDistributionWithContextMutex       sync.RWMutex
	getStreamingDistributionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.GetStreamingDistributionInput
		arg3 []request.Option
	}
	getStreamingDistributionWithContextReturns struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}
	getStreamingDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}
	GetStreamingDistributionRequestStub        func(*cloudfront.GetStreamingDistributionInput) (*request.Request, *cloudfront.GetStreamingDistributionOutput)
	getStreamingDistributionRequestMutex       sync.RWMutex
	getStreamingDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.GetStreamingDistributionInput
	}
	getStreamingDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionOutput
	}
	getStreamingDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionOutput
	}
	GetStreamingDistributionConfigStub        func(*cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error)
	getStreamingDistributionConfigMutex       sync.RWMutex
	getStreamingDistributionConfigArgsForCall []struct {
		arg1 *cloudfront.GetStreamingDistributionConfigInput
	}
	getStreamingDistributionConfigReturns struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}
	getStreamingDistributionConfigReturnsOnCall map[int]struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}
	GetStreamingDistributionConfigWithContextStub        func(aws.Context, *cloudfront.GetStreamingDistributionConfigInput, ...request.Option) (*cloudfront.GetStreamingDistributionConfigOutput, error)
	getStreamingDistributionConfigWithContextMutex       sync.RWMutex
	getStreamingDistributionConfigWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.GetStreamingDistributionConfigInput
		arg3 []request.Option
	}
	getStreamingDistributionConfigWithContextReturns struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}
	getStreamingDistributionConfigWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}
	GetStreamingDistributionConfigRequestStub        func(*cloudfront.GetStreamingDistributionConfigInput) (*request.Request, *cloudfront.GetStreamingDistributionConfigOutput)
	getStreamingDistributionConfigRequestMutex       sync.RWMutex
	getStreamingDistributionConfigRequestArgsForCall []struct {
		arg1 *cloudfront.GetStreamingDistributionConfigInput
	}
	getStreamingDistributionConfigRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionConfigOutput
	}
	getStreamingDistributionConfigRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionConfigOutput
	}
	ListCloudFrontOriginAccessIdentitiesStub        func(*cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error)
	listCloudFrontOriginAccessIdentitiesMutex       sync.RWMutex
	listCloudFrontOriginAccessIdentitiesArgsForCall []struct {
		arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
	}
	listCloudFrontOriginAccessIdentitiesReturns struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}
	listCloudFrontOriginAccessIdentitiesReturnsOnCall map[int]struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}
	ListCloudFrontOriginAccessIdentitiesWithContextStub        func(aws.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, ...request.Option) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error)
	listCloudFrontOriginAccessIdentitiesWithContextMutex       sync.RWMutex
	listCloudFrontOriginAccessIdentitiesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
		arg3 []request.Option
	}
	listCloudFrontOriginAccessIdentitiesWithContextReturns struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}
	listCloudFrontOriginAccessIdentitiesWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}
	ListCloudFrontOriginAccessIdentitiesRequestStub        func(*cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*request.Request, *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput)
	listCloudFrontOriginAccessIdentitiesRequestMutex       sync.RWMutex
	listCloudFrontOriginAccessIdentitiesRequestArgsForCall []struct {
		arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
	}
	listCloudFrontOriginAccessIdentitiesRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	}
	listCloudFrontOriginAccessIdentitiesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	}
	ListCloudFrontOriginAccessIdentitiesPagesStub        func(*cloudfront.ListCloudFrontOriginAccessIdentitiesInput, func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool) error
	listCloudFrontOriginAccessIdentitiesPagesMutex       sync.RWMutex
	listCloudFrontOriginAccessIdentitiesPagesArgsForCall []struct {
		arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
		arg2 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool
	}
	listCloudFrontOriginAccessIdentitiesPagesReturns struct {
		result1 error
	}
	listCloudFrontOriginAccessIdentitiesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListCloudFrontOriginAccessIdentitiesPagesWithContextStub        func(aws.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, ...request.Option) error
	listCloudFrontOriginAccessIdentitiesPagesWithContextMutex       sync.RWMutex
	listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
		arg3 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool
		arg4 []request.Option
	}
	listCloudFrontOriginAccessIdentitiesPagesWithContextReturns struct {
		result1 error
	}
	listCloudFrontOriginAccessIdentitiesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListDistributionsStub        func(*cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error)
	listDistributionsMutex       sync.RWMutex
	listDistributionsArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsInput
	}
	listDistributionsReturns struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}
	listDistributionsReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}
	ListDistributionsWithContextStub        func(aws.Context, *cloudfront.ListDistributionsInput, ...request.Option) (*cloudfront.ListDistributionsOutput, error)
	listDistributionsWithContextMutex       sync.RWMutex
	listDistributionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.ListDistributionsInput
		arg3 []request.Option
	}
	listDistributionsWithContextReturns struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}
	listDistributionsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}
	ListDistributionsRequestStub        func(*cloudfront.ListDistributionsInput) (*request.Request, *cloudfront.ListDistributionsOutput)
	listDistributionsRequestMutex       sync.RWMutex
	listDistributionsRequestArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsInput
	}
	listDistributionsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsOutput
	}
	listDistributionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsOutput
	}
	ListDistributionsPagesStub        func(*cloudfront.ListDistributionsInput, func(*cloudfront.ListDistributionsOutput, bool) bool) error
	listDistributionsPagesMutex       sync.RWMutex
	listDistributionsPagesArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsInput
		arg2 func(*cloudfront.ListDistributionsOutput, bool) bool
	}
	listDistributionsPagesReturns struct {
		result1 error
	}
	listDistributionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListDistributionsPagesWithContextStub        func(aws.Context, *cloudfront.ListDistributionsInput, func(*cloudfront.ListDistributionsOutput, bool) bool, ...request.Option) error
	listDistributionsPagesWithContextMutex       sync.RWMutex
	listDistributionsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.ListDistributionsInput
		arg3 func(*cloudfront.ListDistributionsOutput, bool) bool
		arg4 []request.Option
	}
	listDistributionsPagesWithContextReturns struct {
		result1 error
	}
	listDistributionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListDistributionsByWebACLIdStub        func(*cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error)
	listDistributionsByWebACLIdMutex       sync.RWMutex
	listDistributionsByWebACLIdArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsByWebACLIdInput
	}
	listDistributionsByWebACLIdReturns struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}
	listDistributionsByWebACLIdReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}
	ListDistributionsByWebACLIdWithContextStub        func(aws.Context, *cloudfront.ListDistributionsByWebACLIdInput, ...request.Option) (*cloudfront.ListDistributionsByWebACLIdOutput, error)
	listDistributionsByWebACLIdWithContextMutex       sync.RWMutex
	listDistributionsByWebACLIdWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.ListDistributionsByWebACLIdInput
		arg3 []request.Option
	}
	listDistributionsByWebACLIdWithContextReturns struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}
	listDistributionsByWebACLIdWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}
	ListDistributionsByWebACLIdRequestStub        func(*cloudfront.ListDistributionsByWebACLIdInput) (*request.Request, *cloudfront.ListDistributionsByWebACLIdOutput)
	listDistributionsByWebACLIdRequestMutex       sync.RWMutex
	listDistributionsByWebACLIdRequestArgsForCall []struct {
		arg1 *cloudfront.ListDistributionsByWebACLIdInput
	}
	listDistributionsByWebACLIdRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByWebACLIdOutput
	}
	listDistributionsByWebACLIdRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByWebACLIdOutput
	}
	ListInvalidationsStub        func(*cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error)
	listInvalidationsMutex       sync.RWMutex
	listInvalidationsArgsForCall []struct {
		arg1 *cloudfront.ListInvalidationsInput
	}
	listInvalidationsReturns struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}
	listInvalidationsReturnsOnCall map[int]struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}
	ListInvalidationsWithContextStub        func(aws.Context, *cloudfront.ListInvalidationsInput, ...request.Option) (*cloudfront.ListInvalidationsOutput, error)
	listInvalidationsWithContextMutex       sync.RWMutex
	listInvalidationsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.ListInvalidationsInput
		arg3 []request.Option
	}
	listInvalidationsWithContextReturns struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}
	listInvalidationsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}
	ListInvalidationsRequestStub        func(*cloudfront.ListInvalidationsInput) (*request.Request, *cloudfront.ListInvalidationsOutput)
	listInvalidationsRequestMutex       sync.RWMutex
	listInvalidationsRequestArgsForCall []struct {
		arg1 *cloudfront.ListInvalidationsInput
	}
	listInvalidationsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListInvalidationsOutput
	}
	listInvalidationsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListInvalidationsOutput
	}
	ListInvalidationsPagesStub        func(*cloudfront.ListInvalidationsInput, func(*cloudfront.ListInvalidationsOutput, bool) bool) error
	listInvalidationsPagesMutex       sync.RWMutex
	listInvalidationsPagesArgsForCall []struct {
		arg1 *cloudfront.ListInvalidationsInput
		arg2 func(*cloudfront.ListInvalidationsOutput, bool) bool
	}
	listInvalidationsPagesReturns struct {
		result1 error
	}
	listInvalidationsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListInvalidationsPagesWithContextStub        func(aws.Context, *cloudfront.ListInvalidationsInput, func(*cloudfront.ListInvalidationsOutput, bool) bool, ...request.Option) error
	listInvalidationsPagesWithContextMutex       sync.RWMutex
	listInvalidationsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.ListInvalidationsInput
		arg3 func(*cloudfront.ListInvalidationsOutput, bool) bool
		arg4 []request.Option
	}
	listInvalidationsPagesWithContextReturns struct {
		result1 error
	}
	listInvalidationsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListStreamingDistributionsStub        func(*cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error)
	listStreamingDistributionsMutex       sync.RWMutex
	listStreamingDistributionsArgsForCall []struct {
		arg1 *cloudfront.ListStreamingDistributionsInput
	}
	listStreamingDistributionsReturns struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}
	listStreamingDistributionsReturnsOnCall map[int]struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}
	ListStreamingDistributionsWithContextStub        func(aws.Context, *cloudfront.ListStreamingDistributionsInput, ...request.Option) (*cloudfront.ListStreamingDistributionsOutput, error)
	listStreamingDistributionsWithContextMutex       sync.RWMutex
	listStreamingDistributionsWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.ListStreamingDistributionsInput
		arg3 []request.Option
	}
	listStreamingDistributionsWithContextReturns struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}
	listStreamingDistributionsWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}
	ListStreamingDistributionsRequestStub        func(*cloudfront.ListStreamingDistributionsInput) (*request.Request, *cloudfront.ListStreamingDistributionsOutput)
	listStreamingDistributionsRequestMutex       sync.RWMutex
	listStreamingDistributionsRequestArgsForCall []struct {
		arg1 *cloudfront.ListStreamingDistributionsInput
	}
	listStreamingDistributionsRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListStreamingDistributionsOutput
	}
	listStreamingDistributionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListStreamingDistributionsOutput
	}
	ListStreamingDistributionsPagesStub        func(*cloudfront.ListStreamingDistributionsInput, func(*cloudfront.ListStreamingDistributionsOutput, bool) bool) error
	listStreamingDistributionsPagesMutex       sync.RWMutex
	listStreamingDistributionsPagesArgsForCall []struct {
		arg1 *cloudfront.ListStreamingDistributionsInput
		arg2 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool
	}
	listStreamingDistributionsPagesReturns struct {
		result1 error
	}
	listStreamingDistributionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListStreamingDistributionsPagesWithContextStub        func(aws.Context, *cloudfront.ListStreamingDistributionsInput, func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, ...request.Option) error
	listStreamingDistributionsPagesWithContextMutex       sync.RWMutex
	listStreamingDistributionsPagesWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.ListStreamingDistributionsInput
		arg3 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool
		arg4 []request.Option
	}
	listStreamingDistributionsPagesWithContextReturns struct {
		result1 error
	}
	listStreamingDistributionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListTagsForResourceStub        func(*cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error)
	listTagsForResourceMutex       sync.RWMutex
	listTagsForResourceArgsForCall []struct {
		arg1 *cloudfront.ListTagsForResourceInput
	}
	listTagsForResourceReturns struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceReturnsOnCall map[int]struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}
	ListTagsForResourceWithContextStub        func(aws.Context, *cloudfront.ListTagsForResourceInput, ...request.Option) (*cloudfront.ListTagsForResourceOutput, error)
	listTagsForResourceWithContextMutex       sync.RWMutex
	listTagsForResourceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.ListTagsForResourceInput
		arg3 []request.Option
	}
	listTagsForResourceWithContextReturns struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}
	ListTagsForResourceRequestStub        func(*cloudfront.ListTagsForResourceInput) (*request.Request, *cloudfront.ListTagsForResourceOutput)
	listTagsForResourceRequestMutex       sync.RWMutex
	listTagsForResourceRequestArgsForCall []struct {
		arg1 *cloudfront.ListTagsForResourceInput
	}
	listTagsForResourceRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.ListTagsForResourceOutput
	}
	listTagsForResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.ListTagsForResourceOutput
	}
	TagResourceStub        func(*cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error)
	tagResourceMutex       sync.RWMutex
	tagResourceArgsForCall []struct {
		arg1 *cloudfront.TagResourceInput
	}
	tagResourceReturns struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}
	tagResourceReturnsOnCall map[int]struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}
	TagResourceWithContextStub        func(aws.Context, *cloudfront.TagResourceInput, ...request.Option) (*cloudfront.TagResourceOutput, error)
	tagResourceWithContextMutex       sync.RWMutex
	tagResourceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.TagResourceInput
		arg3 []request.Option
	}
	tagResourceWithContextReturns struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}
	tagResourceWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}
	TagResourceRequestStub        func(*cloudfront.TagResourceInput) (*request.Request, *cloudfront.TagResourceOutput)
	tagResourceRequestMutex       sync.RWMutex
	tagResourceRequestArgsForCall []struct {
		arg1 *cloudfront.TagResourceInput
	}
	tagResourceRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.TagResourceOutput
	}
	tagResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.TagResourceOutput
	}
	UntagResourceStub        func(*cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error)
	untagResourceMutex       sync.RWMutex
	untagResourceArgsForCall []struct {
		arg1 *cloudfront.UntagResourceInput
	}
	untagResourceReturns struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}
	untagResourceReturnsOnCall map[int]struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}
	UntagResourceWithContextStub        func(aws.Context, *cloudfront.UntagResourceInput, ...request.Option) (*cloudfront.UntagResourceOutput, error)
	untagResourceWithContextMutex       sync.RWMutex
	untagResourceWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.UntagResourceInput
		arg3 []request.Option
	}
	untagResourceWithContextReturns struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}
	untagResourceWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}
	UntagResourceRequestStub        func(*cloudfront.UntagResourceInput) (*request.Request, *cloudfront.UntagResourceOutput)
	untagResourceRequestMutex       sync.RWMutex
	untagResourceRequestArgsForCall []struct {
		arg1 *cloudfront.UntagResourceInput
	}
	untagResourceRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UntagResourceOutput
	}
	untagResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UntagResourceOutput
	}
	UpdateCloudFrontOriginAccessIdentityStub        func(*cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error)
	updateCloudFrontOriginAccessIdentityMutex       sync.RWMutex
	updateCloudFrontOriginAccessIdentityArgsForCall []struct {
		arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput
	}
	updateCloudFrontOriginAccessIdentityReturns struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	updateCloudFrontOriginAccessIdentityReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	UpdateCloudFrontOriginAccessIdentityWithContextStub        func(aws.Context, *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, ...request.Option) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error)
	updateCloudFrontOriginAccessIdentityWithContextMutex       sync.RWMutex
	updateCloudFrontOriginAccessIdentityWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}
	updateCloudFrontOriginAccessIdentityWithContextReturns struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	updateCloudFrontOriginAccessIdentityWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}
	UpdateCloudFrontOriginAccessIdentityRequestStub        func(*cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput)
	updateCloudFrontOriginAccessIdentityRequestMutex       sync.RWMutex
	updateCloudFrontOriginAccessIdentityRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput
	}
	updateCloudFrontOriginAccessIdentityRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	}
	updateCloudFrontOriginAccessIdentityRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	}
	UpdateDistributionStub        func(*cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error)
	updateDistributionMutex       sync.RWMutex
	updateDistributionArgsForCall []struct {
		arg1 *cloudfront.UpdateDistributionInput
	}
	updateDistributionReturns struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}
	updateDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}
	UpdateDistributionWithContextStub        func(aws.Context, *cloudfront.UpdateDistributionInput, ...request.Option) (*cloudfront.UpdateDistributionOutput, error)
	updateDistributionWithContextMutex       sync.RWMutex
	updateDistributionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.UpdateDistributionInput
		arg3 []request.Option
	}
	updateDistributionWithContextReturns struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}
	updateDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}
	UpdateDistributionRequestStub        func(*cloudfront.UpdateDistributionInput) (*request.Request, *cloudfront.UpdateDistributionOutput)
	updateDistributionRequestMutex       sync.RWMutex
	updateDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateDistributionInput
	}
	updateDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateDistributionOutput
	}
	updateDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateDistributionOutput
	}
	UpdateStreamingDistributionStub        func(*cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error)
	updateStreamingDistributionMutex       sync.RWMutex
	updateStreamingDistributionArgsForCall []struct {
		arg1 *cloudfront.UpdateStreamingDistributionInput
	}
	updateStreamingDistributionReturns struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}
	updateStreamingDistributionReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}
	UpdateStreamingDistributionWithContextStub        func(aws.Context, *cloudfront.UpdateStreamingDistributionInput, ...request.Option) (*cloudfront.UpdateStreamingDistributionOutput, error)
	updateStreamingDistributionWithContextMutex       sync.RWMutex
	updateStreamingDistributionWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.UpdateStreamingDistributionInput
		arg3 []request.Option
	}
	updateStreamingDistributionWithContextReturns struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}
	updateStreamingDistributionWithContextReturnsOnCall map[int]struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}
	UpdateStreamingDistributionRequestStub        func(*cloudfront.UpdateStreamingDistributionInput) (*request.Request, *cloudfront.UpdateStreamingDistributionOutput)
	updateStreamingDistributionRequestMutex       sync.RWMutex
	updateStreamingDistributionRequestArgsForCall []struct {
		arg1 *cloudfront.UpdateStreamingDistributionInput
	}
	updateStreamingDistributionRequestReturns struct {
		result1 *request.Request
		result2 *cloudfront.UpdateStreamingDistributionOutput
	}
	updateStreamingDistributionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudfront.UpdateStreamingDistributionOutput
	}
	WaitUntilDistributionDeployedStub        func(*cloudfront.GetDistributionInput) error
	waitUntilDistributionDeployedMutex       sync.RWMutex
	waitUntilDistributionDeployedArgsForCall []struct {
		arg1 *cloudfront.GetDistributionInput
	}
	waitUntilDistributionDeployedReturns struct {
		result1 error
	}
	waitUntilDistributionDeployedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilDistributionDeployedWithContextStub        func(aws.Context, *cloudfront.GetDistributionInput, ...request.WaiterOption) error
	waitUntilDistributionDeployedWithContextMutex       sync.RWMutex
	waitUntilDistributionDeployedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.GetDistributionInput
		arg3 []request.WaiterOption
	}
	waitUntilDistributionDeployedWithContextReturns struct {
		result1 error
	}
	waitUntilDistributionDeployedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInvalidationCompletedStub        func(*cloudfront.GetInvalidationInput) error
	waitUntilInvalidationCompletedMutex       sync.RWMutex
	waitUntilInvalidationCompletedArgsForCall []struct {
		arg1 *cloudfront.GetInvalidationInput
	}
	waitUntilInvalidationCompletedReturns struct {
		result1 error
	}
	waitUntilInvalidationCompletedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilInvalidationCompletedWithContextStub        func(aws.Context, *cloudfront.GetInvalidationInput, ...request.WaiterOption) error
	waitUntilInvalidationCompletedWithContextMutex       sync.RWMutex
	waitUntilInvalidationCompletedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.GetInvalidationInput
		arg3 []request.WaiterOption
	}
	waitUntilInvalidationCompletedWithContextReturns struct {
		result1 error
	}
	waitUntilInvalidationCompletedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilStreamingDistributionDeployedStub        func(*cloudfront.GetStreamingDistributionInput) error
	waitUntilStreamingDistributionDeployedMutex       sync.RWMutex
	waitUntilStreamingDistributionDeployedArgsForCall []struct {
		arg1 *cloudfront.GetStreamingDistributionInput
	}
	waitUntilStreamingDistributionDeployedReturns struct {
		result1 error
	}
	waitUntilStreamingDistributionDeployedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilStreamingDistributionDeployedWithContextStub        func(aws.Context, *cloudfront.GetStreamingDistributionInput, ...request.WaiterOption) error
	waitUntilStreamingDistributionDeployedWithContextMutex       sync.RWMutex
	waitUntilStreamingDistributionDeployedWithContextArgsForCall []struct {
		arg1 aws.Context
		arg2 *cloudfront.GetStreamingDistributionInput
		arg3 []request.WaiterOption
	}
	waitUntilStreamingDistributionDeployedWithContextReturns struct {
		result1 error
	}
	waitUntilStreamingDistributionDeployedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentity(arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	fake.createCloudFrontOriginAccessIdentityMutex.Lock()
	ret, specificReturn := fake.createCloudFrontOriginAccessIdentityReturnsOnCall[len(fake.createCloudFrontOriginAccessIdentityArgsForCall)]
	fake.createCloudFrontOriginAccessIdentityArgsForCall = append(fake.createCloudFrontOriginAccessIdentityArgsForCall, struct {
		arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput
	}{arg1})
	fake.recordInvocation("CreateCloudFrontOriginAccessIdentity", []interface{}{arg1})
	fake.createCloudFrontOriginAccessIdentityMutex.Unlock()
	if fake.CreateCloudFrontOriginAccessIdentityStub != nil {
		return fake.CreateCloudFrontOriginAccessIdentityStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCloudFrontOriginAccessIdentityReturns.result1, fake.createCloudFrontOriginAccessIdentityReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityCallCount() int {
	fake.createCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityMutex.RUnlock()
	return len(fake.createCloudFrontOriginAccessIdentityArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityArgsForCall(i int) *cloudfront.CreateCloudFrontOriginAccessIdentityInput {
	fake.createCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityMutex.RUnlock()
	return fake.createCloudFrontOriginAccessIdentityArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityReturns(result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.CreateCloudFrontOriginAccessIdentityStub = nil
	fake.createCloudFrontOriginAccessIdentityReturns = struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityReturnsOnCall(i int, result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.CreateCloudFrontOriginAccessIdentityStub = nil
	if fake.createCloudFrontOriginAccessIdentityReturnsOnCall == nil {
		fake.createCloudFrontOriginAccessIdentityReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.createCloudFrontOriginAccessIdentityReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityWithContext(arg1 aws.Context, arg2 *cloudfront.CreateCloudFrontOriginAccessIdentityInput, arg3 ...request.Option) (*cloudfront.CreateCloudFrontOriginAccessIdentityOutput, error) {
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	ret, specificReturn := fake.createCloudFrontOriginAccessIdentityWithContextReturnsOnCall[len(fake.createCloudFrontOriginAccessIdentityWithContextArgsForCall)]
	fake.createCloudFrontOriginAccessIdentityWithContextArgsForCall = append(fake.createCloudFrontOriginAccessIdentityWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.CreateCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateCloudFrontOriginAccessIdentityWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	if fake.CreateCloudFrontOriginAccessIdentityWithContextStub != nil {
		return fake.CreateCloudFrontOriginAccessIdentityWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCloudFrontOriginAccessIdentityWithContextReturns.result1, fake.createCloudFrontOriginAccessIdentityWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityWithContextCallCount() int {
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	return len(fake.createCloudFrontOriginAccessIdentityWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityWithContextArgsForCall(i int) (aws.Context, *cloudfront.CreateCloudFrontOriginAccessIdentityInput, []request.Option) {
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	return fake.createCloudFrontOriginAccessIdentityWithContextArgsForCall[i].arg1, fake.createCloudFrontOriginAccessIdentityWithContextArgsForCall[i].arg2, fake.createCloudFrontOriginAccessIdentityWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityWithContextReturns(result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.CreateCloudFrontOriginAccessIdentityWithContextStub = nil
	fake.createCloudFrontOriginAccessIdentityWithContextReturns = struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityWithContextReturnsOnCall(i int, result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.CreateCloudFrontOriginAccessIdentityWithContextStub = nil
	if fake.createCloudFrontOriginAccessIdentityWithContextReturnsOnCall == nil {
		fake.createCloudFrontOriginAccessIdentityWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.createCloudFrontOriginAccessIdentityWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityRequest(arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.CreateCloudFrontOriginAccessIdentityOutput) {
	fake.createCloudFrontOriginAccessIdentityRequestMutex.Lock()
	ret, specificReturn := fake.createCloudFrontOriginAccessIdentityRequestReturnsOnCall[len(fake.createCloudFrontOriginAccessIdentityRequestArgsForCall)]
	fake.createCloudFrontOriginAccessIdentityRequestArgsForCall = append(fake.createCloudFrontOriginAccessIdentityRequestArgsForCall, struct {
		arg1 *cloudfront.CreateCloudFrontOriginAccessIdentityInput
	}{arg1})
	fake.recordInvocation("CreateCloudFrontOriginAccessIdentityRequest", []interface{}{arg1})
	fake.createCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	if fake.CreateCloudFrontOriginAccessIdentityRequestStub != nil {
		return fake.CreateCloudFrontOriginAccessIdentityRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCloudFrontOriginAccessIdentityRequestReturns.result1, fake.createCloudFrontOriginAccessIdentityRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityRequestCallCount() int {
	fake.createCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	return len(fake.createCloudFrontOriginAccessIdentityRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityRequestArgsForCall(i int) *cloudfront.CreateCloudFrontOriginAccessIdentityInput {
	fake.createCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	return fake.createCloudFrontOriginAccessIdentityRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityRequestReturns(result1 *request.Request, result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput) {
	fake.CreateCloudFrontOriginAccessIdentityRequestStub = nil
	fake.createCloudFrontOriginAccessIdentityRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateCloudFrontOriginAccessIdentityRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput) {
	fake.CreateCloudFrontOriginAccessIdentityRequestStub = nil
	if fake.createCloudFrontOriginAccessIdentityRequestReturnsOnCall == nil {
		fake.createCloudFrontOriginAccessIdentityRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
		})
	}
	fake.createCloudFrontOriginAccessIdentityRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateDistribution(arg1 *cloudfront.CreateDistributionInput) (*cloudfront.CreateDistributionOutput, error) {
	fake.createDistributionMutex.Lock()
	ret, specificReturn := fake.createDistributionReturnsOnCall[len(fake.createDistributionArgsForCall)]
	fake.createDistributionArgsForCall = append(fake.createDistributionArgsForCall, struct {
		arg1 *cloudfront.CreateDistributionInput
	}{arg1})
	fake.recordInvocation("CreateDistribution", []interface{}{arg1})
	fake.createDistributionMutex.Unlock()
	if fake.CreateDistributionStub != nil {
		return fake.CreateDistributionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createDistributionReturns.result1, fake.createDistributionReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateDistributionCallCount() int {
	fake.createDistributionMutex.RLock()
	defer fake.createDistributionMutex.RUnlock()
	return len(fake.createDistributionArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateDistributionArgsForCall(i int) *cloudfront.CreateDistributionInput {
	fake.createDistributionMutex.RLock()
	defer fake.createDistributionMutex.RUnlock()
	return fake.createDistributionArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) CreateDistributionReturns(result1 *cloudfront.CreateDistributionOutput, result2 error) {
	fake.CreateDistributionStub = nil
	fake.createDistributionReturns = struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateDistributionReturnsOnCall(i int, result1 *cloudfront.CreateDistributionOutput, result2 error) {
	fake.CreateDistributionStub = nil
	if fake.createDistributionReturnsOnCall == nil {
		fake.createDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateDistributionOutput
			result2 error
		})
	}
	fake.createDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithContext(arg1 aws.Context, arg2 *cloudfront.CreateDistributionInput, arg3 ...request.Option) (*cloudfront.CreateDistributionOutput, error) {
	fake.createDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.createDistributionWithContextReturnsOnCall[len(fake.createDistributionWithContextArgsForCall)]
	fake.createDistributionWithContextArgsForCall = append(fake.createDistributionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.CreateDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDistributionWithContextMutex.Unlock()
	if fake.CreateDistributionWithContextStub != nil {
		return fake.CreateDistributionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createDistributionWithContextReturns.result1, fake.createDistributionWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithContextCallCount() int {
	fake.createDistributionWithContextMutex.RLock()
	defer fake.createDistributionWithContextMutex.RUnlock()
	return len(fake.createDistributionWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithContextArgsForCall(i int) (aws.Context, *cloudfront.CreateDistributionInput, []request.Option) {
	fake.createDistributionWithContextMutex.RLock()
	defer fake.createDistributionWithContextMutex.RUnlock()
	return fake.createDistributionWithContextArgsForCall[i].arg1, fake.createDistributionWithContextArgsForCall[i].arg2, fake.createDistributionWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithContextReturns(result1 *cloudfront.CreateDistributionOutput, result2 error) {
	fake.CreateDistributionWithContextStub = nil
	fake.createDistributionWithContextReturns = struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.CreateDistributionOutput, result2 error) {
	fake.CreateDistributionWithContextStub = nil
	if fake.createDistributionWithContextReturnsOnCall == nil {
		fake.createDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateDistributionOutput
			result2 error
		})
	}
	fake.createDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateDistributionRequest(arg1 *cloudfront.CreateDistributionInput) (*request.Request, *cloudfront.CreateDistributionOutput) {
	fake.createDistributionRequestMutex.Lock()
	ret, specificReturn := fake.createDistributionRequestReturnsOnCall[len(fake.createDistributionRequestArgsForCall)]
	fake.createDistributionRequestArgsForCall = append(fake.createDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.CreateDistributionInput
	}{arg1})
	fake.recordInvocation("CreateDistributionRequest", []interface{}{arg1})
	fake.createDistributionRequestMutex.Unlock()
	if fake.CreateDistributionRequestStub != nil {
		return fake.CreateDistributionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createDistributionRequestReturns.result1, fake.createDistributionRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateDistributionRequestCallCount() int {
	fake.createDistributionRequestMutex.RLock()
	defer fake.createDistributionRequestMutex.RUnlock()
	return len(fake.createDistributionRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateDistributionRequestArgsForCall(i int) *cloudfront.CreateDistributionInput {
	fake.createDistributionRequestMutex.RLock()
	defer fake.createDistributionRequestMutex.RUnlock()
	return fake.createDistributionRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) CreateDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.CreateDistributionOutput) {
	fake.CreateDistributionRequestStub = nil
	fake.createDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateDistributionOutput) {
	fake.CreateDistributionRequestStub = nil
	if fake.createDistributionRequestReturnsOnCall == nil {
		fake.createDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateDistributionOutput
		})
	}
	fake.createDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTags(arg1 *cloudfront.CreateDistributionWithTagsInput) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	fake.createDistributionWithTagsMutex.Lock()
	ret, specificReturn := fake.createDistributionWithTagsReturnsOnCall[len(fake.createDistributionWithTagsArgsForCall)]
	fake.createDistributionWithTagsArgsForCall = append(fake.createDistributionWithTagsArgsForCall, struct {
		arg1 *cloudfront.CreateDistributionWithTagsInput
	}{arg1})
	fake.recordInvocation("CreateDistributionWithTags", []interface{}{arg1})
	fake.createDistributionWithTagsMutex.Unlock()
	if fake.CreateDistributionWithTagsStub != nil {
		return fake.CreateDistributionWithTagsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createDistributionWithTagsReturns.result1, fake.createDistributionWithTagsReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsCallCount() int {
	fake.createDistributionWithTagsMutex.RLock()
	defer fake.createDistributionWithTagsMutex.RUnlock()
	return len(fake.createDistributionWithTagsArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsArgsForCall(i int) *cloudfront.CreateDistributionWithTagsInput {
	fake.createDistributionWithTagsMutex.RLock()
	defer fake.createDistributionWithTagsMutex.RUnlock()
	return fake.createDistributionWithTagsArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsReturns(result1 *cloudfront.CreateDistributionWithTagsOutput, result2 error) {
	fake.CreateDistributionWithTagsStub = nil
	fake.createDistributionWithTagsReturns = struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsReturnsOnCall(i int, result1 *cloudfront.CreateDistributionWithTagsOutput, result2 error) {
	fake.CreateDistributionWithTagsStub = nil
	if fake.createDistributionWithTagsReturnsOnCall == nil {
		fake.createDistributionWithTagsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateDistributionWithTagsOutput
			result2 error
		})
	}
	fake.createDistributionWithTagsReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsWithContext(arg1 aws.Context, arg2 *cloudfront.CreateDistributionWithTagsInput, arg3 ...request.Option) (*cloudfront.CreateDistributionWithTagsOutput, error) {
	fake.createDistributionWithTagsWithContextMutex.Lock()
	ret, specificReturn := fake.createDistributionWithTagsWithContextReturnsOnCall[len(fake.createDistributionWithTagsWithContextArgsForCall)]
	fake.createDistributionWithTagsWithContextArgsForCall = append(fake.createDistributionWithTagsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.CreateDistributionWithTagsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateDistributionWithTagsWithContext", []interface{}{arg1, arg2, arg3})
	fake.createDistributionWithTagsWithContextMutex.Unlock()
	if fake.CreateDistributionWithTagsWithContextStub != nil {
		return fake.CreateDistributionWithTagsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createDistributionWithTagsWithContextReturns.result1, fake.createDistributionWithTagsWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsWithContextCallCount() int {
	fake.createDistributionWithTagsWithContextMutex.RLock()
	defer fake.createDistributionWithTagsWithContextMutex.RUnlock()
	return len(fake.createDistributionWithTagsWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsWithContextArgsForCall(i int) (aws.Context, *cloudfront.CreateDistributionWithTagsInput, []request.Option) {
	fake.createDistributionWithTagsWithContextMutex.RLock()
	defer fake.createDistributionWithTagsWithContextMutex.RUnlock()
	return fake.createDistributionWithTagsWithContextArgsForCall[i].arg1, fake.createDistributionWithTagsWithContextArgsForCall[i].arg2, fake.createDistributionWithTagsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsWithContextReturns(result1 *cloudfront.CreateDistributionWithTagsOutput, result2 error) {
	fake.CreateDistributionWithTagsWithContextStub = nil
	fake.createDistributionWithTagsWithContextReturns = struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsWithContextReturnsOnCall(i int, result1 *cloudfront.CreateDistributionWithTagsOutput, result2 error) {
	fake.CreateDistributionWithTagsWithContextStub = nil
	if fake.createDistributionWithTagsWithContextReturnsOnCall == nil {
		fake.createDistributionWithTagsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateDistributionWithTagsOutput
			result2 error
		})
	}
	fake.createDistributionWithTagsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsRequest(arg1 *cloudfront.CreateDistributionWithTagsInput) (*request.Request, *cloudfront.CreateDistributionWithTagsOutput) {
	fake.createDistributionWithTagsRequestMutex.Lock()
	ret, specificReturn := fake.createDistributionWithTagsRequestReturnsOnCall[len(fake.createDistributionWithTagsRequestArgsForCall)]
	fake.createDistributionWithTagsRequestArgsForCall = append(fake.createDistributionWithTagsRequestArgsForCall, struct {
		arg1 *cloudfront.CreateDistributionWithTagsInput
	}{arg1})
	fake.recordInvocation("CreateDistributionWithTagsRequest", []interface{}{arg1})
	fake.createDistributionWithTagsRequestMutex.Unlock()
	if fake.CreateDistributionWithTagsRequestStub != nil {
		return fake.CreateDistributionWithTagsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createDistributionWithTagsRequestReturns.result1, fake.createDistributionWithTagsRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsRequestCallCount() int {
	fake.createDistributionWithTagsRequestMutex.RLock()
	defer fake.createDistributionWithTagsRequestMutex.RUnlock()
	return len(fake.createDistributionWithTagsRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsRequestArgsForCall(i int) *cloudfront.CreateDistributionWithTagsInput {
	fake.createDistributionWithTagsRequestMutex.RLock()
	defer fake.createDistributionWithTagsRequestMutex.RUnlock()
	return fake.createDistributionWithTagsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsRequestReturns(result1 *request.Request, result2 *cloudfront.CreateDistributionWithTagsOutput) {
	fake.CreateDistributionWithTagsRequestStub = nil
	fake.createDistributionWithTagsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionWithTagsOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateDistributionWithTagsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateDistributionWithTagsOutput) {
	fake.CreateDistributionWithTagsRequestStub = nil
	if fake.createDistributionWithTagsRequestReturnsOnCall == nil {
		fake.createDistributionWithTagsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateDistributionWithTagsOutput
		})
	}
	fake.createDistributionWithTagsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateDistributionWithTagsOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateInvalidation(arg1 *cloudfront.CreateInvalidationInput) (*cloudfront.CreateInvalidationOutput, error) {
	fake.createInvalidationMutex.Lock()
	ret, specificReturn := fake.createInvalidationReturnsOnCall[len(fake.createInvalidationArgsForCall)]
	fake.createInvalidationArgsForCall = append(fake.createInvalidationArgsForCall, struct {
		arg1 *cloudfront.CreateInvalidationInput
	}{arg1})
	fake.recordInvocation("CreateInvalidation", []interface{}{arg1})
	fake.createInvalidationMutex.Unlock()
	if fake.CreateInvalidationStub != nil {
		return fake.CreateInvalidationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createInvalidationReturns.result1, fake.createInvalidationReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateInvalidationCallCount() int {
	fake.createInvalidationMutex.RLock()
	defer fake.createInvalidationMutex.RUnlock()
	return len(fake.createInvalidationArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateInvalidationArgsForCall(i int) *cloudfront.CreateInvalidationInput {
	fake.createInvalidationMutex.RLock()
	defer fake.createInvalidationMutex.RUnlock()
	return fake.createInvalidationArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) CreateInvalidationReturns(result1 *cloudfront.CreateInvalidationOutput, result2 error) {
	fake.CreateInvalidationStub = nil
	fake.createInvalidationReturns = struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateInvalidationReturnsOnCall(i int, result1 *cloudfront.CreateInvalidationOutput, result2 error) {
	fake.CreateInvalidationStub = nil
	if fake.createInvalidationReturnsOnCall == nil {
		fake.createInvalidationReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateInvalidationOutput
			result2 error
		})
	}
	fake.createInvalidationReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateInvalidationWithContext(arg1 aws.Context, arg2 *cloudfront.CreateInvalidationInput, arg3 ...request.Option) (*cloudfront.CreateInvalidationOutput, error) {
	fake.createInvalidationWithContextMutex.Lock()
	ret, specificReturn := fake.createInvalidationWithContextReturnsOnCall[len(fake.createInvalidationWithContextArgsForCall)]
	fake.createInvalidationWithContextArgsForCall = append(fake.createInvalidationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.CreateInvalidationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateInvalidationWithContext", []interface{}{arg1, arg2, arg3})
	fake.createInvalidationWithContextMutex.Unlock()
	if fake.CreateInvalidationWithContextStub != nil {
		return fake.CreateInvalidationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createInvalidationWithContextReturns.result1, fake.createInvalidationWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateInvalidationWithContextCallCount() int {
	fake.createInvalidationWithContextMutex.RLock()
	defer fake.createInvalidationWithContextMutex.RUnlock()
	return len(fake.createInvalidationWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateInvalidationWithContextArgsForCall(i int) (aws.Context, *cloudfront.CreateInvalidationInput, []request.Option) {
	fake.createInvalidationWithContextMutex.RLock()
	defer fake.createInvalidationWithContextMutex.RUnlock()
	return fake.createInvalidationWithContextArgsForCall[i].arg1, fake.createInvalidationWithContextArgsForCall[i].arg2, fake.createInvalidationWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) CreateInvalidationWithContextReturns(result1 *cloudfront.CreateInvalidationOutput, result2 error) {
	fake.CreateInvalidationWithContextStub = nil
	fake.createInvalidationWithContextReturns = struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateInvalidationWithContextReturnsOnCall(i int, result1 *cloudfront.CreateInvalidationOutput, result2 error) {
	fake.CreateInvalidationWithContextStub = nil
	if fake.createInvalidationWithContextReturnsOnCall == nil {
		fake.createInvalidationWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateInvalidationOutput
			result2 error
		})
	}
	fake.createInvalidationWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateInvalidationRequest(arg1 *cloudfront.CreateInvalidationInput) (*request.Request, *cloudfront.CreateInvalidationOutput) {
	fake.createInvalidationRequestMutex.Lock()
	ret, specificReturn := fake.createInvalidationRequestReturnsOnCall[len(fake.createInvalidationRequestArgsForCall)]
	fake.createInvalidationRequestArgsForCall = append(fake.createInvalidationRequestArgsForCall, struct {
		arg1 *cloudfront.CreateInvalidationInput
	}{arg1})
	fake.recordInvocation("CreateInvalidationRequest", []interface{}{arg1})
	fake.createInvalidationRequestMutex.Unlock()
	if fake.CreateInvalidationRequestStub != nil {
		return fake.CreateInvalidationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createInvalidationRequestReturns.result1, fake.createInvalidationRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateInvalidationRequestCallCount() int {
	fake.createInvalidationRequestMutex.RLock()
	defer fake.createInvalidationRequestMutex.RUnlock()
	return len(fake.createInvalidationRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateInvalidationRequestArgsForCall(i int) *cloudfront.CreateInvalidationInput {
	fake.createInvalidationRequestMutex.RLock()
	defer fake.createInvalidationRequestMutex.RUnlock()
	return fake.createInvalidationRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) CreateInvalidationRequestReturns(result1 *request.Request, result2 *cloudfront.CreateInvalidationOutput) {
	fake.CreateInvalidationRequestStub = nil
	fake.createInvalidationRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateInvalidationOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateInvalidationRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateInvalidationOutput) {
	fake.CreateInvalidationRequestStub = nil
	if fake.createInvalidationRequestReturnsOnCall == nil {
		fake.createInvalidationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateInvalidationOutput
		})
	}
	fake.createInvalidationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateInvalidationOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistribution(arg1 *cloudfront.CreateStreamingDistributionInput) (*cloudfront.CreateStreamingDistributionOutput, error) {
	fake.createStreamingDistributionMutex.Lock()
	ret, specificReturn := fake.createStreamingDistributionReturnsOnCall[len(fake.createStreamingDistributionArgsForCall)]
	fake.createStreamingDistributionArgsForCall = append(fake.createStreamingDistributionArgsForCall, struct {
		arg1 *cloudfront.CreateStreamingDistributionInput
	}{arg1})
	fake.recordInvocation("CreateStreamingDistribution", []interface{}{arg1})
	fake.createStreamingDistributionMutex.Unlock()
	if fake.CreateStreamingDistributionStub != nil {
		return fake.CreateStreamingDistributionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStreamingDistributionReturns.result1, fake.createStreamingDistributionReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionCallCount() int {
	fake.createStreamingDistributionMutex.RLock()
	defer fake.createStreamingDistributionMutex.RUnlock()
	return len(fake.createStreamingDistributionArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionArgsForCall(i int) *cloudfront.CreateStreamingDistributionInput {
	fake.createStreamingDistributionMutex.RLock()
	defer fake.createStreamingDistributionMutex.RUnlock()
	return fake.createStreamingDistributionArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionReturns(result1 *cloudfront.CreateStreamingDistributionOutput, result2 error) {
	fake.CreateStreamingDistributionStub = nil
	fake.createStreamingDistributionReturns = struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionReturnsOnCall(i int, result1 *cloudfront.CreateStreamingDistributionOutput, result2 error) {
	fake.CreateStreamingDistributionStub = nil
	if fake.createStreamingDistributionReturnsOnCall == nil {
		fake.createStreamingDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateStreamingDistributionOutput
			result2 error
		})
	}
	fake.createStreamingDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithContext(arg1 aws.Context, arg2 *cloudfront.CreateStreamingDistributionInput, arg3 ...request.Option) (*cloudfront.CreateStreamingDistributionOutput, error) {
	fake.createStreamingDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.createStreamingDistributionWithContextReturnsOnCall[len(fake.createStreamingDistributionWithContextArgsForCall)]
	fake.createStreamingDistributionWithContextArgsForCall = append(fake.createStreamingDistributionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.CreateStreamingDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateStreamingDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.createStreamingDistributionWithContextMutex.Unlock()
	if fake.CreateStreamingDistributionWithContextStub != nil {
		return fake.CreateStreamingDistributionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStreamingDistributionWithContextReturns.result1, fake.createStreamingDistributionWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithContextCallCount() int {
	fake.createStreamingDistributionWithContextMutex.RLock()
	defer fake.createStreamingDistributionWithContextMutex.RUnlock()
	return len(fake.createStreamingDistributionWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithContextArgsForCall(i int) (aws.Context, *cloudfront.CreateStreamingDistributionInput, []request.Option) {
	fake.createStreamingDistributionWithContextMutex.RLock()
	defer fake.createStreamingDistributionWithContextMutex.RUnlock()
	return fake.createStreamingDistributionWithContextArgsForCall[i].arg1, fake.createStreamingDistributionWithContextArgsForCall[i].arg2, fake.createStreamingDistributionWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithContextReturns(result1 *cloudfront.CreateStreamingDistributionOutput, result2 error) {
	fake.CreateStreamingDistributionWithContextStub = nil
	fake.createStreamingDistributionWithContextReturns = struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.CreateStreamingDistributionOutput, result2 error) {
	fake.CreateStreamingDistributionWithContextStub = nil
	if fake.createStreamingDistributionWithContextReturnsOnCall == nil {
		fake.createStreamingDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateStreamingDistributionOutput
			result2 error
		})
	}
	fake.createStreamingDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionRequest(arg1 *cloudfront.CreateStreamingDistributionInput) (*request.Request, *cloudfront.CreateStreamingDistributionOutput) {
	fake.createStreamingDistributionRequestMutex.Lock()
	ret, specificReturn := fake.createStreamingDistributionRequestReturnsOnCall[len(fake.createStreamingDistributionRequestArgsForCall)]
	fake.createStreamingDistributionRequestArgsForCall = append(fake.createStreamingDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.CreateStreamingDistributionInput
	}{arg1})
	fake.recordInvocation("CreateStreamingDistributionRequest", []interface{}{arg1})
	fake.createStreamingDistributionRequestMutex.Unlock()
	if fake.CreateStreamingDistributionRequestStub != nil {
		return fake.CreateStreamingDistributionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStreamingDistributionRequestReturns.result1, fake.createStreamingDistributionRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionRequestCallCount() int {
	fake.createStreamingDistributionRequestMutex.RLock()
	defer fake.createStreamingDistributionRequestMutex.RUnlock()
	return len(fake.createStreamingDistributionRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionRequestArgsForCall(i int) *cloudfront.CreateStreamingDistributionInput {
	fake.createStreamingDistributionRequestMutex.RLock()
	defer fake.createStreamingDistributionRequestMutex.RUnlock()
	return fake.createStreamingDistributionRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.CreateStreamingDistributionOutput) {
	fake.CreateStreamingDistributionRequestStub = nil
	fake.createStreamingDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateStreamingDistributionOutput) {
	fake.CreateStreamingDistributionRequestStub = nil
	if fake.createStreamingDistributionRequestReturnsOnCall == nil {
		fake.createStreamingDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateStreamingDistributionOutput
		})
	}
	fake.createStreamingDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTags(arg1 *cloudfront.CreateStreamingDistributionWithTagsInput) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	fake.createStreamingDistributionWithTagsMutex.Lock()
	ret, specificReturn := fake.createStreamingDistributionWithTagsReturnsOnCall[len(fake.createStreamingDistributionWithTagsArgsForCall)]
	fake.createStreamingDistributionWithTagsArgsForCall = append(fake.createStreamingDistributionWithTagsArgsForCall, struct {
		arg1 *cloudfront.CreateStreamingDistributionWithTagsInput
	}{arg1})
	fake.recordInvocation("CreateStreamingDistributionWithTags", []interface{}{arg1})
	fake.createStreamingDistributionWithTagsMutex.Unlock()
	if fake.CreateStreamingDistributionWithTagsStub != nil {
		return fake.CreateStreamingDistributionWithTagsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStreamingDistributionWithTagsReturns.result1, fake.createStreamingDistributionWithTagsReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsCallCount() int {
	fake.createStreamingDistributionWithTagsMutex.RLock()
	defer fake.createStreamingDistributionWithTagsMutex.RUnlock()
	return len(fake.createStreamingDistributionWithTagsArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsArgsForCall(i int) *cloudfront.CreateStreamingDistributionWithTagsInput {
	fake.createStreamingDistributionWithTagsMutex.RLock()
	defer fake.createStreamingDistributionWithTagsMutex.RUnlock()
	return fake.createStreamingDistributionWithTagsArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsReturns(result1 *cloudfront.CreateStreamingDistributionWithTagsOutput, result2 error) {
	fake.CreateStreamingDistributionWithTagsStub = nil
	fake.createStreamingDistributionWithTagsReturns = struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsReturnsOnCall(i int, result1 *cloudfront.CreateStreamingDistributionWithTagsOutput, result2 error) {
	fake.CreateStreamingDistributionWithTagsStub = nil
	if fake.createStreamingDistributionWithTagsReturnsOnCall == nil {
		fake.createStreamingDistributionWithTagsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
			result2 error
		})
	}
	fake.createStreamingDistributionWithTagsReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsWithContext(arg1 aws.Context, arg2 *cloudfront.CreateStreamingDistributionWithTagsInput, arg3 ...request.Option) (*cloudfront.CreateStreamingDistributionWithTagsOutput, error) {
	fake.createStreamingDistributionWithTagsWithContextMutex.Lock()
	ret, specificReturn := fake.createStreamingDistributionWithTagsWithContextReturnsOnCall[len(fake.createStreamingDistributionWithTagsWithContextArgsForCall)]
	fake.createStreamingDistributionWithTagsWithContextArgsForCall = append(fake.createStreamingDistributionWithTagsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.CreateStreamingDistributionWithTagsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateStreamingDistributionWithTagsWithContext", []interface{}{arg1, arg2, arg3})
	fake.createStreamingDistributionWithTagsWithContextMutex.Unlock()
	if fake.CreateStreamingDistributionWithTagsWithContextStub != nil {
		return fake.CreateStreamingDistributionWithTagsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStreamingDistributionWithTagsWithContextReturns.result1, fake.createStreamingDistributionWithTagsWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsWithContextCallCount() int {
	fake.createStreamingDistributionWithTagsWithContextMutex.RLock()
	defer fake.createStreamingDistributionWithTagsWithContextMutex.RUnlock()
	return len(fake.createStreamingDistributionWithTagsWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsWithContextArgsForCall(i int) (aws.Context, *cloudfront.CreateStreamingDistributionWithTagsInput, []request.Option) {
	fake.createStreamingDistributionWithTagsWithContextMutex.RLock()
	defer fake.createStreamingDistributionWithTagsWithContextMutex.RUnlock()
	return fake.createStreamingDistributionWithTagsWithContextArgsForCall[i].arg1, fake.createStreamingDistributionWithTagsWithContextArgsForCall[i].arg2, fake.createStreamingDistributionWithTagsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsWithContextReturns(result1 *cloudfront.CreateStreamingDistributionWithTagsOutput, result2 error) {
	fake.CreateStreamingDistributionWithTagsWithContextStub = nil
	fake.createStreamingDistributionWithTagsWithContextReturns = struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsWithContextReturnsOnCall(i int, result1 *cloudfront.CreateStreamingDistributionWithTagsOutput, result2 error) {
	fake.CreateStreamingDistributionWithTagsWithContextStub = nil
	if fake.createStreamingDistributionWithTagsWithContextReturnsOnCall == nil {
		fake.createStreamingDistributionWithTagsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
			result2 error
		})
	}
	fake.createStreamingDistributionWithTagsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.CreateStreamingDistributionWithTagsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsRequest(arg1 *cloudfront.CreateStreamingDistributionWithTagsInput) (*request.Request, *cloudfront.CreateStreamingDistributionWithTagsOutput) {
	fake.createStreamingDistributionWithTagsRequestMutex.Lock()
	ret, specificReturn := fake.createStreamingDistributionWithTagsRequestReturnsOnCall[len(fake.createStreamingDistributionWithTagsRequestArgsForCall)]
	fake.createStreamingDistributionWithTagsRequestArgsForCall = append(fake.createStreamingDistributionWithTagsRequestArgsForCall, struct {
		arg1 *cloudfront.CreateStreamingDistributionWithTagsInput
	}{arg1})
	fake.recordInvocation("CreateStreamingDistributionWithTagsRequest", []interface{}{arg1})
	fake.createStreamingDistributionWithTagsRequestMutex.Unlock()
	if fake.CreateStreamingDistributionWithTagsRequestStub != nil {
		return fake.CreateStreamingDistributionWithTagsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStreamingDistributionWithTagsRequestReturns.result1, fake.createStreamingDistributionWithTagsRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsRequestCallCount() int {
	fake.createStreamingDistributionWithTagsRequestMutex.RLock()
	defer fake.createStreamingDistributionWithTagsRequestMutex.RUnlock()
	return len(fake.createStreamingDistributionWithTagsRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsRequestArgsForCall(i int) *cloudfront.CreateStreamingDistributionWithTagsInput {
	fake.createStreamingDistributionWithTagsRequestMutex.RLock()
	defer fake.createStreamingDistributionWithTagsRequestMutex.RUnlock()
	return fake.createStreamingDistributionWithTagsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsRequestReturns(result1 *request.Request, result2 *cloudfront.CreateStreamingDistributionWithTagsOutput) {
	fake.CreateStreamingDistributionWithTagsRequestStub = nil
	fake.createStreamingDistributionWithTagsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionWithTagsOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) CreateStreamingDistributionWithTagsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.CreateStreamingDistributionWithTagsOutput) {
	fake.CreateStreamingDistributionWithTagsRequestStub = nil
	if fake.createStreamingDistributionWithTagsRequestReturnsOnCall == nil {
		fake.createStreamingDistributionWithTagsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.CreateStreamingDistributionWithTagsOutput
		})
	}
	fake.createStreamingDistributionWithTagsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.CreateStreamingDistributionWithTagsOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentity(arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	fake.deleteCloudFrontOriginAccessIdentityMutex.Lock()
	ret, specificReturn := fake.deleteCloudFrontOriginAccessIdentityReturnsOnCall[len(fake.deleteCloudFrontOriginAccessIdentityArgsForCall)]
	fake.deleteCloudFrontOriginAccessIdentityArgsForCall = append(fake.deleteCloudFrontOriginAccessIdentityArgsForCall, struct {
		arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput
	}{arg1})
	fake.recordInvocation("DeleteCloudFrontOriginAccessIdentity", []interface{}{arg1})
	fake.deleteCloudFrontOriginAccessIdentityMutex.Unlock()
	if fake.DeleteCloudFrontOriginAccessIdentityStub != nil {
		return fake.DeleteCloudFrontOriginAccessIdentityStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCloudFrontOriginAccessIdentityReturns.result1, fake.deleteCloudFrontOriginAccessIdentityReturns.result2
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityCallCount() int {
	fake.deleteCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityMutex.RUnlock()
	return len(fake.deleteCloudFrontOriginAccessIdentityArgsForCall)
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityArgsForCall(i int) *cloudfront.DeleteCloudFrontOriginAccessIdentityInput {
	fake.deleteCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityMutex.RUnlock()
	return fake.deleteCloudFrontOriginAccessIdentityArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityReturns(result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.DeleteCloudFrontOriginAccessIdentityStub = nil
	fake.deleteCloudFrontOriginAccessIdentityReturns = struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityReturnsOnCall(i int, result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.DeleteCloudFrontOriginAccessIdentityStub = nil
	if fake.deleteCloudFrontOriginAccessIdentityReturnsOnCall == nil {
		fake.deleteCloudFrontOriginAccessIdentityReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.deleteCloudFrontOriginAccessIdentityReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityWithContext(arg1 aws.Context, arg2 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, arg3 ...request.Option) (*cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, error) {
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCloudFrontOriginAccessIdentityWithContextReturnsOnCall[len(fake.deleteCloudFrontOriginAccessIdentityWithContextArgsForCall)]
	fake.deleteCloudFrontOriginAccessIdentityWithContextArgsForCall = append(fake.deleteCloudFrontOriginAccessIdentityWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteCloudFrontOriginAccessIdentityWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	if fake.DeleteCloudFrontOriginAccessIdentityWithContextStub != nil {
		return fake.DeleteCloudFrontOriginAccessIdentityWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCloudFrontOriginAccessIdentityWithContextReturns.result1, fake.deleteCloudFrontOriginAccessIdentityWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityWithContextCallCount() int {
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	return len(fake.deleteCloudFrontOriginAccessIdentityWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityWithContextArgsForCall(i int) (aws.Context, *cloudfront.DeleteCloudFrontOriginAccessIdentityInput, []request.Option) {
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	return fake.deleteCloudFrontOriginAccessIdentityWithContextArgsForCall[i].arg1, fake.deleteCloudFrontOriginAccessIdentityWithContextArgsForCall[i].arg2, fake.deleteCloudFrontOriginAccessIdentityWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityWithContextReturns(result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.DeleteCloudFrontOriginAccessIdentityWithContextStub = nil
	fake.deleteCloudFrontOriginAccessIdentityWithContextReturns = struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.DeleteCloudFrontOriginAccessIdentityWithContextStub = nil
	if fake.deleteCloudFrontOriginAccessIdentityWithContextReturnsOnCall == nil {
		fake.deleteCloudFrontOriginAccessIdentityWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.deleteCloudFrontOriginAccessIdentityWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityRequest(arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput) {
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.Lock()
	ret, specificReturn := fake.deleteCloudFrontOriginAccessIdentityRequestReturnsOnCall[len(fake.deleteCloudFrontOriginAccessIdentityRequestArgsForCall)]
	fake.deleteCloudFrontOriginAccessIdentityRequestArgsForCall = append(fake.deleteCloudFrontOriginAccessIdentityRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteCloudFrontOriginAccessIdentityInput
	}{arg1})
	fake.recordInvocation("DeleteCloudFrontOriginAccessIdentityRequest", []interface{}{arg1})
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	if fake.DeleteCloudFrontOriginAccessIdentityRequestStub != nil {
		return fake.DeleteCloudFrontOriginAccessIdentityRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCloudFrontOriginAccessIdentityRequestReturns.result1, fake.deleteCloudFrontOriginAccessIdentityRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityRequestCallCount() int {
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	return len(fake.deleteCloudFrontOriginAccessIdentityRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityRequestArgsForCall(i int) *cloudfront.DeleteCloudFrontOriginAccessIdentityInput {
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	return fake.deleteCloudFrontOriginAccessIdentityRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput) {
	fake.DeleteCloudFrontOriginAccessIdentityRequestStub = nil
	fake.deleteCloudFrontOriginAccessIdentityRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteCloudFrontOriginAccessIdentityRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput) {
	fake.DeleteCloudFrontOriginAccessIdentityRequestStub = nil
	if fake.deleteCloudFrontOriginAccessIdentityRequestReturnsOnCall == nil {
		fake.deleteCloudFrontOriginAccessIdentityRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
		})
	}
	fake.deleteCloudFrontOriginAccessIdentityRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteDistribution(arg1 *cloudfront.DeleteDistributionInput) (*cloudfront.DeleteDistributionOutput, error) {
	fake.deleteDistributionMutex.Lock()
	ret, specificReturn := fake.deleteDistributionReturnsOnCall[len(fake.deleteDistributionArgsForCall)]
	fake.deleteDistributionArgsForCall = append(fake.deleteDistributionArgsForCall, struct {
		arg1 *cloudfront.DeleteDistributionInput
	}{arg1})
	fake.recordInvocation("DeleteDistribution", []interface{}{arg1})
	fake.deleteDistributionMutex.Unlock()
	if fake.DeleteDistributionStub != nil {
		return fake.DeleteDistributionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteDistributionReturns.result1, fake.deleteDistributionReturns.result2
}

func (fake *FakeCloudFrontAPI) DeleteDistributionCallCount() int {
	fake.deleteDistributionMutex.RLock()
	defer fake.deleteDistributionMutex.RUnlock()
	return len(fake.deleteDistributionArgsForCall)
}

func (fake *FakeCloudFrontAPI) DeleteDistributionArgsForCall(i int) *cloudfront.DeleteDistributionInput {
	fake.deleteDistributionMutex.RLock()
	defer fake.deleteDistributionMutex.RUnlock()
	return fake.deleteDistributionArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) DeleteDistributionReturns(result1 *cloudfront.DeleteDistributionOutput, result2 error) {
	fake.DeleteDistributionStub = nil
	fake.deleteDistributionReturns = struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteDistributionReturnsOnCall(i int, result1 *cloudfront.DeleteDistributionOutput, result2 error) {
	fake.DeleteDistributionStub = nil
	if fake.deleteDistributionReturnsOnCall == nil {
		fake.deleteDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteDistributionOutput
			result2 error
		})
	}
	fake.deleteDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteDistributionWithContext(arg1 aws.Context, arg2 *cloudfront.DeleteDistributionInput, arg3 ...request.Option) (*cloudfront.DeleteDistributionOutput, error) {
	fake.deleteDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDistributionWithContextReturnsOnCall[len(fake.deleteDistributionWithContextArgsForCall)]
	fake.deleteDistributionWithContextArgsForCall = append(fake.deleteDistributionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.DeleteDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDistributionWithContextMutex.Unlock()
	if fake.DeleteDistributionWithContextStub != nil {
		return fake.DeleteDistributionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteDistributionWithContextReturns.result1, fake.deleteDistributionWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) DeleteDistributionWithContextCallCount() int {
	fake.deleteDistributionWithContextMutex.RLock()
	defer fake.deleteDistributionWithContextMutex.RUnlock()
	return len(fake.deleteDistributionWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) DeleteDistributionWithContextArgsForCall(i int) (aws.Context, *cloudfront.DeleteDistributionInput, []request.Option) {
	fake.deleteDistributionWithContextMutex.RLock()
	defer fake.deleteDistributionWithContextMutex.RUnlock()
	return fake.deleteDistributionWithContextArgsForCall[i].arg1, fake.deleteDistributionWithContextArgsForCall[i].arg2, fake.deleteDistributionWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) DeleteDistributionWithContextReturns(result1 *cloudfront.DeleteDistributionOutput, result2 error) {
	fake.DeleteDistributionWithContextStub = nil
	fake.deleteDistributionWithContextReturns = struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteDistributionOutput, result2 error) {
	fake.DeleteDistributionWithContextStub = nil
	if fake.deleteDistributionWithContextReturnsOnCall == nil {
		fake.deleteDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteDistributionOutput
			result2 error
		})
	}
	fake.deleteDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteDistributionRequest(arg1 *cloudfront.DeleteDistributionInput) (*request.Request, *cloudfront.DeleteDistributionOutput) {
	fake.deleteDistributionRequestMutex.Lock()
	ret, specificReturn := fake.deleteDistributionRequestReturnsOnCall[len(fake.deleteDistributionRequestArgsForCall)]
	fake.deleteDistributionRequestArgsForCall = append(fake.deleteDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteDistributionInput
	}{arg1})
	fake.recordInvocation("DeleteDistributionRequest", []interface{}{arg1})
	fake.deleteDistributionRequestMutex.Unlock()
	if fake.DeleteDistributionRequestStub != nil {
		return fake.DeleteDistributionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteDistributionRequestReturns.result1, fake.deleteDistributionRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) DeleteDistributionRequestCallCount() int {
	fake.deleteDistributionRequestMutex.RLock()
	defer fake.deleteDistributionRequestMutex.RUnlock()
	return len(fake.deleteDistributionRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) DeleteDistributionRequestArgsForCall(i int) *cloudfront.DeleteDistributionInput {
	fake.deleteDistributionRequestMutex.RLock()
	defer fake.deleteDistributionRequestMutex.RUnlock()
	return fake.deleteDistributionRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) DeleteDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteDistributionOutput) {
	fake.DeleteDistributionRequestStub = nil
	fake.deleteDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteDistributionOutput) {
	fake.DeleteDistributionRequestStub = nil
	if fake.deleteDistributionRequestReturnsOnCall == nil {
		fake.deleteDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteDistributionOutput
		})
	}
	fake.deleteDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRole(arg1 *cloudfront.DeleteServiceLinkedRoleInput) (*cloudfront.DeleteServiceLinkedRoleOutput, error) {
	fake.deleteServiceLinkedRoleMutex.Lock()
	ret, specificReturn := fake.deleteServiceLinkedRoleReturnsOnCall[len(fake.deleteServiceLinkedRoleArgsForCall)]
	fake.deleteServiceLinkedRoleArgsForCall = append(fake.deleteServiceLinkedRoleArgsForCall, struct {
		arg1 *cloudfront.DeleteServiceLinkedRoleInput
	}{arg1})
	fake.recordInvocation("DeleteServiceLinkedRole", []interface{}{arg1})
	fake.deleteServiceLinkedRoleMutex.Unlock()
	if fake.DeleteServiceLinkedRoleStub != nil {
		return fake.DeleteServiceLinkedRoleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteServiceLinkedRoleReturns.result1, fake.deleteServiceLinkedRoleReturns.result2
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleCallCount() int {
	fake.deleteServiceLinkedRoleMutex.RLock()
	defer fake.deleteServiceLinkedRoleMutex.RUnlock()
	return len(fake.deleteServiceLinkedRoleArgsForCall)
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleArgsForCall(i int) *cloudfront.DeleteServiceLinkedRoleInput {
	fake.deleteServiceLinkedRoleMutex.RLock()
	defer fake.deleteServiceLinkedRoleMutex.RUnlock()
	return fake.deleteServiceLinkedRoleArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleReturns(result1 *cloudfront.DeleteServiceLinkedRoleOutput, result2 error) {
	fake.DeleteServiceLinkedRoleStub = nil
	fake.deleteServiceLinkedRoleReturns = struct {
		result1 *cloudfront.DeleteServiceLinkedRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleReturnsOnCall(i int, result1 *cloudfront.DeleteServiceLinkedRoleOutput, result2 error) {
	fake.DeleteServiceLinkedRoleStub = nil
	if fake.deleteServiceLinkedRoleReturnsOnCall == nil {
		fake.deleteServiceLinkedRoleReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteServiceLinkedRoleOutput
			result2 error
		})
	}
	fake.deleteServiceLinkedRoleReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteServiceLinkedRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleWithContext(arg1 aws.Context, arg2 *cloudfront.DeleteServiceLinkedRoleInput, arg3 ...request.Option) (*cloudfront.DeleteServiceLinkedRoleOutput, error) {
	fake.deleteServiceLinkedRoleWithContextMutex.Lock()
	ret, specificReturn := fake.deleteServiceLinkedRoleWithContextReturnsOnCall[len(fake.deleteServiceLinkedRoleWithContextArgsForCall)]
	fake.deleteServiceLinkedRoleWithContextArgsForCall = append(fake.deleteServiceLinkedRoleWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.DeleteServiceLinkedRoleInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteServiceLinkedRoleWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteServiceLinkedRoleWithContextMutex.Unlock()
	if fake.DeleteServiceLinkedRoleWithContextStub != nil {
		return fake.DeleteServiceLinkedRoleWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteServiceLinkedRoleWithContextReturns.result1, fake.deleteServiceLinkedRoleWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleWithContextCallCount() int {
	fake.deleteServiceLinkedRoleWithContextMutex.RLock()
	defer fake.deleteServiceLinkedRoleWithContextMutex.RUnlock()
	return len(fake.deleteServiceLinkedRoleWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleWithContextArgsForCall(i int) (aws.Context, *cloudfront.DeleteServiceLinkedRoleInput, []request.Option) {
	fake.deleteServiceLinkedRoleWithContextMutex.RLock()
	defer fake.deleteServiceLinkedRoleWithContextMutex.RUnlock()
	return fake.deleteServiceLinkedRoleWithContextArgsForCall[i].arg1, fake.deleteServiceLinkedRoleWithContextArgsForCall[i].arg2, fake.deleteServiceLinkedRoleWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleWithContextReturns(result1 *cloudfront.DeleteServiceLinkedRoleOutput, result2 error) {
	fake.DeleteServiceLinkedRoleWithContextStub = nil
	fake.deleteServiceLinkedRoleWithContextReturns = struct {
		result1 *cloudfront.DeleteServiceLinkedRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteServiceLinkedRoleOutput, result2 error) {
	fake.DeleteServiceLinkedRoleWithContextStub = nil
	if fake.deleteServiceLinkedRoleWithContextReturnsOnCall == nil {
		fake.deleteServiceLinkedRoleWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteServiceLinkedRoleOutput
			result2 error
		})
	}
	fake.deleteServiceLinkedRoleWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteServiceLinkedRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleRequest(arg1 *cloudfront.DeleteServiceLinkedRoleInput) (*request.Request, *cloudfront.DeleteServiceLinkedRoleOutput) {
	fake.deleteServiceLinkedRoleRequestMutex.Lock()
	ret, specificReturn := fake.deleteServiceLinkedRoleRequestReturnsOnCall[len(fake.deleteServiceLinkedRoleRequestArgsForCall)]
	fake.deleteServiceLinkedRoleRequestArgsForCall = append(fake.deleteServiceLinkedRoleRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteServiceLinkedRoleInput
	}{arg1})
	fake.recordInvocation("DeleteServiceLinkedRoleRequest", []interface{}{arg1})
	fake.deleteServiceLinkedRoleRequestMutex.Unlock()
	if fake.DeleteServiceLinkedRoleRequestStub != nil {
		return fake.DeleteServiceLinkedRoleRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteServiceLinkedRoleRequestReturns.result1, fake.deleteServiceLinkedRoleRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleRequestCallCount() int {
	fake.deleteServiceLinkedRoleRequestMutex.RLock()
	defer fake.deleteServiceLinkedRoleRequestMutex.RUnlock()
	return len(fake.deleteServiceLinkedRoleRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleRequestArgsForCall(i int) *cloudfront.DeleteServiceLinkedRoleInput {
	fake.deleteServiceLinkedRoleRequestMutex.RLock()
	defer fake.deleteServiceLinkedRoleRequestMutex.RUnlock()
	return fake.deleteServiceLinkedRoleRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteServiceLinkedRoleOutput) {
	fake.DeleteServiceLinkedRoleRequestStub = nil
	fake.deleteServiceLinkedRoleRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteServiceLinkedRoleOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteServiceLinkedRoleRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteServiceLinkedRoleOutput) {
	fake.DeleteServiceLinkedRoleRequestStub = nil
	if fake.deleteServiceLinkedRoleRequestReturnsOnCall == nil {
		fake.deleteServiceLinkedRoleRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteServiceLinkedRoleOutput
		})
	}
	fake.deleteServiceLinkedRoleRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteServiceLinkedRoleOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistribution(arg1 *cloudfront.DeleteStreamingDistributionInput) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	fake.deleteStreamingDistributionMutex.Lock()
	ret, specificReturn := fake.deleteStreamingDistributionReturnsOnCall[len(fake.deleteStreamingDistributionArgsForCall)]
	fake.deleteStreamingDistributionArgsForCall = append(fake.deleteStreamingDistributionArgsForCall, struct {
		arg1 *cloudfront.DeleteStreamingDistributionInput
	}{arg1})
	fake.recordInvocation("DeleteStreamingDistribution", []interface{}{arg1})
	fake.deleteStreamingDistributionMutex.Unlock()
	if fake.DeleteStreamingDistributionStub != nil {
		return fake.DeleteStreamingDistributionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStreamingDistributionReturns.result1, fake.deleteStreamingDistributionReturns.result2
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionCallCount() int {
	fake.deleteStreamingDistributionMutex.RLock()
	defer fake.deleteStreamingDistributionMutex.RUnlock()
	return len(fake.deleteStreamingDistributionArgsForCall)
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionArgsForCall(i int) *cloudfront.DeleteStreamingDistributionInput {
	fake.deleteStreamingDistributionMutex.RLock()
	defer fake.deleteStreamingDistributionMutex.RUnlock()
	return fake.deleteStreamingDistributionArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionReturns(result1 *cloudfront.DeleteStreamingDistributionOutput, result2 error) {
	fake.DeleteStreamingDistributionStub = nil
	fake.deleteStreamingDistributionReturns = struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionReturnsOnCall(i int, result1 *cloudfront.DeleteStreamingDistributionOutput, result2 error) {
	fake.DeleteStreamingDistributionStub = nil
	if fake.deleteStreamingDistributionReturnsOnCall == nil {
		fake.deleteStreamingDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteStreamingDistributionOutput
			result2 error
		})
	}
	fake.deleteStreamingDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionWithContext(arg1 aws.Context, arg2 *cloudfront.DeleteStreamingDistributionInput, arg3 ...request.Option) (*cloudfront.DeleteStreamingDistributionOutput, error) {
	fake.deleteStreamingDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.deleteStreamingDistributionWithContextReturnsOnCall[len(fake.deleteStreamingDistributionWithContextArgsForCall)]
	fake.deleteStreamingDistributionWithContextArgsForCall = append(fake.deleteStreamingDistributionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.DeleteStreamingDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteStreamingDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteStreamingDistributionWithContextMutex.Unlock()
	if fake.DeleteStreamingDistributionWithContextStub != nil {
		return fake.DeleteStreamingDistributionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStreamingDistributionWithContextReturns.result1, fake.deleteStreamingDistributionWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionWithContextCallCount() int {
	fake.deleteStreamingDistributionWithContextMutex.RLock()
	defer fake.deleteStreamingDistributionWithContextMutex.RUnlock()
	return len(fake.deleteStreamingDistributionWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionWithContextArgsForCall(i int) (aws.Context, *cloudfront.DeleteStreamingDistributionInput, []request.Option) {
	fake.deleteStreamingDistributionWithContextMutex.RLock()
	defer fake.deleteStreamingDistributionWithContextMutex.RUnlock()
	return fake.deleteStreamingDistributionWithContextArgsForCall[i].arg1, fake.deleteStreamingDistributionWithContextArgsForCall[i].arg2, fake.deleteStreamingDistributionWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionWithContextReturns(result1 *cloudfront.DeleteStreamingDistributionOutput, result2 error) {
	fake.DeleteStreamingDistributionWithContextStub = nil
	fake.deleteStreamingDistributionWithContextReturns = struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.DeleteStreamingDistributionOutput, result2 error) {
	fake.DeleteStreamingDistributionWithContextStub = nil
	if fake.deleteStreamingDistributionWithContextReturnsOnCall == nil {
		fake.deleteStreamingDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.DeleteStreamingDistributionOutput
			result2 error
		})
	}
	fake.deleteStreamingDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.DeleteStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionRequest(arg1 *cloudfront.DeleteStreamingDistributionInput) (*request.Request, *cloudfront.DeleteStreamingDistributionOutput) {
	fake.deleteStreamingDistributionRequestMutex.Lock()
	ret, specificReturn := fake.deleteStreamingDistributionRequestReturnsOnCall[len(fake.deleteStreamingDistributionRequestArgsForCall)]
	fake.deleteStreamingDistributionRequestArgsForCall = append(fake.deleteStreamingDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.DeleteStreamingDistributionInput
	}{arg1})
	fake.recordInvocation("DeleteStreamingDistributionRequest", []interface{}{arg1})
	fake.deleteStreamingDistributionRequestMutex.Unlock()
	if fake.DeleteStreamingDistributionRequestStub != nil {
		return fake.DeleteStreamingDistributionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteStreamingDistributionRequestReturns.result1, fake.deleteStreamingDistributionRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionRequestCallCount() int {
	fake.deleteStreamingDistributionRequestMutex.RLock()
	defer fake.deleteStreamingDistributionRequestMutex.RUnlock()
	return len(fake.deleteStreamingDistributionRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionRequestArgsForCall(i int) *cloudfront.DeleteStreamingDistributionInput {
	fake.deleteStreamingDistributionRequestMutex.RLock()
	defer fake.deleteStreamingDistributionRequestMutex.RUnlock()
	return fake.deleteStreamingDistributionRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.DeleteStreamingDistributionOutput) {
	fake.DeleteStreamingDistributionRequestStub = nil
	fake.deleteStreamingDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) DeleteStreamingDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.DeleteStreamingDistributionOutput) {
	fake.DeleteStreamingDistributionRequestStub = nil
	if fake.deleteStreamingDistributionRequestReturnsOnCall == nil {
		fake.deleteStreamingDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.DeleteStreamingDistributionOutput
		})
	}
	fake.deleteStreamingDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.DeleteStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentity(arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	fake.getCloudFrontOriginAccessIdentityMutex.Lock()
	ret, specificReturn := fake.getCloudFrontOriginAccessIdentityReturnsOnCall[len(fake.getCloudFrontOriginAccessIdentityArgsForCall)]
	fake.getCloudFrontOriginAccessIdentityArgsForCall = append(fake.getCloudFrontOriginAccessIdentityArgsForCall, struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput
	}{arg1})
	fake.recordInvocation("GetCloudFrontOriginAccessIdentity", []interface{}{arg1})
	fake.getCloudFrontOriginAccessIdentityMutex.Unlock()
	if fake.GetCloudFrontOriginAccessIdentityStub != nil {
		return fake.GetCloudFrontOriginAccessIdentityStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getCloudFrontOriginAccessIdentityReturns.result1, fake.getCloudFrontOriginAccessIdentityReturns.result2
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityCallCount() int {
	fake.getCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityMutex.RUnlock()
	return len(fake.getCloudFrontOriginAccessIdentityArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityArgsForCall(i int) *cloudfront.GetCloudFrontOriginAccessIdentityInput {
	fake.getCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityMutex.RUnlock()
	return fake.getCloudFrontOriginAccessIdentityArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityReturns(result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.GetCloudFrontOriginAccessIdentityStub = nil
	fake.getCloudFrontOriginAccessIdentityReturns = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityReturnsOnCall(i int, result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.GetCloudFrontOriginAccessIdentityStub = nil
	if fake.getCloudFrontOriginAccessIdentityReturnsOnCall == nil {
		fake.getCloudFrontOriginAccessIdentityReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.getCloudFrontOriginAccessIdentityReturnsOnCall[i] = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityWithContext(arg1 aws.Context, arg2 *cloudfront.GetCloudFrontOriginAccessIdentityInput, arg3 ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityOutput, error) {
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	ret, specificReturn := fake.getCloudFrontOriginAccessIdentityWithContextReturnsOnCall[len(fake.getCloudFrontOriginAccessIdentityWithContextArgsForCall)]
	fake.getCloudFrontOriginAccessIdentityWithContextArgsForCall = append(fake.getCloudFrontOriginAccessIdentityWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.GetCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetCloudFrontOriginAccessIdentityWithContext", []interface{}{arg1, arg2, arg3})
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	if fake.GetCloudFrontOriginAccessIdentityWithContextStub != nil {
		return fake.GetCloudFrontOriginAccessIdentityWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getCloudFrontOriginAccessIdentityWithContextReturns.result1, fake.getCloudFrontOriginAccessIdentityWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityWithContextCallCount() int {
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	return len(fake.getCloudFrontOriginAccessIdentityWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityWithContextArgsForCall(i int) (aws.Context, *cloudfront.GetCloudFrontOriginAccessIdentityInput, []request.Option) {
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	return fake.getCloudFrontOriginAccessIdentityWithContextArgsForCall[i].arg1, fake.getCloudFrontOriginAccessIdentityWithContextArgsForCall[i].arg2, fake.getCloudFrontOriginAccessIdentityWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityWithContextReturns(result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.GetCloudFrontOriginAccessIdentityWithContextStub = nil
	fake.getCloudFrontOriginAccessIdentityWithContextReturns = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityWithContextReturnsOnCall(i int, result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.GetCloudFrontOriginAccessIdentityWithContextStub = nil
	if fake.getCloudFrontOriginAccessIdentityWithContextReturnsOnCall == nil {
		fake.getCloudFrontOriginAccessIdentityWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.getCloudFrontOriginAccessIdentityWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityRequest(arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityOutput) {
	fake.getCloudFrontOriginAccessIdentityRequestMutex.Lock()
	ret, specificReturn := fake.getCloudFrontOriginAccessIdentityRequestReturnsOnCall[len(fake.getCloudFrontOriginAccessIdentityRequestArgsForCall)]
	fake.getCloudFrontOriginAccessIdentityRequestArgsForCall = append(fake.getCloudFrontOriginAccessIdentityRequestArgsForCall, struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityInput
	}{arg1})
	fake.recordInvocation("GetCloudFrontOriginAccessIdentityRequest", []interface{}{arg1})
	fake.getCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	if fake.GetCloudFrontOriginAccessIdentityRequestStub != nil {
		return fake.GetCloudFrontOriginAccessIdentityRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getCloudFrontOriginAccessIdentityRequestReturns.result1, fake.getCloudFrontOriginAccessIdentityRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityRequestCallCount() int {
	fake.getCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	return len(fake.getCloudFrontOriginAccessIdentityRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityRequestArgsForCall(i int) *cloudfront.GetCloudFrontOriginAccessIdentityInput {
	fake.getCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	return fake.getCloudFrontOriginAccessIdentityRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityRequestReturns(result1 *request.Request, result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput) {
	fake.GetCloudFrontOriginAccessIdentityRequestStub = nil
	fake.getCloudFrontOriginAccessIdentityRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput) {
	fake.GetCloudFrontOriginAccessIdentityRequestStub = nil
	if fake.getCloudFrontOriginAccessIdentityRequestReturnsOnCall == nil {
		fake.getCloudFrontOriginAccessIdentityRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
		})
	}
	fake.getCloudFrontOriginAccessIdentityRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfig(arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	fake.getCloudFrontOriginAccessIdentityConfigMutex.Lock()
	ret, specificReturn := fake.getCloudFrontOriginAccessIdentityConfigReturnsOnCall[len(fake.getCloudFrontOriginAccessIdentityConfigArgsForCall)]
	fake.getCloudFrontOriginAccessIdentityConfigArgsForCall = append(fake.getCloudFrontOriginAccessIdentityConfigArgsForCall, struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput
	}{arg1})
	fake.recordInvocation("GetCloudFrontOriginAccessIdentityConfig", []interface{}{arg1})
	fake.getCloudFrontOriginAccessIdentityConfigMutex.Unlock()
	if fake.GetCloudFrontOriginAccessIdentityConfigStub != nil {
		return fake.GetCloudFrontOriginAccessIdentityConfigStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getCloudFrontOriginAccessIdentityConfigReturns.result1, fake.getCloudFrontOriginAccessIdentityConfigReturns.result2
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigCallCount() int {
	fake.getCloudFrontOriginAccessIdentityConfigMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigMutex.RUnlock()
	return len(fake.getCloudFrontOriginAccessIdentityConfigArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigArgsForCall(i int) *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput {
	fake.getCloudFrontOriginAccessIdentityConfigMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigMutex.RUnlock()
	return fake.getCloudFrontOriginAccessIdentityConfigArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigReturns(result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, result2 error) {
	fake.GetCloudFrontOriginAccessIdentityConfigStub = nil
	fake.getCloudFrontOriginAccessIdentityConfigReturns = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigReturnsOnCall(i int, result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, result2 error) {
	fake.GetCloudFrontOriginAccessIdentityConfigStub = nil
	if fake.getCloudFrontOriginAccessIdentityConfigReturnsOnCall == nil {
		fake.getCloudFrontOriginAccessIdentityConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
			result2 error
		})
	}
	fake.getCloudFrontOriginAccessIdentityConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigWithContext(arg1 aws.Context, arg2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, arg3 ...request.Option) (*cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, error) {
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getCloudFrontOriginAccessIdentityConfigWithContextReturnsOnCall[len(fake.getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall)]
	fake.getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall = append(fake.getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetCloudFrontOriginAccessIdentityConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.Unlock()
	if fake.GetCloudFrontOriginAccessIdentityConfigWithContextStub != nil {
		return fake.GetCloudFrontOriginAccessIdentityConfigWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getCloudFrontOriginAccessIdentityConfigWithContextReturns.result1, fake.getCloudFrontOriginAccessIdentityConfigWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigWithContextCallCount() int {
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.RUnlock()
	return len(fake.getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigWithContextArgsForCall(i int) (aws.Context, *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput, []request.Option) {
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.RUnlock()
	return fake.getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall[i].arg1, fake.getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall[i].arg2, fake.getCloudFrontOriginAccessIdentityConfigWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigWithContextReturns(result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, result2 error) {
	fake.GetCloudFrontOriginAccessIdentityConfigWithContextStub = nil
	fake.getCloudFrontOriginAccessIdentityConfigWithContextReturns = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput, result2 error) {
	fake.GetCloudFrontOriginAccessIdentityConfigWithContextStub = nil
	if fake.getCloudFrontOriginAccessIdentityConfigWithContextReturnsOnCall == nil {
		fake.getCloudFrontOriginAccessIdentityConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
			result2 error
		})
	}
	fake.getCloudFrontOriginAccessIdentityConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigRequest(arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput) (*request.Request, *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput) {
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.Lock()
	ret, specificReturn := fake.getCloudFrontOriginAccessIdentityConfigRequestReturnsOnCall[len(fake.getCloudFrontOriginAccessIdentityConfigRequestArgsForCall)]
	fake.getCloudFrontOriginAccessIdentityConfigRequestArgsForCall = append(fake.getCloudFrontOriginAccessIdentityConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput
	}{arg1})
	fake.recordInvocation("GetCloudFrontOriginAccessIdentityConfigRequest", []interface{}{arg1})
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.Unlock()
	if fake.GetCloudFrontOriginAccessIdentityConfigRequestStub != nil {
		return fake.GetCloudFrontOriginAccessIdentityConfigRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getCloudFrontOriginAccessIdentityConfigRequestReturns.result1, fake.getCloudFrontOriginAccessIdentityConfigRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigRequestCallCount() int {
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.RUnlock()
	return len(fake.getCloudFrontOriginAccessIdentityConfigRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigRequestArgsForCall(i int) *cloudfront.GetCloudFrontOriginAccessIdentityConfigInput {
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.RUnlock()
	return fake.getCloudFrontOriginAccessIdentityConfigRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput) {
	fake.GetCloudFrontOriginAccessIdentityConfigRequestStub = nil
	fake.getCloudFrontOriginAccessIdentityConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetCloudFrontOriginAccessIdentityConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput) {
	fake.GetCloudFrontOriginAccessIdentityConfigRequestStub = nil
	if fake.getCloudFrontOriginAccessIdentityConfigRequestReturnsOnCall == nil {
		fake.getCloudFrontOriginAccessIdentityConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
		})
	}
	fake.getCloudFrontOriginAccessIdentityConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetCloudFrontOriginAccessIdentityConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetDistribution(arg1 *cloudfront.GetDistributionInput) (*cloudfront.GetDistributionOutput, error) {
	fake.getDistributionMutex.Lock()
	ret, specificReturn := fake.getDistributionReturnsOnCall[len(fake.getDistributionArgsForCall)]
	fake.getDistributionArgsForCall = append(fake.getDistributionArgsForCall, struct {
		arg1 *cloudfront.GetDistributionInput
	}{arg1})
	fake.recordInvocation("GetDistribution", []interface{}{arg1})
	fake.getDistributionMutex.Unlock()
	if fake.GetDistributionStub != nil {
		return fake.GetDistributionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDistributionReturns.result1, fake.getDistributionReturns.result2
}

func (fake *FakeCloudFrontAPI) GetDistributionCallCount() int {
	fake.getDistributionMutex.RLock()
	defer fake.getDistributionMutex.RUnlock()
	return len(fake.getDistributionArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetDistributionArgsForCall(i int) *cloudfront.GetDistributionInput {
	fake.getDistributionMutex.RLock()
	defer fake.getDistributionMutex.RUnlock()
	return fake.getDistributionArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetDistributionReturns(result1 *cloudfront.GetDistributionOutput, result2 error) {
	fake.GetDistributionStub = nil
	fake.getDistributionReturns = struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetDistributionReturnsOnCall(i int, result1 *cloudfront.GetDistributionOutput, result2 error) {
	fake.GetDistributionStub = nil
	if fake.getDistributionReturnsOnCall == nil {
		fake.getDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetDistributionOutput
			result2 error
		})
	}
	fake.getDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetDistributionWithContext(arg1 aws.Context, arg2 *cloudfront.GetDistributionInput, arg3 ...request.Option) (*cloudfront.GetDistributionOutput, error) {
	fake.getDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.getDistributionWithContextReturnsOnCall[len(fake.getDistributionWithContextArgsForCall)]
	fake.getDistributionWithContextArgsForCall = append(fake.getDistributionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.GetDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.getDistributionWithContextMutex.Unlock()
	if fake.GetDistributionWithContextStub != nil {
		return fake.GetDistributionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDistributionWithContextReturns.result1, fake.getDistributionWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) GetDistributionWithContextCallCount() int {
	fake.getDistributionWithContextMutex.RLock()
	defer fake.getDistributionWithContextMutex.RUnlock()
	return len(fake.getDistributionWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetDistributionWithContextArgsForCall(i int) (aws.Context, *cloudfront.GetDistributionInput, []request.Option) {
	fake.getDistributionWithContextMutex.RLock()
	defer fake.getDistributionWithContextMutex.RUnlock()
	return fake.getDistributionWithContextArgsForCall[i].arg1, fake.getDistributionWithContextArgsForCall[i].arg2, fake.getDistributionWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) GetDistributionWithContextReturns(result1 *cloudfront.GetDistributionOutput, result2 error) {
	fake.GetDistributionWithContextStub = nil
	fake.getDistributionWithContextReturns = struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.GetDistributionOutput, result2 error) {
	fake.GetDistributionWithContextStub = nil
	if fake.getDistributionWithContextReturnsOnCall == nil {
		fake.getDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetDistributionOutput
			result2 error
		})
	}
	fake.getDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetDistributionRequest(arg1 *cloudfront.GetDistributionInput) (*request.Request, *cloudfront.GetDistributionOutput) {
	fake.getDistributionRequestMutex.Lock()
	ret, specificReturn := fake.getDistributionRequestReturnsOnCall[len(fake.getDistributionRequestArgsForCall)]
	fake.getDistributionRequestArgsForCall = append(fake.getDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.GetDistributionInput
	}{arg1})
	fake.recordInvocation("GetDistributionRequest", []interface{}{arg1})
	fake.getDistributionRequestMutex.Unlock()
	if fake.GetDistributionRequestStub != nil {
		return fake.GetDistributionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDistributionRequestReturns.result1, fake.getDistributionRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) GetDistributionRequestCallCount() int {
	fake.getDistributionRequestMutex.RLock()
	defer fake.getDistributionRequestMutex.RUnlock()
	return len(fake.getDistributionRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetDistributionRequestArgsForCall(i int) *cloudfront.GetDistributionInput {
	fake.getDistributionRequestMutex.RLock()
	defer fake.getDistributionRequestMutex.RUnlock()
	return fake.getDistributionRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.GetDistributionOutput) {
	fake.GetDistributionRequestStub = nil
	fake.getDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetDistributionOutput) {
	fake.GetDistributionRequestStub = nil
	if fake.getDistributionRequestReturnsOnCall == nil {
		fake.getDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetDistributionOutput
		})
	}
	fake.getDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetDistributionConfig(arg1 *cloudfront.GetDistributionConfigInput) (*cloudfront.GetDistributionConfigOutput, error) {
	fake.getDistributionConfigMutex.Lock()
	ret, specificReturn := fake.getDistributionConfigReturnsOnCall[len(fake.getDistributionConfigArgsForCall)]
	fake.getDistributionConfigArgsForCall = append(fake.getDistributionConfigArgsForCall, struct {
		arg1 *cloudfront.GetDistributionConfigInput
	}{arg1})
	fake.recordInvocation("GetDistributionConfig", []interface{}{arg1})
	fake.getDistributionConfigMutex.Unlock()
	if fake.GetDistributionConfigStub != nil {
		return fake.GetDistributionConfigStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDistributionConfigReturns.result1, fake.getDistributionConfigReturns.result2
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigCallCount() int {
	fake.getDistributionConfigMutex.RLock()
	defer fake.getDistributionConfigMutex.RUnlock()
	return len(fake.getDistributionConfigArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigArgsForCall(i int) *cloudfront.GetDistributionConfigInput {
	fake.getDistributionConfigMutex.RLock()
	defer fake.getDistributionConfigMutex.RUnlock()
	return fake.getDistributionConfigArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigReturns(result1 *cloudfront.GetDistributionConfigOutput, result2 error) {
	fake.GetDistributionConfigStub = nil
	fake.getDistributionConfigReturns = struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigReturnsOnCall(i int, result1 *cloudfront.GetDistributionConfigOutput, result2 error) {
	fake.GetDistributionConfigStub = nil
	if fake.getDistributionConfigReturnsOnCall == nil {
		fake.getDistributionConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetDistributionConfigOutput
			result2 error
		})
	}
	fake.getDistributionConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigWithContext(arg1 aws.Context, arg2 *cloudfront.GetDistributionConfigInput, arg3 ...request.Option) (*cloudfront.GetDistributionConfigOutput, error) {
	fake.getDistributionConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getDistributionConfigWithContextReturnsOnCall[len(fake.getDistributionConfigWithContextArgsForCall)]
	fake.getDistributionConfigWithContextArgsForCall = append(fake.getDistributionConfigWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.GetDistributionConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetDistributionConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getDistributionConfigWithContextMutex.Unlock()
	if fake.GetDistributionConfigWithContextStub != nil {
		return fake.GetDistributionConfigWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDistributionConfigWithContextReturns.result1, fake.getDistributionConfigWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigWithContextCallCount() int {
	fake.getDistributionConfigWithContextMutex.RLock()
	defer fake.getDistributionConfigWithContextMutex.RUnlock()
	return len(fake.getDistributionConfigWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigWithContextArgsForCall(i int) (aws.Context, *cloudfront.GetDistributionConfigInput, []request.Option) {
	fake.getDistributionConfigWithContextMutex.RLock()
	defer fake.getDistributionConfigWithContextMutex.RUnlock()
	return fake.getDistributionConfigWithContextArgsForCall[i].arg1, fake.getDistributionConfigWithContextArgsForCall[i].arg2, fake.getDistributionConfigWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigWithContextReturns(result1 *cloudfront.GetDistributionConfigOutput, result2 error) {
	fake.GetDistributionConfigWithContextStub = nil
	fake.getDistributionConfigWithContextReturns = struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetDistributionConfigOutput, result2 error) {
	fake.GetDistributionConfigWithContextStub = nil
	if fake.getDistributionConfigWithContextReturnsOnCall == nil {
		fake.getDistributionConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetDistributionConfigOutput
			result2 error
		})
	}
	fake.getDistributionConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigRequest(arg1 *cloudfront.GetDistributionConfigInput) (*request.Request, *cloudfront.GetDistributionConfigOutput) {
	fake.getDistributionConfigRequestMutex.Lock()
	ret, specificReturn := fake.getDistributionConfigRequestReturnsOnCall[len(fake.getDistributionConfigRequestArgsForCall)]
	fake.getDistributionConfigRequestArgsForCall = append(fake.getDistributionConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetDistributionConfigInput
	}{arg1})
	fake.recordInvocation("GetDistributionConfigRequest", []interface{}{arg1})
	fake.getDistributionConfigRequestMutex.Unlock()
	if fake.GetDistributionConfigRequestStub != nil {
		return fake.GetDistributionConfigRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDistributionConfigRequestReturns.result1, fake.getDistributionConfigRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigRequestCallCount() int {
	fake.getDistributionConfigRequestMutex.RLock()
	defer fake.getDistributionConfigRequestMutex.RUnlock()
	return len(fake.getDistributionConfigRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigRequestArgsForCall(i int) *cloudfront.GetDistributionConfigInput {
	fake.getDistributionConfigRequestMutex.RLock()
	defer fake.getDistributionConfigRequestMutex.RUnlock()
	return fake.getDistributionConfigRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetDistributionConfigOutput) {
	fake.GetDistributionConfigRequestStub = nil
	fake.getDistributionConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetDistributionConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetDistributionConfigOutput) {
	fake.GetDistributionConfigRequestStub = nil
	if fake.getDistributionConfigRequestReturnsOnCall == nil {
		fake.getDistributionConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetDistributionConfigOutput
		})
	}
	fake.getDistributionConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetDistributionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetInvalidation(arg1 *cloudfront.GetInvalidationInput) (*cloudfront.GetInvalidationOutput, error) {
	fake.getInvalidationMutex.Lock()
	ret, specificReturn := fake.getInvalidationReturnsOnCall[len(fake.getInvalidationArgsForCall)]
	fake.getInvalidationArgsForCall = append(fake.getInvalidationArgsForCall, struct {
		arg1 *cloudfront.GetInvalidationInput
	}{arg1})
	fake.recordInvocation("GetInvalidation", []interface{}{arg1})
	fake.getInvalidationMutex.Unlock()
	if fake.GetInvalidationStub != nil {
		return fake.GetInvalidationStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getInvalidationReturns.result1, fake.getInvalidationReturns.result2
}

func (fake *FakeCloudFrontAPI) GetInvalidationCallCount() int {
	fake.getInvalidationMutex.RLock()
	defer fake.getInvalidationMutex.RUnlock()
	return len(fake.getInvalidationArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetInvalidationArgsForCall(i int) *cloudfront.GetInvalidationInput {
	fake.getInvalidationMutex.RLock()
	defer fake.getInvalidationMutex.RUnlock()
	return fake.getInvalidationArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetInvalidationReturns(result1 *cloudfront.GetInvalidationOutput, result2 error) {
	fake.GetInvalidationStub = nil
	fake.getInvalidationReturns = struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetInvalidationReturnsOnCall(i int, result1 *cloudfront.GetInvalidationOutput, result2 error) {
	fake.GetInvalidationStub = nil
	if fake.getInvalidationReturnsOnCall == nil {
		fake.getInvalidationReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetInvalidationOutput
			result2 error
		})
	}
	fake.getInvalidationReturnsOnCall[i] = struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetInvalidationWithContext(arg1 aws.Context, arg2 *cloudfront.GetInvalidationInput, arg3 ...request.Option) (*cloudfront.GetInvalidationOutput, error) {
	fake.getInvalidationWithContextMutex.Lock()
	ret, specificReturn := fake.getInvalidationWithContextReturnsOnCall[len(fake.getInvalidationWithContextArgsForCall)]
	fake.getInvalidationWithContextArgsForCall = append(fake.getInvalidationWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.GetInvalidationInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetInvalidationWithContext", []interface{}{arg1, arg2, arg3})
	fake.getInvalidationWithContextMutex.Unlock()
	if fake.GetInvalidationWithContextStub != nil {
		return fake.GetInvalidationWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getInvalidationWithContextReturns.result1, fake.getInvalidationWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) GetInvalidationWithContextCallCount() int {
	fake.getInvalidationWithContextMutex.RLock()
	defer fake.getInvalidationWithContextMutex.RUnlock()
	return len(fake.getInvalidationWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetInvalidationWithContextArgsForCall(i int) (aws.Context, *cloudfront.GetInvalidationInput, []request.Option) {
	fake.getInvalidationWithContextMutex.RLock()
	defer fake.getInvalidationWithContextMutex.RUnlock()
	return fake.getInvalidationWithContextArgsForCall[i].arg1, fake.getInvalidationWithContextArgsForCall[i].arg2, fake.getInvalidationWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) GetInvalidationWithContextReturns(result1 *cloudfront.GetInvalidationOutput, result2 error) {
	fake.GetInvalidationWithContextStub = nil
	fake.getInvalidationWithContextReturns = struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetInvalidationWithContextReturnsOnCall(i int, result1 *cloudfront.GetInvalidationOutput, result2 error) {
	fake.GetInvalidationWithContextStub = nil
	if fake.getInvalidationWithContextReturnsOnCall == nil {
		fake.getInvalidationWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetInvalidationOutput
			result2 error
		})
	}
	fake.getInvalidationWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetInvalidationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetInvalidationRequest(arg1 *cloudfront.GetInvalidationInput) (*request.Request, *cloudfront.GetInvalidationOutput) {
	fake.getInvalidationRequestMutex.Lock()
	ret, specificReturn := fake.getInvalidationRequestReturnsOnCall[len(fake.getInvalidationRequestArgsForCall)]
	fake.getInvalidationRequestArgsForCall = append(fake.getInvalidationRequestArgsForCall, struct {
		arg1 *cloudfront.GetInvalidationInput
	}{arg1})
	fake.recordInvocation("GetInvalidationRequest", []interface{}{arg1})
	fake.getInvalidationRequestMutex.Unlock()
	if fake.GetInvalidationRequestStub != nil {
		return fake.GetInvalidationRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getInvalidationRequestReturns.result1, fake.getInvalidationRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) GetInvalidationRequestCallCount() int {
	fake.getInvalidationRequestMutex.RLock()
	defer fake.getInvalidationRequestMutex.RUnlock()
	return len(fake.getInvalidationRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetInvalidationRequestArgsForCall(i int) *cloudfront.GetInvalidationInput {
	fake.getInvalidationRequestMutex.RLock()
	defer fake.getInvalidationRequestMutex.RUnlock()
	return fake.getInvalidationRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetInvalidationRequestReturns(result1 *request.Request, result2 *cloudfront.GetInvalidationOutput) {
	fake.GetInvalidationRequestStub = nil
	fake.getInvalidationRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetInvalidationOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetInvalidationRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetInvalidationOutput) {
	fake.GetInvalidationRequestStub = nil
	if fake.getInvalidationRequestReturnsOnCall == nil {
		fake.getInvalidationRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetInvalidationOutput
		})
	}
	fake.getInvalidationRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetInvalidationOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetStreamingDistribution(arg1 *cloudfront.GetStreamingDistributionInput) (*cloudfront.GetStreamingDistributionOutput, error) {
	fake.getStreamingDistributionMutex.Lock()
	ret, specificReturn := fake.getStreamingDistributionReturnsOnCall[len(fake.getStreamingDistributionArgsForCall)]
	fake.getStreamingDistributionArgsForCall = append(fake.getStreamingDistributionArgsForCall, struct {
		arg1 *cloudfront.GetStreamingDistributionInput
	}{arg1})
	fake.recordInvocation("GetStreamingDistribution", []interface{}{arg1})
	fake.getStreamingDistributionMutex.Unlock()
	if fake.GetStreamingDistributionStub != nil {
		return fake.GetStreamingDistributionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStreamingDistributionReturns.result1, fake.getStreamingDistributionReturns.result2
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionCallCount() int {
	fake.getStreamingDistributionMutex.RLock()
	defer fake.getStreamingDistributionMutex.RUnlock()
	return len(fake.getStreamingDistributionArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionArgsForCall(i int) *cloudfront.GetStreamingDistributionInput {
	fake.getStreamingDistributionMutex.RLock()
	defer fake.getStreamingDistributionMutex.RUnlock()
	return fake.getStreamingDistributionArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionReturns(result1 *cloudfront.GetStreamingDistributionOutput, result2 error) {
	fake.GetStreamingDistributionStub = nil
	fake.getStreamingDistributionReturns = struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionReturnsOnCall(i int, result1 *cloudfront.GetStreamingDistributionOutput, result2 error) {
	fake.GetStreamingDistributionStub = nil
	if fake.getStreamingDistributionReturnsOnCall == nil {
		fake.getStreamingDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetStreamingDistributionOutput
			result2 error
		})
	}
	fake.getStreamingDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionWithContext(arg1 aws.Context, arg2 *cloudfront.GetStreamingDistributionInput, arg3 ...request.Option) (*cloudfront.GetStreamingDistributionOutput, error) {
	fake.getStreamingDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.getStreamingDistributionWithContextReturnsOnCall[len(fake.getStreamingDistributionWithContextArgsForCall)]
	fake.getStreamingDistributionWithContextArgsForCall = append(fake.getStreamingDistributionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.GetStreamingDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetStreamingDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.getStreamingDistributionWithContextMutex.Unlock()
	if fake.GetStreamingDistributionWithContextStub != nil {
		return fake.GetStreamingDistributionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStreamingDistributionWithContextReturns.result1, fake.getStreamingDistributionWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionWithContextCallCount() int {
	fake.getStreamingDistributionWithContextMutex.RLock()
	defer fake.getStreamingDistributionWithContextMutex.RUnlock()
	return len(fake.getStreamingDistributionWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionWithContextArgsForCall(i int) (aws.Context, *cloudfront.GetStreamingDistributionInput, []request.Option) {
	fake.getStreamingDistributionWithContextMutex.RLock()
	defer fake.getStreamingDistributionWithContextMutex.RUnlock()
	return fake.getStreamingDistributionWithContextArgsForCall[i].arg1, fake.getStreamingDistributionWithContextArgsForCall[i].arg2, fake.getStreamingDistributionWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionWithContextReturns(result1 *cloudfront.GetStreamingDistributionOutput, result2 error) {
	fake.GetStreamingDistributionWithContextStub = nil
	fake.getStreamingDistributionWithContextReturns = struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.GetStreamingDistributionOutput, result2 error) {
	fake.GetStreamingDistributionWithContextStub = nil
	if fake.getStreamingDistributionWithContextReturnsOnCall == nil {
		fake.getStreamingDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetStreamingDistributionOutput
			result2 error
		})
	}
	fake.getStreamingDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionRequest(arg1 *cloudfront.GetStreamingDistributionInput) (*request.Request, *cloudfront.GetStreamingDistributionOutput) {
	fake.getStreamingDistributionRequestMutex.Lock()
	ret, specificReturn := fake.getStreamingDistributionRequestReturnsOnCall[len(fake.getStreamingDistributionRequestArgsForCall)]
	fake.getStreamingDistributionRequestArgsForCall = append(fake.getStreamingDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.GetStreamingDistributionInput
	}{arg1})
	fake.recordInvocation("GetStreamingDistributionRequest", []interface{}{arg1})
	fake.getStreamingDistributionRequestMutex.Unlock()
	if fake.GetStreamingDistributionRequestStub != nil {
		return fake.GetStreamingDistributionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStreamingDistributionRequestReturns.result1, fake.getStreamingDistributionRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionRequestCallCount() int {
	fake.getStreamingDistributionRequestMutex.RLock()
	defer fake.getStreamingDistributionRequestMutex.RUnlock()
	return len(fake.getStreamingDistributionRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionRequestArgsForCall(i int) *cloudfront.GetStreamingDistributionInput {
	fake.getStreamingDistributionRequestMutex.RLock()
	defer fake.getStreamingDistributionRequestMutex.RUnlock()
	return fake.getStreamingDistributionRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.GetStreamingDistributionOutput) {
	fake.GetStreamingDistributionRequestStub = nil
	fake.getStreamingDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetStreamingDistributionOutput) {
	fake.GetStreamingDistributionRequestStub = nil
	if fake.getStreamingDistributionRequestReturnsOnCall == nil {
		fake.getStreamingDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetStreamingDistributionOutput
		})
	}
	fake.getStreamingDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfig(arg1 *cloudfront.GetStreamingDistributionConfigInput) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	fake.getStreamingDistributionConfigMutex.Lock()
	ret, specificReturn := fake.getStreamingDistributionConfigReturnsOnCall[len(fake.getStreamingDistributionConfigArgsForCall)]
	fake.getStreamingDistributionConfigArgsForCall = append(fake.getStreamingDistributionConfigArgsForCall, struct {
		arg1 *cloudfront.GetStreamingDistributionConfigInput
	}{arg1})
	fake.recordInvocation("GetStreamingDistributionConfig", []interface{}{arg1})
	fake.getStreamingDistributionConfigMutex.Unlock()
	if fake.GetStreamingDistributionConfigStub != nil {
		return fake.GetStreamingDistributionConfigStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStreamingDistributionConfigReturns.result1, fake.getStreamingDistributionConfigReturns.result2
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigCallCount() int {
	fake.getStreamingDistributionConfigMutex.RLock()
	defer fake.getStreamingDistributionConfigMutex.RUnlock()
	return len(fake.getStreamingDistributionConfigArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigArgsForCall(i int) *cloudfront.GetStreamingDistributionConfigInput {
	fake.getStreamingDistributionConfigMutex.RLock()
	defer fake.getStreamingDistributionConfigMutex.RUnlock()
	return fake.getStreamingDistributionConfigArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigReturns(result1 *cloudfront.GetStreamingDistributionConfigOutput, result2 error) {
	fake.GetStreamingDistributionConfigStub = nil
	fake.getStreamingDistributionConfigReturns = struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigReturnsOnCall(i int, result1 *cloudfront.GetStreamingDistributionConfigOutput, result2 error) {
	fake.GetStreamingDistributionConfigStub = nil
	if fake.getStreamingDistributionConfigReturnsOnCall == nil {
		fake.getStreamingDistributionConfigReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetStreamingDistributionConfigOutput
			result2 error
		})
	}
	fake.getStreamingDistributionConfigReturnsOnCall[i] = struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigWithContext(arg1 aws.Context, arg2 *cloudfront.GetStreamingDistributionConfigInput, arg3 ...request.Option) (*cloudfront.GetStreamingDistributionConfigOutput, error) {
	fake.getStreamingDistributionConfigWithContextMutex.Lock()
	ret, specificReturn := fake.getStreamingDistributionConfigWithContextReturnsOnCall[len(fake.getStreamingDistributionConfigWithContextArgsForCall)]
	fake.getStreamingDistributionConfigWithContextArgsForCall = append(fake.getStreamingDistributionConfigWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.GetStreamingDistributionConfigInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetStreamingDistributionConfigWithContext", []interface{}{arg1, arg2, arg3})
	fake.getStreamingDistributionConfigWithContextMutex.Unlock()
	if fake.GetStreamingDistributionConfigWithContextStub != nil {
		return fake.GetStreamingDistributionConfigWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStreamingDistributionConfigWithContextReturns.result1, fake.getStreamingDistributionConfigWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigWithContextCallCount() int {
	fake.getStreamingDistributionConfigWithContextMutex.RLock()
	defer fake.getStreamingDistributionConfigWithContextMutex.RUnlock()
	return len(fake.getStreamingDistributionConfigWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigWithContextArgsForCall(i int) (aws.Context, *cloudfront.GetStreamingDistributionConfigInput, []request.Option) {
	fake.getStreamingDistributionConfigWithContextMutex.RLock()
	defer fake.getStreamingDistributionConfigWithContextMutex.RUnlock()
	return fake.getStreamingDistributionConfigWithContextArgsForCall[i].arg1, fake.getStreamingDistributionConfigWithContextArgsForCall[i].arg2, fake.getStreamingDistributionConfigWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigWithContextReturns(result1 *cloudfront.GetStreamingDistributionConfigOutput, result2 error) {
	fake.GetStreamingDistributionConfigWithContextStub = nil
	fake.getStreamingDistributionConfigWithContextReturns = struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigWithContextReturnsOnCall(i int, result1 *cloudfront.GetStreamingDistributionConfigOutput, result2 error) {
	fake.GetStreamingDistributionConfigWithContextStub = nil
	if fake.getStreamingDistributionConfigWithContextReturnsOnCall == nil {
		fake.getStreamingDistributionConfigWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.GetStreamingDistributionConfigOutput
			result2 error
		})
	}
	fake.getStreamingDistributionConfigWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.GetStreamingDistributionConfigOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigRequest(arg1 *cloudfront.GetStreamingDistributionConfigInput) (*request.Request, *cloudfront.GetStreamingDistributionConfigOutput) {
	fake.getStreamingDistributionConfigRequestMutex.Lock()
	ret, specificReturn := fake.getStreamingDistributionConfigRequestReturnsOnCall[len(fake.getStreamingDistributionConfigRequestArgsForCall)]
	fake.getStreamingDistributionConfigRequestArgsForCall = append(fake.getStreamingDistributionConfigRequestArgsForCall, struct {
		arg1 *cloudfront.GetStreamingDistributionConfigInput
	}{arg1})
	fake.recordInvocation("GetStreamingDistributionConfigRequest", []interface{}{arg1})
	fake.getStreamingDistributionConfigRequestMutex.Unlock()
	if fake.GetStreamingDistributionConfigRequestStub != nil {
		return fake.GetStreamingDistributionConfigRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStreamingDistributionConfigRequestReturns.result1, fake.getStreamingDistributionConfigRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigRequestCallCount() int {
	fake.getStreamingDistributionConfigRequestMutex.RLock()
	defer fake.getStreamingDistributionConfigRequestMutex.RUnlock()
	return len(fake.getStreamingDistributionConfigRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigRequestArgsForCall(i int) *cloudfront.GetStreamingDistributionConfigInput {
	fake.getStreamingDistributionConfigRequestMutex.RLock()
	defer fake.getStreamingDistributionConfigRequestMutex.RUnlock()
	return fake.getStreamingDistributionConfigRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigRequestReturns(result1 *request.Request, result2 *cloudfront.GetStreamingDistributionConfigOutput) {
	fake.GetStreamingDistributionConfigRequestStub = nil
	fake.getStreamingDistributionConfigRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) GetStreamingDistributionConfigRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.GetStreamingDistributionConfigOutput) {
	fake.GetStreamingDistributionConfigRequestStub = nil
	if fake.getStreamingDistributionConfigRequestReturnsOnCall == nil {
		fake.getStreamingDistributionConfigRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.GetStreamingDistributionConfigOutput
		})
	}
	fake.getStreamingDistributionConfigRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.GetStreamingDistributionConfigOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentities(arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	fake.listCloudFrontOriginAccessIdentitiesMutex.Lock()
	ret, specificReturn := fake.listCloudFrontOriginAccessIdentitiesReturnsOnCall[len(fake.listCloudFrontOriginAccessIdentitiesArgsForCall)]
	fake.listCloudFrontOriginAccessIdentitiesArgsForCall = append(fake.listCloudFrontOriginAccessIdentitiesArgsForCall, struct {
		arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
	}{arg1})
	fake.recordInvocation("ListCloudFrontOriginAccessIdentities", []interface{}{arg1})
	fake.listCloudFrontOriginAccessIdentitiesMutex.Unlock()
	if fake.ListCloudFrontOriginAccessIdentitiesStub != nil {
		return fake.ListCloudFrontOriginAccessIdentitiesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listCloudFrontOriginAccessIdentitiesReturns.result1, fake.listCloudFrontOriginAccessIdentitiesReturns.result2
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesCallCount() int {
	fake.listCloudFrontOriginAccessIdentitiesMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesMutex.RUnlock()
	return len(fake.listCloudFrontOriginAccessIdentitiesArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesArgsForCall(i int) *cloudfront.ListCloudFrontOriginAccessIdentitiesInput {
	fake.listCloudFrontOriginAccessIdentitiesMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesMutex.RUnlock()
	return fake.listCloudFrontOriginAccessIdentitiesArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesReturns(result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, result2 error) {
	fake.ListCloudFrontOriginAccessIdentitiesStub = nil
	fake.listCloudFrontOriginAccessIdentitiesReturns = struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesReturnsOnCall(i int, result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, result2 error) {
	fake.ListCloudFrontOriginAccessIdentitiesStub = nil
	if fake.listCloudFrontOriginAccessIdentitiesReturnsOnCall == nil {
		fake.listCloudFrontOriginAccessIdentitiesReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
			result2 error
		})
	}
	fake.listCloudFrontOriginAccessIdentitiesReturnsOnCall[i] = struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesWithContext(arg1 aws.Context, arg2 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg3 ...request.Option) (*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, error) {
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.Lock()
	ret, specificReturn := fake.listCloudFrontOriginAccessIdentitiesWithContextReturnsOnCall[len(fake.listCloudFrontOriginAccessIdentitiesWithContextArgsForCall)]
	fake.listCloudFrontOriginAccessIdentitiesWithContextArgsForCall = append(fake.listCloudFrontOriginAccessIdentitiesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListCloudFrontOriginAccessIdentitiesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.Unlock()
	if fake.ListCloudFrontOriginAccessIdentitiesWithContextStub != nil {
		return fake.ListCloudFrontOriginAccessIdentitiesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listCloudFrontOriginAccessIdentitiesWithContextReturns.result1, fake.listCloudFrontOriginAccessIdentitiesWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesWithContextCallCount() int {
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.RUnlock()
	return len(fake.listCloudFrontOriginAccessIdentitiesWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesWithContextArgsForCall(i int) (aws.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, []request.Option) {
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.RUnlock()
	return fake.listCloudFrontOriginAccessIdentitiesWithContextArgsForCall[i].arg1, fake.listCloudFrontOriginAccessIdentitiesWithContextArgsForCall[i].arg2, fake.listCloudFrontOriginAccessIdentitiesWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesWithContextReturns(result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, result2 error) {
	fake.ListCloudFrontOriginAccessIdentitiesWithContextStub = nil
	fake.listCloudFrontOriginAccessIdentitiesWithContextReturns = struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesWithContextReturnsOnCall(i int, result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, result2 error) {
	fake.ListCloudFrontOriginAccessIdentitiesWithContextStub = nil
	if fake.listCloudFrontOriginAccessIdentitiesWithContextReturnsOnCall == nil {
		fake.listCloudFrontOriginAccessIdentitiesWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
			result2 error
		})
	}
	fake.listCloudFrontOriginAccessIdentitiesWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesRequest(arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput) (*request.Request, *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput) {
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.Lock()
	ret, specificReturn := fake.listCloudFrontOriginAccessIdentitiesRequestReturnsOnCall[len(fake.listCloudFrontOriginAccessIdentitiesRequestArgsForCall)]
	fake.listCloudFrontOriginAccessIdentitiesRequestArgsForCall = append(fake.listCloudFrontOriginAccessIdentitiesRequestArgsForCall, struct {
		arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
	}{arg1})
	fake.recordInvocation("ListCloudFrontOriginAccessIdentitiesRequest", []interface{}{arg1})
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.Unlock()
	if fake.ListCloudFrontOriginAccessIdentitiesRequestStub != nil {
		return fake.ListCloudFrontOriginAccessIdentitiesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listCloudFrontOriginAccessIdentitiesRequestReturns.result1, fake.listCloudFrontOriginAccessIdentitiesRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesRequestCallCount() int {
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesRequestMutex.RUnlock()
	return len(fake.listCloudFrontOriginAccessIdentitiesRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesRequestArgsForCall(i int) *cloudfront.ListCloudFrontOriginAccessIdentitiesInput {
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesRequestMutex.RUnlock()
	return fake.listCloudFrontOriginAccessIdentitiesRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesRequestReturns(result1 *request.Request, result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput) {
	fake.ListCloudFrontOriginAccessIdentitiesRequestStub = nil
	fake.listCloudFrontOriginAccessIdentitiesRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput) {
	fake.ListCloudFrontOriginAccessIdentitiesRequestStub = nil
	if fake.listCloudFrontOriginAccessIdentitiesRequestReturnsOnCall == nil {
		fake.listCloudFrontOriginAccessIdentitiesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
		})
	}
	fake.listCloudFrontOriginAccessIdentitiesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListCloudFrontOriginAccessIdentitiesOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPages(arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg2 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool) error {
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.Lock()
	ret, specificReturn := fake.listCloudFrontOriginAccessIdentitiesPagesReturnsOnCall[len(fake.listCloudFrontOriginAccessIdentitiesPagesArgsForCall)]
	fake.listCloudFrontOriginAccessIdentitiesPagesArgsForCall = append(fake.listCloudFrontOriginAccessIdentitiesPagesArgsForCall, struct {
		arg1 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
		arg2 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListCloudFrontOriginAccessIdentitiesPages", []interface{}{arg1, arg2})
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.Unlock()
	if fake.ListCloudFrontOriginAccessIdentitiesPagesStub != nil {
		return fake.ListCloudFrontOriginAccessIdentitiesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listCloudFrontOriginAccessIdentitiesPagesReturns.result1
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPagesCallCount() int {
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesMutex.RUnlock()
	return len(fake.listCloudFrontOriginAccessIdentitiesPagesArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPagesArgsForCall(i int) (*cloudfront.ListCloudFrontOriginAccessIdentitiesInput, func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool) {
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesMutex.RUnlock()
	return fake.listCloudFrontOriginAccessIdentitiesPagesArgsForCall[i].arg1, fake.listCloudFrontOriginAccessIdentitiesPagesArgsForCall[i].arg2
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPagesReturns(result1 error) {
	fake.ListCloudFrontOriginAccessIdentitiesPagesStub = nil
	fake.listCloudFrontOriginAccessIdentitiesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPagesReturnsOnCall(i int, result1 error) {
	fake.ListCloudFrontOriginAccessIdentitiesPagesStub = nil
	if fake.listCloudFrontOriginAccessIdentitiesPagesReturnsOnCall == nil {
		fake.listCloudFrontOriginAccessIdentitiesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listCloudFrontOriginAccessIdentitiesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPagesWithContext(arg1 aws.Context, arg2 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, arg3 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listCloudFrontOriginAccessIdentitiesPagesWithContextReturnsOnCall[len(fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall)]
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall = append(fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.ListCloudFrontOriginAccessIdentitiesInput
		arg3 func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListCloudFrontOriginAccessIdentitiesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.Unlock()
	if fake.ListCloudFrontOriginAccessIdentitiesPagesWithContextStub != nil {
		return fake.ListCloudFrontOriginAccessIdentitiesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listCloudFrontOriginAccessIdentitiesPagesWithContextReturns.result1
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPagesWithContextCallCount() int {
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.RUnlock()
	return len(fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall(i int) (aws.Context, *cloudfront.ListCloudFrontOriginAccessIdentitiesInput, func(*cloudfront.ListCloudFrontOriginAccessIdentitiesOutput, bool) bool, []request.Option) {
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.RUnlock()
	return fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall[i].arg1, fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall[i].arg2, fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall[i].arg3, fake.listCloudFrontOriginAccessIdentitiesPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPagesWithContextReturns(result1 error) {
	fake.ListCloudFrontOriginAccessIdentitiesPagesWithContextStub = nil
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListCloudFrontOriginAccessIdentitiesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.ListCloudFrontOriginAccessIdentitiesPagesWithContextStub = nil
	if fake.listCloudFrontOriginAccessIdentitiesPagesWithContextReturnsOnCall == nil {
		fake.listCloudFrontOriginAccessIdentitiesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListDistributions(arg1 *cloudfront.ListDistributionsInput) (*cloudfront.ListDistributionsOutput, error) {
	fake.listDistributionsMutex.Lock()
	ret, specificReturn := fake.listDistributionsReturnsOnCall[len(fake.listDistributionsArgsForCall)]
	fake.listDistributionsArgsForCall = append(fake.listDistributionsArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsInput
	}{arg1})
	fake.recordInvocation("ListDistributions", []interface{}{arg1})
	fake.listDistributionsMutex.Unlock()
	if fake.ListDistributionsStub != nil {
		return fake.ListDistributionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listDistributionsReturns.result1, fake.listDistributionsReturns.result2
}

func (fake *FakeCloudFrontAPI) ListDistributionsCallCount() int {
	fake.listDistributionsMutex.RLock()
	defer fake.listDistributionsMutex.RUnlock()
	return len(fake.listDistributionsArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListDistributionsArgsForCall(i int) *cloudfront.ListDistributionsInput {
	fake.listDistributionsMutex.RLock()
	defer fake.listDistributionsMutex.RUnlock()
	return fake.listDistributionsArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) ListDistributionsReturns(result1 *cloudfront.ListDistributionsOutput, result2 error) {
	fake.ListDistributionsStub = nil
	fake.listDistributionsReturns = struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListDistributionsReturnsOnCall(i int, result1 *cloudfront.ListDistributionsOutput, result2 error) {
	fake.ListDistributionsStub = nil
	if fake.listDistributionsReturnsOnCall == nil {
		fake.listDistributionsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsOutput
			result2 error
		})
	}
	fake.listDistributionsReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListDistributionsWithContext(arg1 aws.Context, arg2 *cloudfront.ListDistributionsInput, arg3 ...request.Option) (*cloudfront.ListDistributionsOutput, error) {
	fake.listDistributionsWithContextMutex.Lock()
	ret, specificReturn := fake.listDistributionsWithContextReturnsOnCall[len(fake.listDistributionsWithContextArgsForCall)]
	fake.listDistributionsWithContextArgsForCall = append(fake.listDistributionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.ListDistributionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListDistributionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDistributionsWithContextMutex.Unlock()
	if fake.ListDistributionsWithContextStub != nil {
		return fake.ListDistributionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listDistributionsWithContextReturns.result1, fake.listDistributionsWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) ListDistributionsWithContextCallCount() int {
	fake.listDistributionsWithContextMutex.RLock()
	defer fake.listDistributionsWithContextMutex.RUnlock()
	return len(fake.listDistributionsWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListDistributionsWithContextArgsForCall(i int) (aws.Context, *cloudfront.ListDistributionsInput, []request.Option) {
	fake.listDistributionsWithContextMutex.RLock()
	defer fake.listDistributionsWithContextMutex.RUnlock()
	return fake.listDistributionsWithContextArgsForCall[i].arg1, fake.listDistributionsWithContextArgsForCall[i].arg2, fake.listDistributionsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) ListDistributionsWithContextReturns(result1 *cloudfront.ListDistributionsOutput, result2 error) {
	fake.ListDistributionsWithContextStub = nil
	fake.listDistributionsWithContextReturns = struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListDistributionsWithContextReturnsOnCall(i int, result1 *cloudfront.ListDistributionsOutput, result2 error) {
	fake.ListDistributionsWithContextStub = nil
	if fake.listDistributionsWithContextReturnsOnCall == nil {
		fake.listDistributionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsOutput
			result2 error
		})
	}
	fake.listDistributionsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListDistributionsRequest(arg1 *cloudfront.ListDistributionsInput) (*request.Request, *cloudfront.ListDistributionsOutput) {
	fake.listDistributionsRequestMutex.Lock()
	ret, specificReturn := fake.listDistributionsRequestReturnsOnCall[len(fake.listDistributionsRequestArgsForCall)]
	fake.listDistributionsRequestArgsForCall = append(fake.listDistributionsRequestArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsInput
	}{arg1})
	fake.recordInvocation("ListDistributionsRequest", []interface{}{arg1})
	fake.listDistributionsRequestMutex.Unlock()
	if fake.ListDistributionsRequestStub != nil {
		return fake.ListDistributionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listDistributionsRequestReturns.result1, fake.listDistributionsRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) ListDistributionsRequestCallCount() int {
	fake.listDistributionsRequestMutex.RLock()
	defer fake.listDistributionsRequestMutex.RUnlock()
	return len(fake.listDistributionsRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListDistributionsRequestArgsForCall(i int) *cloudfront.ListDistributionsInput {
	fake.listDistributionsRequestMutex.RLock()
	defer fake.listDistributionsRequestMutex.RUnlock()
	return fake.listDistributionsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) ListDistributionsRequestReturns(result1 *request.Request, result2 *cloudfront.ListDistributionsOutput) {
	fake.ListDistributionsRequestStub = nil
	fake.listDistributionsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListDistributionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListDistributionsOutput) {
	fake.ListDistributionsRequestStub = nil
	if fake.listDistributionsRequestReturnsOnCall == nil {
		fake.listDistributionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListDistributionsOutput
		})
	}
	fake.listDistributionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListDistributionsPages(arg1 *cloudfront.ListDistributionsInput, arg2 func(*cloudfront.ListDistributionsOutput, bool) bool) error {
	fake.listDistributionsPagesMutex.Lock()
	ret, specificReturn := fake.listDistributionsPagesReturnsOnCall[len(fake.listDistributionsPagesArgsForCall)]
	fake.listDistributionsPagesArgsForCall = append(fake.listDistributionsPagesArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsInput
		arg2 func(*cloudfront.ListDistributionsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListDistributionsPages", []interface{}{arg1, arg2})
	fake.listDistributionsPagesMutex.Unlock()
	if fake.ListDistributionsPagesStub != nil {
		return fake.ListDistributionsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listDistributionsPagesReturns.result1
}

func (fake *FakeCloudFrontAPI) ListDistributionsPagesCallCount() int {
	fake.listDistributionsPagesMutex.RLock()
	defer fake.listDistributionsPagesMutex.RUnlock()
	return len(fake.listDistributionsPagesArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListDistributionsPagesArgsForCall(i int) (*cloudfront.ListDistributionsInput, func(*cloudfront.ListDistributionsOutput, bool) bool) {
	fake.listDistributionsPagesMutex.RLock()
	defer fake.listDistributionsPagesMutex.RUnlock()
	return fake.listDistributionsPagesArgsForCall[i].arg1, fake.listDistributionsPagesArgsForCall[i].arg2
}

func (fake *FakeCloudFrontAPI) ListDistributionsPagesReturns(result1 error) {
	fake.ListDistributionsPagesStub = nil
	fake.listDistributionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListDistributionsPagesReturnsOnCall(i int, result1 error) {
	fake.ListDistributionsPagesStub = nil
	if fake.listDistributionsPagesReturnsOnCall == nil {
		fake.listDistributionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listDistributionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListDistributionsPagesWithContext(arg1 aws.Context, arg2 *cloudfront.ListDistributionsInput, arg3 func(*cloudfront.ListDistributionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listDistributionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listDistributionsPagesWithContextReturnsOnCall[len(fake.listDistributionsPagesWithContextArgsForCall)]
	fake.listDistributionsPagesWithContextArgsForCall = append(fake.listDistributionsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.ListDistributionsInput
		arg3 func(*cloudfront.ListDistributionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListDistributionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listDistributionsPagesWithContextMutex.Unlock()
	if fake.ListDistributionsPagesWithContextStub != nil {
		return fake.ListDistributionsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listDistributionsPagesWithContextReturns.result1
}

func (fake *FakeCloudFrontAPI) ListDistributionsPagesWithContextCallCount() int {
	fake.listDistributionsPagesWithContextMutex.RLock()
	defer fake.listDistributionsPagesWithContextMutex.RUnlock()
	return len(fake.listDistributionsPagesWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListDistributionsPagesWithContextArgsForCall(i int) (aws.Context, *cloudfront.ListDistributionsInput, func(*cloudfront.ListDistributionsOutput, bool) bool, []request.Option) {
	fake.listDistributionsPagesWithContextMutex.RLock()
	defer fake.listDistributionsPagesWithContextMutex.RUnlock()
	return fake.listDistributionsPagesWithContextArgsForCall[i].arg1, fake.listDistributionsPagesWithContextArgsForCall[i].arg2, fake.listDistributionsPagesWithContextArgsForCall[i].arg3, fake.listDistributionsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeCloudFrontAPI) ListDistributionsPagesWithContextReturns(result1 error) {
	fake.ListDistributionsPagesWithContextStub = nil
	fake.listDistributionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListDistributionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.ListDistributionsPagesWithContextStub = nil
	if fake.listDistributionsPagesWithContextReturnsOnCall == nil {
		fake.listDistributionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listDistributionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLId(arg1 *cloudfront.ListDistributionsByWebACLIdInput) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	fake.listDistributionsByWebACLIdMutex.Lock()
	ret, specificReturn := fake.listDistributionsByWebACLIdReturnsOnCall[len(fake.listDistributionsByWebACLIdArgsForCall)]
	fake.listDistributionsByWebACLIdArgsForCall = append(fake.listDistributionsByWebACLIdArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsByWebACLIdInput
	}{arg1})
	fake.recordInvocation("ListDistributionsByWebACLId", []interface{}{arg1})
	fake.listDistributionsByWebACLIdMutex.Unlock()
	if fake.ListDistributionsByWebACLIdStub != nil {
		return fake.ListDistributionsByWebACLIdStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listDistributionsByWebACLIdReturns.result1, fake.listDistributionsByWebACLIdReturns.result2
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdCallCount() int {
	fake.listDistributionsByWebACLIdMutex.RLock()
	defer fake.listDistributionsByWebACLIdMutex.RUnlock()
	return len(fake.listDistributionsByWebACLIdArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdArgsForCall(i int) *cloudfront.ListDistributionsByWebACLIdInput {
	fake.listDistributionsByWebACLIdMutex.RLock()
	defer fake.listDistributionsByWebACLIdMutex.RUnlock()
	return fake.listDistributionsByWebACLIdArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdReturns(result1 *cloudfront.ListDistributionsByWebACLIdOutput, result2 error) {
	fake.ListDistributionsByWebACLIdStub = nil
	fake.listDistributionsByWebACLIdReturns = struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdReturnsOnCall(i int, result1 *cloudfront.ListDistributionsByWebACLIdOutput, result2 error) {
	fake.ListDistributionsByWebACLIdStub = nil
	if fake.listDistributionsByWebACLIdReturnsOnCall == nil {
		fake.listDistributionsByWebACLIdReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsByWebACLIdOutput
			result2 error
		})
	}
	fake.listDistributionsByWebACLIdReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdWithContext(arg1 aws.Context, arg2 *cloudfront.ListDistributionsByWebACLIdInput, arg3 ...request.Option) (*cloudfront.ListDistributionsByWebACLIdOutput, error) {
	fake.listDistributionsByWebACLIdWithContextMutex.Lock()
	ret, specificReturn := fake.listDistributionsByWebACLIdWithContextReturnsOnCall[len(fake.listDistributionsByWebACLIdWithContextArgsForCall)]
	fake.listDistributionsByWebACLIdWithContextArgsForCall = append(fake.listDistributionsByWebACLIdWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.ListDistributionsByWebACLIdInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListDistributionsByWebACLIdWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDistributionsByWebACLIdWithContextMutex.Unlock()
	if fake.ListDistributionsByWebACLIdWithContextStub != nil {
		return fake.ListDistributionsByWebACLIdWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listDistributionsByWebACLIdWithContextReturns.result1, fake.listDistributionsByWebACLIdWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdWithContextCallCount() int {
	fake.listDistributionsByWebACLIdWithContextMutex.RLock()
	defer fake.listDistributionsByWebACLIdWithContextMutex.RUnlock()
	return len(fake.listDistributionsByWebACLIdWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdWithContextArgsForCall(i int) (aws.Context, *cloudfront.ListDistributionsByWebACLIdInput, []request.Option) {
	fake.listDistributionsByWebACLIdWithContextMutex.RLock()
	defer fake.listDistributionsByWebACLIdWithContextMutex.RUnlock()
	return fake.listDistributionsByWebACLIdWithContextArgsForCall[i].arg1, fake.listDistributionsByWebACLIdWithContextArgsForCall[i].arg2, fake.listDistributionsByWebACLIdWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdWithContextReturns(result1 *cloudfront.ListDistributionsByWebACLIdOutput, result2 error) {
	fake.ListDistributionsByWebACLIdWithContextStub = nil
	fake.listDistributionsByWebACLIdWithContextReturns = struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdWithContextReturnsOnCall(i int, result1 *cloudfront.ListDistributionsByWebACLIdOutput, result2 error) {
	fake.ListDistributionsByWebACLIdWithContextStub = nil
	if fake.listDistributionsByWebACLIdWithContextReturnsOnCall == nil {
		fake.listDistributionsByWebACLIdWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListDistributionsByWebACLIdOutput
			result2 error
		})
	}
	fake.listDistributionsByWebACLIdWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListDistributionsByWebACLIdOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdRequest(arg1 *cloudfront.ListDistributionsByWebACLIdInput) (*request.Request, *cloudfront.ListDistributionsByWebACLIdOutput) {
	fake.listDistributionsByWebACLIdRequestMutex.Lock()
	ret, specificReturn := fake.listDistributionsByWebACLIdRequestReturnsOnCall[len(fake.listDistributionsByWebACLIdRequestArgsForCall)]
	fake.listDistributionsByWebACLIdRequestArgsForCall = append(fake.listDistributionsByWebACLIdRequestArgsForCall, struct {
		arg1 *cloudfront.ListDistributionsByWebACLIdInput
	}{arg1})
	fake.recordInvocation("ListDistributionsByWebACLIdRequest", []interface{}{arg1})
	fake.listDistributionsByWebACLIdRequestMutex.Unlock()
	if fake.ListDistributionsByWebACLIdRequestStub != nil {
		return fake.ListDistributionsByWebACLIdRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listDistributionsByWebACLIdRequestReturns.result1, fake.listDistributionsByWebACLIdRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdRequestCallCount() int {
	fake.listDistributionsByWebACLIdRequestMutex.RLock()
	defer fake.listDistributionsByWebACLIdRequestMutex.RUnlock()
	return len(fake.listDistributionsByWebACLIdRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdRequestArgsForCall(i int) *cloudfront.ListDistributionsByWebACLIdInput {
	fake.listDistributionsByWebACLIdRequestMutex.RLock()
	defer fake.listDistributionsByWebACLIdRequestMutex.RUnlock()
	return fake.listDistributionsByWebACLIdRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdRequestReturns(result1 *request.Request, result2 *cloudfront.ListDistributionsByWebACLIdOutput) {
	fake.ListDistributionsByWebACLIdRequestStub = nil
	fake.listDistributionsByWebACLIdRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByWebACLIdOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListDistributionsByWebACLIdRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListDistributionsByWebACLIdOutput) {
	fake.ListDistributionsByWebACLIdRequestStub = nil
	if fake.listDistributionsByWebACLIdRequestReturnsOnCall == nil {
		fake.listDistributionsByWebACLIdRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListDistributionsByWebACLIdOutput
		})
	}
	fake.listDistributionsByWebACLIdRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListDistributionsByWebACLIdOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListInvalidations(arg1 *cloudfront.ListInvalidationsInput) (*cloudfront.ListInvalidationsOutput, error) {
	fake.listInvalidationsMutex.Lock()
	ret, specificReturn := fake.listInvalidationsReturnsOnCall[len(fake.listInvalidationsArgsForCall)]
	fake.listInvalidationsArgsForCall = append(fake.listInvalidationsArgsForCall, struct {
		arg1 *cloudfront.ListInvalidationsInput
	}{arg1})
	fake.recordInvocation("ListInvalidations", []interface{}{arg1})
	fake.listInvalidationsMutex.Unlock()
	if fake.ListInvalidationsStub != nil {
		return fake.ListInvalidationsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listInvalidationsReturns.result1, fake.listInvalidationsReturns.result2
}

func (fake *FakeCloudFrontAPI) ListInvalidationsCallCount() int {
	fake.listInvalidationsMutex.RLock()
	defer fake.listInvalidationsMutex.RUnlock()
	return len(fake.listInvalidationsArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListInvalidationsArgsForCall(i int) *cloudfront.ListInvalidationsInput {
	fake.listInvalidationsMutex.RLock()
	defer fake.listInvalidationsMutex.RUnlock()
	return fake.listInvalidationsArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) ListInvalidationsReturns(result1 *cloudfront.ListInvalidationsOutput, result2 error) {
	fake.ListInvalidationsStub = nil
	fake.listInvalidationsReturns = struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListInvalidationsReturnsOnCall(i int, result1 *cloudfront.ListInvalidationsOutput, result2 error) {
	fake.ListInvalidationsStub = nil
	if fake.listInvalidationsReturnsOnCall == nil {
		fake.listInvalidationsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListInvalidationsOutput
			result2 error
		})
	}
	fake.listInvalidationsReturnsOnCall[i] = struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListInvalidationsWithContext(arg1 aws.Context, arg2 *cloudfront.ListInvalidationsInput, arg3 ...request.Option) (*cloudfront.ListInvalidationsOutput, error) {
	fake.listInvalidationsWithContextMutex.Lock()
	ret, specificReturn := fake.listInvalidationsWithContextReturnsOnCall[len(fake.listInvalidationsWithContextArgsForCall)]
	fake.listInvalidationsWithContextArgsForCall = append(fake.listInvalidationsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.ListInvalidationsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListInvalidationsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listInvalidationsWithContextMutex.Unlock()
	if fake.ListInvalidationsWithContextStub != nil {
		return fake.ListInvalidationsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listInvalidationsWithContextReturns.result1, fake.listInvalidationsWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) ListInvalidationsWithContextCallCount() int {
	fake.listInvalidationsWithContextMutex.RLock()
	defer fake.listInvalidationsWithContextMutex.RUnlock()
	return len(fake.listInvalidationsWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListInvalidationsWithContextArgsForCall(i int) (aws.Context, *cloudfront.ListInvalidationsInput, []request.Option) {
	fake.listInvalidationsWithContextMutex.RLock()
	defer fake.listInvalidationsWithContextMutex.RUnlock()
	return fake.listInvalidationsWithContextArgsForCall[i].arg1, fake.listInvalidationsWithContextArgsForCall[i].arg2, fake.listInvalidationsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) ListInvalidationsWithContextReturns(result1 *cloudfront.ListInvalidationsOutput, result2 error) {
	fake.ListInvalidationsWithContextStub = nil
	fake.listInvalidationsWithContextReturns = struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListInvalidationsWithContextReturnsOnCall(i int, result1 *cloudfront.ListInvalidationsOutput, result2 error) {
	fake.ListInvalidationsWithContextStub = nil
	if fake.listInvalidationsWithContextReturnsOnCall == nil {
		fake.listInvalidationsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListInvalidationsOutput
			result2 error
		})
	}
	fake.listInvalidationsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListInvalidationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListInvalidationsRequest(arg1 *cloudfront.ListInvalidationsInput) (*request.Request, *cloudfront.ListInvalidationsOutput) {
	fake.listInvalidationsRequestMutex.Lock()
	ret, specificReturn := fake.listInvalidationsRequestReturnsOnCall[len(fake.listInvalidationsRequestArgsForCall)]
	fake.listInvalidationsRequestArgsForCall = append(fake.listInvalidationsRequestArgsForCall, struct {
		arg1 *cloudfront.ListInvalidationsInput
	}{arg1})
	fake.recordInvocation("ListInvalidationsRequest", []interface{}{arg1})
	fake.listInvalidationsRequestMutex.Unlock()
	if fake.ListInvalidationsRequestStub != nil {
		return fake.ListInvalidationsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listInvalidationsRequestReturns.result1, fake.listInvalidationsRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) ListInvalidationsRequestCallCount() int {
	fake.listInvalidationsRequestMutex.RLock()
	defer fake.listInvalidationsRequestMutex.RUnlock()
	return len(fake.listInvalidationsRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListInvalidationsRequestArgsForCall(i int) *cloudfront.ListInvalidationsInput {
	fake.listInvalidationsRequestMutex.RLock()
	defer fake.listInvalidationsRequestMutex.RUnlock()
	return fake.listInvalidationsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) ListInvalidationsRequestReturns(result1 *request.Request, result2 *cloudfront.ListInvalidationsOutput) {
	fake.ListInvalidationsRequestStub = nil
	fake.listInvalidationsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListInvalidationsOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListInvalidationsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListInvalidationsOutput) {
	fake.ListInvalidationsRequestStub = nil
	if fake.listInvalidationsRequestReturnsOnCall == nil {
		fake.listInvalidationsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListInvalidationsOutput
		})
	}
	fake.listInvalidationsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListInvalidationsOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListInvalidationsPages(arg1 *cloudfront.ListInvalidationsInput, arg2 func(*cloudfront.ListInvalidationsOutput, bool) bool) error {
	fake.listInvalidationsPagesMutex.Lock()
	ret, specificReturn := fake.listInvalidationsPagesReturnsOnCall[len(fake.listInvalidationsPagesArgsForCall)]
	fake.listInvalidationsPagesArgsForCall = append(fake.listInvalidationsPagesArgsForCall, struct {
		arg1 *cloudfront.ListInvalidationsInput
		arg2 func(*cloudfront.ListInvalidationsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListInvalidationsPages", []interface{}{arg1, arg2})
	fake.listInvalidationsPagesMutex.Unlock()
	if fake.ListInvalidationsPagesStub != nil {
		return fake.ListInvalidationsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listInvalidationsPagesReturns.result1
}

func (fake *FakeCloudFrontAPI) ListInvalidationsPagesCallCount() int {
	fake.listInvalidationsPagesMutex.RLock()
	defer fake.listInvalidationsPagesMutex.RUnlock()
	return len(fake.listInvalidationsPagesArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListInvalidationsPagesArgsForCall(i int) (*cloudfront.ListInvalidationsInput, func(*cloudfront.ListInvalidationsOutput, bool) bool) {
	fake.listInvalidationsPagesMutex.RLock()
	defer fake.listInvalidationsPagesMutex.RUnlock()
	return fake.listInvalidationsPagesArgsForCall[i].arg1, fake.listInvalidationsPagesArgsForCall[i].arg2
}

func (fake *FakeCloudFrontAPI) ListInvalidationsPagesReturns(result1 error) {
	fake.ListInvalidationsPagesStub = nil
	fake.listInvalidationsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListInvalidationsPagesReturnsOnCall(i int, result1 error) {
	fake.ListInvalidationsPagesStub = nil
	if fake.listInvalidationsPagesReturnsOnCall == nil {
		fake.listInvalidationsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listInvalidationsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListInvalidationsPagesWithContext(arg1 aws.Context, arg2 *cloudfront.ListInvalidationsInput, arg3 func(*cloudfront.ListInvalidationsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listInvalidationsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listInvalidationsPagesWithContextReturnsOnCall[len(fake.listInvalidationsPagesWithContextArgsForCall)]
	fake.listInvalidationsPagesWithContextArgsForCall = append(fake.listInvalidationsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.ListInvalidationsInput
		arg3 func(*cloudfront.ListInvalidationsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListInvalidationsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listInvalidationsPagesWithContextMutex.Unlock()
	if fake.ListInvalidationsPagesWithContextStub != nil {
		return fake.ListInvalidationsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listInvalidationsPagesWithContextReturns.result1
}

func (fake *FakeCloudFrontAPI) ListInvalidationsPagesWithContextCallCount() int {
	fake.listInvalidationsPagesWithContextMutex.RLock()
	defer fake.listInvalidationsPagesWithContextMutex.RUnlock()
	return len(fake.listInvalidationsPagesWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListInvalidationsPagesWithContextArgsForCall(i int) (aws.Context, *cloudfront.ListInvalidationsInput, func(*cloudfront.ListInvalidationsOutput, bool) bool, []request.Option) {
	fake.listInvalidationsPagesWithContextMutex.RLock()
	defer fake.listInvalidationsPagesWithContextMutex.RUnlock()
	return fake.listInvalidationsPagesWithContextArgsForCall[i].arg1, fake.listInvalidationsPagesWithContextArgsForCall[i].arg2, fake.listInvalidationsPagesWithContextArgsForCall[i].arg3, fake.listInvalidationsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeCloudFrontAPI) ListInvalidationsPagesWithContextReturns(result1 error) {
	fake.ListInvalidationsPagesWithContextStub = nil
	fake.listInvalidationsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListInvalidationsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.ListInvalidationsPagesWithContextStub = nil
	if fake.listInvalidationsPagesWithContextReturnsOnCall == nil {
		fake.listInvalidationsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listInvalidationsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributions(arg1 *cloudfront.ListStreamingDistributionsInput) (*cloudfront.ListStreamingDistributionsOutput, error) {
	fake.listStreamingDistributionsMutex.Lock()
	ret, specificReturn := fake.listStreamingDistributionsReturnsOnCall[len(fake.listStreamingDistributionsArgsForCall)]
	fake.listStreamingDistributionsArgsForCall = append(fake.listStreamingDistributionsArgsForCall, struct {
		arg1 *cloudfront.ListStreamingDistributionsInput
	}{arg1})
	fake.recordInvocation("ListStreamingDistributions", []interface{}{arg1})
	fake.listStreamingDistributionsMutex.Unlock()
	if fake.ListStreamingDistributionsStub != nil {
		return fake.ListStreamingDistributionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStreamingDistributionsReturns.result1, fake.listStreamingDistributionsReturns.result2
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsCallCount() int {
	fake.listStreamingDistributionsMutex.RLock()
	defer fake.listStreamingDistributionsMutex.RUnlock()
	return len(fake.listStreamingDistributionsArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsArgsForCall(i int) *cloudfront.ListStreamingDistributionsInput {
	fake.listStreamingDistributionsMutex.RLock()
	defer fake.listStreamingDistributionsMutex.RUnlock()
	return fake.listStreamingDistributionsArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsReturns(result1 *cloudfront.ListStreamingDistributionsOutput, result2 error) {
	fake.ListStreamingDistributionsStub = nil
	fake.listStreamingDistributionsReturns = struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsReturnsOnCall(i int, result1 *cloudfront.ListStreamingDistributionsOutput, result2 error) {
	fake.ListStreamingDistributionsStub = nil
	if fake.listStreamingDistributionsReturnsOnCall == nil {
		fake.listStreamingDistributionsReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListStreamingDistributionsOutput
			result2 error
		})
	}
	fake.listStreamingDistributionsReturnsOnCall[i] = struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsWithContext(arg1 aws.Context, arg2 *cloudfront.ListStreamingDistributionsInput, arg3 ...request.Option) (*cloudfront.ListStreamingDistributionsOutput, error) {
	fake.listStreamingDistributionsWithContextMutex.Lock()
	ret, specificReturn := fake.listStreamingDistributionsWithContextReturnsOnCall[len(fake.listStreamingDistributionsWithContextArgsForCall)]
	fake.listStreamingDistributionsWithContextArgsForCall = append(fake.listStreamingDistributionsWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.ListStreamingDistributionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListStreamingDistributionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listStreamingDistributionsWithContextMutex.Unlock()
	if fake.ListStreamingDistributionsWithContextStub != nil {
		return fake.ListStreamingDistributionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStreamingDistributionsWithContextReturns.result1, fake.listStreamingDistributionsWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsWithContextCallCount() int {
	fake.listStreamingDistributionsWithContextMutex.RLock()
	defer fake.listStreamingDistributionsWithContextMutex.RUnlock()
	return len(fake.listStreamingDistributionsWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsWithContextArgsForCall(i int) (aws.Context, *cloudfront.ListStreamingDistributionsInput, []request.Option) {
	fake.listStreamingDistributionsWithContextMutex.RLock()
	defer fake.listStreamingDistributionsWithContextMutex.RUnlock()
	return fake.listStreamingDistributionsWithContextArgsForCall[i].arg1, fake.listStreamingDistributionsWithContextArgsForCall[i].arg2, fake.listStreamingDistributionsWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsWithContextReturns(result1 *cloudfront.ListStreamingDistributionsOutput, result2 error) {
	fake.ListStreamingDistributionsWithContextStub = nil
	fake.listStreamingDistributionsWithContextReturns = struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsWithContextReturnsOnCall(i int, result1 *cloudfront.ListStreamingDistributionsOutput, result2 error) {
	fake.ListStreamingDistributionsWithContextStub = nil
	if fake.listStreamingDistributionsWithContextReturnsOnCall == nil {
		fake.listStreamingDistributionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListStreamingDistributionsOutput
			result2 error
		})
	}
	fake.listStreamingDistributionsWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListStreamingDistributionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsRequest(arg1 *cloudfront.ListStreamingDistributionsInput) (*request.Request, *cloudfront.ListStreamingDistributionsOutput) {
	fake.listStreamingDistributionsRequestMutex.Lock()
	ret, specificReturn := fake.listStreamingDistributionsRequestReturnsOnCall[len(fake.listStreamingDistributionsRequestArgsForCall)]
	fake.listStreamingDistributionsRequestArgsForCall = append(fake.listStreamingDistributionsRequestArgsForCall, struct {
		arg1 *cloudfront.ListStreamingDistributionsInput
	}{arg1})
	fake.recordInvocation("ListStreamingDistributionsRequest", []interface{}{arg1})
	fake.listStreamingDistributionsRequestMutex.Unlock()
	if fake.ListStreamingDistributionsRequestStub != nil {
		return fake.ListStreamingDistributionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listStreamingDistributionsRequestReturns.result1, fake.listStreamingDistributionsRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsRequestCallCount() int {
	fake.listStreamingDistributionsRequestMutex.RLock()
	defer fake.listStreamingDistributionsRequestMutex.RUnlock()
	return len(fake.listStreamingDistributionsRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsRequestArgsForCall(i int) *cloudfront.ListStreamingDistributionsInput {
	fake.listStreamingDistributionsRequestMutex.RLock()
	defer fake.listStreamingDistributionsRequestMutex.RUnlock()
	return fake.listStreamingDistributionsRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsRequestReturns(result1 *request.Request, result2 *cloudfront.ListStreamingDistributionsOutput) {
	fake.ListStreamingDistributionsRequestStub = nil
	fake.listStreamingDistributionsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListStreamingDistributionsOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListStreamingDistributionsOutput) {
	fake.ListStreamingDistributionsRequestStub = nil
	if fake.listStreamingDistributionsRequestReturnsOnCall == nil {
		fake.listStreamingDistributionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListStreamingDistributionsOutput
		})
	}
	fake.listStreamingDistributionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListStreamingDistributionsOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsPages(arg1 *cloudfront.ListStreamingDistributionsInput, arg2 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool) error {
	fake.listStreamingDistributionsPagesMutex.Lock()
	ret, specificReturn := fake.listStreamingDistributionsPagesReturnsOnCall[len(fake.listStreamingDistributionsPagesArgsForCall)]
	fake.listStreamingDistributionsPagesArgsForCall = append(fake.listStreamingDistributionsPagesArgsForCall, struct {
		arg1 *cloudfront.ListStreamingDistributionsInput
		arg2 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListStreamingDistributionsPages", []interface{}{arg1, arg2})
	fake.listStreamingDistributionsPagesMutex.Unlock()
	if fake.ListStreamingDistributionsPagesStub != nil {
		return fake.ListStreamingDistributionsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listStreamingDistributionsPagesReturns.result1
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsPagesCallCount() int {
	fake.listStreamingDistributionsPagesMutex.RLock()
	defer fake.listStreamingDistributionsPagesMutex.RUnlock()
	return len(fake.listStreamingDistributionsPagesArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsPagesArgsForCall(i int) (*cloudfront.ListStreamingDistributionsInput, func(*cloudfront.ListStreamingDistributionsOutput, bool) bool) {
	fake.listStreamingDistributionsPagesMutex.RLock()
	defer fake.listStreamingDistributionsPagesMutex.RUnlock()
	return fake.listStreamingDistributionsPagesArgsForCall[i].arg1, fake.listStreamingDistributionsPagesArgsForCall[i].arg2
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsPagesReturns(result1 error) {
	fake.ListStreamingDistributionsPagesStub = nil
	fake.listStreamingDistributionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsPagesReturnsOnCall(i int, result1 error) {
	fake.ListStreamingDistributionsPagesStub = nil
	if fake.listStreamingDistributionsPagesReturnsOnCall == nil {
		fake.listStreamingDistributionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listStreamingDistributionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsPagesWithContext(arg1 aws.Context, arg2 *cloudfront.ListStreamingDistributionsInput, arg3 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listStreamingDistributionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listStreamingDistributionsPagesWithContextReturnsOnCall[len(fake.listStreamingDistributionsPagesWithContextArgsForCall)]
	fake.listStreamingDistributionsPagesWithContextArgsForCall = append(fake.listStreamingDistributionsPagesWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.ListStreamingDistributionsInput
		arg3 func(*cloudfront.ListStreamingDistributionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListStreamingDistributionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listStreamingDistributionsPagesWithContextMutex.Unlock()
	if fake.ListStreamingDistributionsPagesWithContextStub != nil {
		return fake.ListStreamingDistributionsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.listStreamingDistributionsPagesWithContextReturns.result1
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsPagesWithContextCallCount() int {
	fake.listStreamingDistributionsPagesWithContextMutex.RLock()
	defer fake.listStreamingDistributionsPagesWithContextMutex.RUnlock()
	return len(fake.listStreamingDistributionsPagesWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsPagesWithContextArgsForCall(i int) (aws.Context, *cloudfront.ListStreamingDistributionsInput, func(*cloudfront.ListStreamingDistributionsOutput, bool) bool, []request.Option) {
	fake.listStreamingDistributionsPagesWithContextMutex.RLock()
	defer fake.listStreamingDistributionsPagesWithContextMutex.RUnlock()
	return fake.listStreamingDistributionsPagesWithContextArgsForCall[i].arg1, fake.listStreamingDistributionsPagesWithContextArgsForCall[i].arg2, fake.listStreamingDistributionsPagesWithContextArgsForCall[i].arg3, fake.listStreamingDistributionsPagesWithContextArgsForCall[i].arg4
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsPagesWithContextReturns(result1 error) {
	fake.ListStreamingDistributionsPagesWithContextStub = nil
	fake.listStreamingDistributionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListStreamingDistributionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.ListStreamingDistributionsPagesWithContextStub = nil
	if fake.listStreamingDistributionsPagesWithContextReturnsOnCall == nil {
		fake.listStreamingDistributionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listStreamingDistributionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) ListTagsForResource(arg1 *cloudfront.ListTagsForResourceInput) (*cloudfront.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceReturnsOnCall[len(fake.listTagsForResourceArgsForCall)]
	fake.listTagsForResourceArgsForCall = append(fake.listTagsForResourceArgsForCall, struct {
		arg1 *cloudfront.ListTagsForResourceInput
	}{arg1})
	fake.recordInvocation("ListTagsForResource", []interface{}{arg1})
	fake.listTagsForResourceMutex.Unlock()
	if fake.ListTagsForResourceStub != nil {
		return fake.ListTagsForResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listTagsForResourceReturns.result1, fake.listTagsForResourceReturns.result2
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceCallCount() int {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	return len(fake.listTagsForResourceArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceArgsForCall(i int) *cloudfront.ListTagsForResourceInput {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	return fake.listTagsForResourceArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceReturns(result1 *cloudfront.ListTagsForResourceOutput, result2 error) {
	fake.ListTagsForResourceStub = nil
	fake.listTagsForResourceReturns = struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceReturnsOnCall(i int, result1 *cloudfront.ListTagsForResourceOutput, result2 error) {
	fake.ListTagsForResourceStub = nil
	if fake.listTagsForResourceReturnsOnCall == nil {
		fake.listTagsForResourceReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceReturnsOnCall[i] = struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceWithContext(arg1 aws.Context, arg2 *cloudfront.ListTagsForResourceInput, arg3 ...request.Option) (*cloudfront.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceWithContextReturnsOnCall[len(fake.listTagsForResourceWithContextArgsForCall)]
	fake.listTagsForResourceWithContextArgsForCall = append(fake.listTagsForResourceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.ListTagsForResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListTagsForResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTagsForResourceWithContextMutex.Unlock()
	if fake.ListTagsForResourceWithContextStub != nil {
		return fake.ListTagsForResourceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listTagsForResourceWithContextReturns.result1, fake.listTagsForResourceWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceWithContextCallCount() int {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return len(fake.listTagsForResourceWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceWithContextArgsForCall(i int) (aws.Context, *cloudfront.ListTagsForResourceInput, []request.Option) {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return fake.listTagsForResourceWithContextArgsForCall[i].arg1, fake.listTagsForResourceWithContextArgsForCall[i].arg2, fake.listTagsForResourceWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceWithContextReturns(result1 *cloudfront.ListTagsForResourceOutput, result2 error) {
	fake.ListTagsForResourceWithContextStub = nil
	fake.listTagsForResourceWithContextReturns = struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceWithContextReturnsOnCall(i int, result1 *cloudfront.ListTagsForResourceOutput, result2 error) {
	fake.ListTagsForResourceWithContextStub = nil
	if fake.listTagsForResourceWithContextReturnsOnCall == nil {
		fake.listTagsForResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceRequest(arg1 *cloudfront.ListTagsForResourceInput) (*request.Request, *cloudfront.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceRequestReturnsOnCall[len(fake.listTagsForResourceRequestArgsForCall)]
	fake.listTagsForResourceRequestArgsForCall = append(fake.listTagsForResourceRequestArgsForCall, struct {
		arg1 *cloudfront.ListTagsForResourceInput
	}{arg1})
	fake.recordInvocation("ListTagsForResourceRequest", []interface{}{arg1})
	fake.listTagsForResourceRequestMutex.Unlock()
	if fake.ListTagsForResourceRequestStub != nil {
		return fake.ListTagsForResourceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listTagsForResourceRequestReturns.result1, fake.listTagsForResourceRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceRequestCallCount() int {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	return len(fake.listTagsForResourceRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceRequestArgsForCall(i int) *cloudfront.ListTagsForResourceInput {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	return fake.listTagsForResourceRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceRequestReturns(result1 *request.Request, result2 *cloudfront.ListTagsForResourceOutput) {
	fake.ListTagsForResourceRequestStub = nil
	fake.listTagsForResourceRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) ListTagsForResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.ListTagsForResourceOutput) {
	fake.ListTagsForResourceRequestStub = nil
	if fake.listTagsForResourceRequestReturnsOnCall == nil {
		fake.listTagsForResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.ListTagsForResourceOutput
		})
	}
	fake.listTagsForResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) TagResource(arg1 *cloudfront.TagResourceInput) (*cloudfront.TagResourceOutput, error) {
	fake.tagResourceMutex.Lock()
	ret, specificReturn := fake.tagResourceReturnsOnCall[len(fake.tagResourceArgsForCall)]
	fake.tagResourceArgsForCall = append(fake.tagResourceArgsForCall, struct {
		arg1 *cloudfront.TagResourceInput
	}{arg1})
	fake.recordInvocation("TagResource", []interface{}{arg1})
	fake.tagResourceMutex.Unlock()
	if fake.TagResourceStub != nil {
		return fake.TagResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.tagResourceReturns.result1, fake.tagResourceReturns.result2
}

func (fake *FakeCloudFrontAPI) TagResourceCallCount() int {
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	return len(fake.tagResourceArgsForCall)
}

func (fake *FakeCloudFrontAPI) TagResourceArgsForCall(i int) *cloudfront.TagResourceInput {
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	return fake.tagResourceArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) TagResourceReturns(result1 *cloudfront.TagResourceOutput, result2 error) {
	fake.TagResourceStub = nil
	fake.tagResourceReturns = struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) TagResourceReturnsOnCall(i int, result1 *cloudfront.TagResourceOutput, result2 error) {
	fake.TagResourceStub = nil
	if fake.tagResourceReturnsOnCall == nil {
		fake.tagResourceReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.TagResourceOutput
			result2 error
		})
	}
	fake.tagResourceReturnsOnCall[i] = struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) TagResourceWithContext(arg1 aws.Context, arg2 *cloudfront.TagResourceInput, arg3 ...request.Option) (*cloudfront.TagResourceOutput, error) {
	fake.tagResourceWithContextMutex.Lock()
	ret, specificReturn := fake.tagResourceWithContextReturnsOnCall[len(fake.tagResourceWithContextArgsForCall)]
	fake.tagResourceWithContextArgsForCall = append(fake.tagResourceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.TagResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("TagResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.tagResourceWithContextMutex.Unlock()
	if fake.TagResourceWithContextStub != nil {
		return fake.TagResourceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.tagResourceWithContextReturns.result1, fake.tagResourceWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) TagResourceWithContextCallCount() int {
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	return len(fake.tagResourceWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) TagResourceWithContextArgsForCall(i int) (aws.Context, *cloudfront.TagResourceInput, []request.Option) {
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	return fake.tagResourceWithContextArgsForCall[i].arg1, fake.tagResourceWithContextArgsForCall[i].arg2, fake.tagResourceWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) TagResourceWithContextReturns(result1 *cloudfront.TagResourceOutput, result2 error) {
	fake.TagResourceWithContextStub = nil
	fake.tagResourceWithContextReturns = struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) TagResourceWithContextReturnsOnCall(i int, result1 *cloudfront.TagResourceOutput, result2 error) {
	fake.TagResourceWithContextStub = nil
	if fake.tagResourceWithContextReturnsOnCall == nil {
		fake.tagResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.TagResourceOutput
			result2 error
		})
	}
	fake.tagResourceWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) TagResourceRequest(arg1 *cloudfront.TagResourceInput) (*request.Request, *cloudfront.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	ret, specificReturn := fake.tagResourceRequestReturnsOnCall[len(fake.tagResourceRequestArgsForCall)]
	fake.tagResourceRequestArgsForCall = append(fake.tagResourceRequestArgsForCall, struct {
		arg1 *cloudfront.TagResourceInput
	}{arg1})
	fake.recordInvocation("TagResourceRequest", []interface{}{arg1})
	fake.tagResourceRequestMutex.Unlock()
	if fake.TagResourceRequestStub != nil {
		return fake.TagResourceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.tagResourceRequestReturns.result1, fake.tagResourceRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) TagResourceRequestCallCount() int {
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	return len(fake.tagResourceRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) TagResourceRequestArgsForCall(i int) *cloudfront.TagResourceInput {
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	return fake.tagResourceRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) TagResourceRequestReturns(result1 *request.Request, result2 *cloudfront.TagResourceOutput) {
	fake.TagResourceRequestStub = nil
	fake.tagResourceRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.TagResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) TagResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.TagResourceOutput) {
	fake.TagResourceRequestStub = nil
	if fake.tagResourceRequestReturnsOnCall == nil {
		fake.tagResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.TagResourceOutput
		})
	}
	fake.tagResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.TagResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UntagResource(arg1 *cloudfront.UntagResourceInput) (*cloudfront.UntagResourceOutput, error) {
	fake.untagResourceMutex.Lock()
	ret, specificReturn := fake.untagResourceReturnsOnCall[len(fake.untagResourceArgsForCall)]
	fake.untagResourceArgsForCall = append(fake.untagResourceArgsForCall, struct {
		arg1 *cloudfront.UntagResourceInput
	}{arg1})
	fake.recordInvocation("UntagResource", []interface{}{arg1})
	fake.untagResourceMutex.Unlock()
	if fake.UntagResourceStub != nil {
		return fake.UntagResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.untagResourceReturns.result1, fake.untagResourceReturns.result2
}

func (fake *FakeCloudFrontAPI) UntagResourceCallCount() int {
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	return len(fake.untagResourceArgsForCall)
}

func (fake *FakeCloudFrontAPI) UntagResourceArgsForCall(i int) *cloudfront.UntagResourceInput {
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	return fake.untagResourceArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) UntagResourceReturns(result1 *cloudfront.UntagResourceOutput, result2 error) {
	fake.UntagResourceStub = nil
	fake.untagResourceReturns = struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UntagResourceReturnsOnCall(i int, result1 *cloudfront.UntagResourceOutput, result2 error) {
	fake.UntagResourceStub = nil
	if fake.untagResourceReturnsOnCall == nil {
		fake.untagResourceReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UntagResourceOutput
			result2 error
		})
	}
	fake.untagResourceReturnsOnCall[i] = struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UntagResourceWithContext(arg1 aws.Context, arg2 *cloudfront.UntagResourceInput, arg3 ...request.Option) (*cloudfront.UntagResourceOutput, error) {
	fake.untagResourceWithContextMutex.Lock()
	ret, specificReturn := fake.untagResourceWithContextReturnsOnCall[len(fake.untagResourceWithContextArgsForCall)]
	fake.untagResourceWithContextArgsForCall = append(fake.untagResourceWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.UntagResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UntagResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.untagResourceWithContextMutex.Unlock()
	if fake.UntagResourceWithContextStub != nil {
		return fake.UntagResourceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.untagResourceWithContextReturns.result1, fake.untagResourceWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) UntagResourceWithContextCallCount() int {
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	return len(fake.untagResourceWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) UntagResourceWithContextArgsForCall(i int) (aws.Context, *cloudfront.UntagResourceInput, []request.Option) {
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	return fake.untagResourceWithContextArgsForCall[i].arg1, fake.untagResourceWithContextArgsForCall[i].arg2, fake.untagResourceWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) UntagResourceWithContextReturns(result1 *cloudfront.UntagResourceOutput, result2 error) {
	fake.UntagResourceWithContextStub = nil
	fake.untagResourceWithContextReturns = struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UntagResourceWithContextReturnsOnCall(i int, result1 *cloudfront.UntagResourceOutput, result2 error) {
	fake.UntagResourceWithContextStub = nil
	if fake.untagResourceWithContextReturnsOnCall == nil {
		fake.untagResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UntagResourceOutput
			result2 error
		})
	}
	fake.untagResourceWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UntagResourceRequest(arg1 *cloudfront.UntagResourceInput) (*request.Request, *cloudfront.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	ret, specificReturn := fake.untagResourceRequestReturnsOnCall[len(fake.untagResourceRequestArgsForCall)]
	fake.untagResourceRequestArgsForCall = append(fake.untagResourceRequestArgsForCall, struct {
		arg1 *cloudfront.UntagResourceInput
	}{arg1})
	fake.recordInvocation("UntagResourceRequest", []interface{}{arg1})
	fake.untagResourceRequestMutex.Unlock()
	if fake.UntagResourceRequestStub != nil {
		return fake.UntagResourceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.untagResourceRequestReturns.result1, fake.untagResourceRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) UntagResourceRequestCallCount() int {
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	return len(fake.untagResourceRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) UntagResourceRequestArgsForCall(i int) *cloudfront.UntagResourceInput {
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	return fake.untagResourceRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) UntagResourceRequestReturns(result1 *request.Request, result2 *cloudfront.UntagResourceOutput) {
	fake.UntagResourceRequestStub = nil
	fake.untagResourceRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UntagResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UntagResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UntagResourceOutput) {
	fake.UntagResourceRequestStub = nil
	if fake.untagResourceRequestReturnsOnCall == nil {
		fake.untagResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UntagResourceOutput
		})
	}
	fake.untagResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UntagResourceOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentity(arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	fake.updateCloudFrontOriginAccessIdentityMutex.Lock()
	ret, specificReturn := fake.updateCloudFrontOriginAccessIdentityReturnsOnCall[len(fake.updateCloudFrontOriginAccessIdentityArgsForCall)]
	fake.updateCloudFrontOriginAccessIdentityArgsForCall = append(fake.updateCloudFrontOriginAccessIdentityArgsForCall, struct {
		arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput
	}{arg1})
	fake.recordInvocation("UpdateCloudFrontOriginAccessIdentity", []interface{}{arg1})
	fake.updateCloudFrontOriginAccessIdentityMutex.Unlock()
	if fake.UpdateCloudFrontOriginAccessIdentityStub != nil {
		return fake.UpdateCloudFrontOriginAccessIdentityStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateCloudFrontOriginAccessIdentityReturns.result1, fake.updateCloudFrontOriginAccessIdentityReturns.result2
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityCallCount() int {
	fake.updateCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityMutex.RUnlock()
	return len(fake.updateCloudFrontOriginAccessIdentityArgsForCall)
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityArgsForCall(i int) *cloudfront.UpdateCloudFrontOriginAccessIdentityInput {
	fake.updateCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityMutex.RUnlock()
	return fake.updateCloudFrontOriginAccessIdentityArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityReturns(result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.UpdateCloudFrontOriginAccessIdentityStub = nil
	fake.updateCloudFrontOriginAccessIdentityReturns = struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityReturnsOnCall(i int, result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.UpdateCloudFrontOriginAccessIdentityStub = nil
	if fake.updateCloudFrontOriginAccessIdentityReturnsOnCall == nil {
		fake.updateCloudFrontOriginAccessIdentityReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.updateCloudFrontOriginAccessIdentityReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityWithContext(arg1 aws.Context, arg2 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, arg3 ...request.Option) (*cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, error) {
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.Lock()
	ret, specificReturn := fake.updateCloudFrontOriginAccessIdentityWithContextReturnsOnCall[len(fake.updateCloudFrontOriginAccessIdentityWithContextArgsForCall)]
	fake.updateCloudFrontOriginAccessIdentityWithContextArgsForCall = append(fake.updateCloudFrontOriginAccessIdentityWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateCloudFrontOriginAccessIdentityWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.Unlock()
	if fake.UpdateCloudFrontOriginAccessIdentityWithContextStub != nil {
		return fake.UpdateCloudFrontOriginAccessIdentityWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateCloudFrontOriginAccessIdentityWithContextReturns.result1, fake.updateCloudFrontOriginAccessIdentityWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityWithContextCallCount() int {
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	return len(fake.updateCloudFrontOriginAccessIdentityWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityWithContextArgsForCall(i int) (aws.Context, *cloudfront.UpdateCloudFrontOriginAccessIdentityInput, []request.Option) {
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	return fake.updateCloudFrontOriginAccessIdentityWithContextArgsForCall[i].arg1, fake.updateCloudFrontOriginAccessIdentityWithContextArgsForCall[i].arg2, fake.updateCloudFrontOriginAccessIdentityWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityWithContextReturns(result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.UpdateCloudFrontOriginAccessIdentityWithContextStub = nil
	fake.updateCloudFrontOriginAccessIdentityWithContextReturns = struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput, result2 error) {
	fake.UpdateCloudFrontOriginAccessIdentityWithContextStub = nil
	if fake.updateCloudFrontOriginAccessIdentityWithContextReturnsOnCall == nil {
		fake.updateCloudFrontOriginAccessIdentityWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
			result2 error
		})
	}
	fake.updateCloudFrontOriginAccessIdentityWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityRequest(arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput) (*request.Request, *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput) {
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.Lock()
	ret, specificReturn := fake.updateCloudFrontOriginAccessIdentityRequestReturnsOnCall[len(fake.updateCloudFrontOriginAccessIdentityRequestArgsForCall)]
	fake.updateCloudFrontOriginAccessIdentityRequestArgsForCall = append(fake.updateCloudFrontOriginAccessIdentityRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateCloudFrontOriginAccessIdentityInput
	}{arg1})
	fake.recordInvocation("UpdateCloudFrontOriginAccessIdentityRequest", []interface{}{arg1})
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.Unlock()
	if fake.UpdateCloudFrontOriginAccessIdentityRequestStub != nil {
		return fake.UpdateCloudFrontOriginAccessIdentityRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateCloudFrontOriginAccessIdentityRequestReturns.result1, fake.updateCloudFrontOriginAccessIdentityRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityRequestCallCount() int {
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	return len(fake.updateCloudFrontOriginAccessIdentityRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityRequestArgsForCall(i int) *cloudfront.UpdateCloudFrontOriginAccessIdentityInput {
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	return fake.updateCloudFrontOriginAccessIdentityRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput) {
	fake.UpdateCloudFrontOriginAccessIdentityRequestStub = nil
	fake.updateCloudFrontOriginAccessIdentityRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateCloudFrontOriginAccessIdentityRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput) {
	fake.UpdateCloudFrontOriginAccessIdentityRequestStub = nil
	if fake.updateCloudFrontOriginAccessIdentityRequestReturnsOnCall == nil {
		fake.updateCloudFrontOriginAccessIdentityRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
		})
	}
	fake.updateCloudFrontOriginAccessIdentityRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateCloudFrontOriginAccessIdentityOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateDistribution(arg1 *cloudfront.UpdateDistributionInput) (*cloudfront.UpdateDistributionOutput, error) {
	fake.updateDistributionMutex.Lock()
	ret, specificReturn := fake.updateDistributionReturnsOnCall[len(fake.updateDistributionArgsForCall)]
	fake.updateDistributionArgsForCall = append(fake.updateDistributionArgsForCall, struct {
		arg1 *cloudfront.UpdateDistributionInput
	}{arg1})
	fake.recordInvocation("UpdateDistribution", []interface{}{arg1})
	fake.updateDistributionMutex.Unlock()
	if fake.UpdateDistributionStub != nil {
		return fake.UpdateDistributionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateDistributionReturns.result1, fake.updateDistributionReturns.result2
}

func (fake *FakeCloudFrontAPI) UpdateDistributionCallCount() int {
	fake.updateDistributionMutex.RLock()
	defer fake.updateDistributionMutex.RUnlock()
	return len(fake.updateDistributionArgsForCall)
}

func (fake *FakeCloudFrontAPI) UpdateDistributionArgsForCall(i int) *cloudfront.UpdateDistributionInput {
	fake.updateDistributionMutex.RLock()
	defer fake.updateDistributionMutex.RUnlock()
	return fake.updateDistributionArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) UpdateDistributionReturns(result1 *cloudfront.UpdateDistributionOutput, result2 error) {
	fake.UpdateDistributionStub = nil
	fake.updateDistributionReturns = struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateDistributionReturnsOnCall(i int, result1 *cloudfront.UpdateDistributionOutput, result2 error) {
	fake.UpdateDistributionStub = nil
	if fake.updateDistributionReturnsOnCall == nil {
		fake.updateDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateDistributionOutput
			result2 error
		})
	}
	fake.updateDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateDistributionWithContext(arg1 aws.Context, arg2 *cloudfront.UpdateDistributionInput, arg3 ...request.Option) (*cloudfront.UpdateDistributionOutput, error) {
	fake.updateDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.updateDistributionWithContextReturnsOnCall[len(fake.updateDistributionWithContextArgsForCall)]
	fake.updateDistributionWithContextArgsForCall = append(fake.updateDistributionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.UpdateDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateDistributionWithContextMutex.Unlock()
	if fake.UpdateDistributionWithContextStub != nil {
		return fake.UpdateDistributionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateDistributionWithContextReturns.result1, fake.updateDistributionWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) UpdateDistributionWithContextCallCount() int {
	fake.updateDistributionWithContextMutex.RLock()
	defer fake.updateDistributionWithContextMutex.RUnlock()
	return len(fake.updateDistributionWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) UpdateDistributionWithContextArgsForCall(i int) (aws.Context, *cloudfront.UpdateDistributionInput, []request.Option) {
	fake.updateDistributionWithContextMutex.RLock()
	defer fake.updateDistributionWithContextMutex.RUnlock()
	return fake.updateDistributionWithContextArgsForCall[i].arg1, fake.updateDistributionWithContextArgsForCall[i].arg2, fake.updateDistributionWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) UpdateDistributionWithContextReturns(result1 *cloudfront.UpdateDistributionOutput, result2 error) {
	fake.UpdateDistributionWithContextStub = nil
	fake.updateDistributionWithContextReturns = struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateDistributionOutput, result2 error) {
	fake.UpdateDistributionWithContextStub = nil
	if fake.updateDistributionWithContextReturnsOnCall == nil {
		fake.updateDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateDistributionOutput
			result2 error
		})
	}
	fake.updateDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateDistributionRequest(arg1 *cloudfront.UpdateDistributionInput) (*request.Request, *cloudfront.UpdateDistributionOutput) {
	fake.updateDistributionRequestMutex.Lock()
	ret, specificReturn := fake.updateDistributionRequestReturnsOnCall[len(fake.updateDistributionRequestArgsForCall)]
	fake.updateDistributionRequestArgsForCall = append(fake.updateDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateDistributionInput
	}{arg1})
	fake.recordInvocation("UpdateDistributionRequest", []interface{}{arg1})
	fake.updateDistributionRequestMutex.Unlock()
	if fake.UpdateDistributionRequestStub != nil {
		return fake.UpdateDistributionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateDistributionRequestReturns.result1, fake.updateDistributionRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) UpdateDistributionRequestCallCount() int {
	fake.updateDistributionRequestMutex.RLock()
	defer fake.updateDistributionRequestMutex.RUnlock()
	return len(fake.updateDistributionRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) UpdateDistributionRequestArgsForCall(i int) *cloudfront.UpdateDistributionInput {
	fake.updateDistributionRequestMutex.RLock()
	defer fake.updateDistributionRequestMutex.RUnlock()
	return fake.updateDistributionRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) UpdateDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateDistributionOutput) {
	fake.UpdateDistributionRequestStub = nil
	fake.updateDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateDistributionOutput) {
	fake.UpdateDistributionRequestStub = nil
	if fake.updateDistributionRequestReturnsOnCall == nil {
		fake.updateDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateDistributionOutput
		})
	}
	fake.updateDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistribution(arg1 *cloudfront.UpdateStreamingDistributionInput) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	fake.updateStreamingDistributionMutex.Lock()
	ret, specificReturn := fake.updateStreamingDistributionReturnsOnCall[len(fake.updateStreamingDistributionArgsForCall)]
	fake.updateStreamingDistributionArgsForCall = append(fake.updateStreamingDistributionArgsForCall, struct {
		arg1 *cloudfront.UpdateStreamingDistributionInput
	}{arg1})
	fake.recordInvocation("UpdateStreamingDistribution", []interface{}{arg1})
	fake.updateStreamingDistributionMutex.Unlock()
	if fake.UpdateStreamingDistributionStub != nil {
		return fake.UpdateStreamingDistributionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateStreamingDistributionReturns.result1, fake.updateStreamingDistributionReturns.result2
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionCallCount() int {
	fake.updateStreamingDistributionMutex.RLock()
	defer fake.updateStreamingDistributionMutex.RUnlock()
	return len(fake.updateStreamingDistributionArgsForCall)
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionArgsForCall(i int) *cloudfront.UpdateStreamingDistributionInput {
	fake.updateStreamingDistributionMutex.RLock()
	defer fake.updateStreamingDistributionMutex.RUnlock()
	return fake.updateStreamingDistributionArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionReturns(result1 *cloudfront.UpdateStreamingDistributionOutput, result2 error) {
	fake.UpdateStreamingDistributionStub = nil
	fake.updateStreamingDistributionReturns = struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionReturnsOnCall(i int, result1 *cloudfront.UpdateStreamingDistributionOutput, result2 error) {
	fake.UpdateStreamingDistributionStub = nil
	if fake.updateStreamingDistributionReturnsOnCall == nil {
		fake.updateStreamingDistributionReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateStreamingDistributionOutput
			result2 error
		})
	}
	fake.updateStreamingDistributionReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionWithContext(arg1 aws.Context, arg2 *cloudfront.UpdateStreamingDistributionInput, arg3 ...request.Option) (*cloudfront.UpdateStreamingDistributionOutput, error) {
	fake.updateStreamingDistributionWithContextMutex.Lock()
	ret, specificReturn := fake.updateStreamingDistributionWithContextReturnsOnCall[len(fake.updateStreamingDistributionWithContextArgsForCall)]
	fake.updateStreamingDistributionWithContextArgsForCall = append(fake.updateStreamingDistributionWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.UpdateStreamingDistributionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateStreamingDistributionWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateStreamingDistributionWithContextMutex.Unlock()
	if fake.UpdateStreamingDistributionWithContextStub != nil {
		return fake.UpdateStreamingDistributionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateStreamingDistributionWithContextReturns.result1, fake.updateStreamingDistributionWithContextReturns.result2
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionWithContextCallCount() int {
	fake.updateStreamingDistributionWithContextMutex.RLock()
	defer fake.updateStreamingDistributionWithContextMutex.RUnlock()
	return len(fake.updateStreamingDistributionWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionWithContextArgsForCall(i int) (aws.Context, *cloudfront.UpdateStreamingDistributionInput, []request.Option) {
	fake.updateStreamingDistributionWithContextMutex.RLock()
	defer fake.updateStreamingDistributionWithContextMutex.RUnlock()
	return fake.updateStreamingDistributionWithContextArgsForCall[i].arg1, fake.updateStreamingDistributionWithContextArgsForCall[i].arg2, fake.updateStreamingDistributionWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionWithContextReturns(result1 *cloudfront.UpdateStreamingDistributionOutput, result2 error) {
	fake.UpdateStreamingDistributionWithContextStub = nil
	fake.updateStreamingDistributionWithContextReturns = struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionWithContextReturnsOnCall(i int, result1 *cloudfront.UpdateStreamingDistributionOutput, result2 error) {
	fake.UpdateStreamingDistributionWithContextStub = nil
	if fake.updateStreamingDistributionWithContextReturnsOnCall == nil {
		fake.updateStreamingDistributionWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudfront.UpdateStreamingDistributionOutput
			result2 error
		})
	}
	fake.updateStreamingDistributionWithContextReturnsOnCall[i] = struct {
		result1 *cloudfront.UpdateStreamingDistributionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionRequest(arg1 *cloudfront.UpdateStreamingDistributionInput) (*request.Request, *cloudfront.UpdateStreamingDistributionOutput) {
	fake.updateStreamingDistributionRequestMutex.Lock()
	ret, specificReturn := fake.updateStreamingDistributionRequestReturnsOnCall[len(fake.updateStreamingDistributionRequestArgsForCall)]
	fake.updateStreamingDistributionRequestArgsForCall = append(fake.updateStreamingDistributionRequestArgsForCall, struct {
		arg1 *cloudfront.UpdateStreamingDistributionInput
	}{arg1})
	fake.recordInvocation("UpdateStreamingDistributionRequest", []interface{}{arg1})
	fake.updateStreamingDistributionRequestMutex.Unlock()
	if fake.UpdateStreamingDistributionRequestStub != nil {
		return fake.UpdateStreamingDistributionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateStreamingDistributionRequestReturns.result1, fake.updateStreamingDistributionRequestReturns.result2
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionRequestCallCount() int {
	fake.updateStreamingDistributionRequestMutex.RLock()
	defer fake.updateStreamingDistributionRequestMutex.RUnlock()
	return len(fake.updateStreamingDistributionRequestArgsForCall)
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionRequestArgsForCall(i int) *cloudfront.UpdateStreamingDistributionInput {
	fake.updateStreamingDistributionRequestMutex.RLock()
	defer fake.updateStreamingDistributionRequestMutex.RUnlock()
	return fake.updateStreamingDistributionRequestArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionRequestReturns(result1 *request.Request, result2 *cloudfront.UpdateStreamingDistributionOutput) {
	fake.UpdateStreamingDistributionRequestStub = nil
	fake.updateStreamingDistributionRequestReturns = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) UpdateStreamingDistributionRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudfront.UpdateStreamingDistributionOutput) {
	fake.UpdateStreamingDistributionRequestStub = nil
	if fake.updateStreamingDistributionRequestReturnsOnCall == nil {
		fake.updateStreamingDistributionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudfront.UpdateStreamingDistributionOutput
		})
	}
	fake.updateStreamingDistributionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudfront.UpdateStreamingDistributionOutput
	}{result1, result2}
}

func (fake *FakeCloudFrontAPI) WaitUntilDistributionDeployed(arg1 *cloudfront.GetDistributionInput) error {
	fake.waitUntilDistributionDeployedMutex.Lock()
	ret, specificReturn := fake.waitUntilDistributionDeployedReturnsOnCall[len(fake.waitUntilDistributionDeployedArgsForCall)]
	fake.waitUntilDistributionDeployedArgsForCall = append(fake.waitUntilDistributionDeployedArgsForCall, struct {
		arg1 *cloudfront.GetDistributionInput
	}{arg1})
	fake.recordInvocation("WaitUntilDistributionDeployed", []interface{}{arg1})
	fake.waitUntilDistributionDeployedMutex.Unlock()
	if fake.WaitUntilDistributionDeployedStub != nil {
		return fake.WaitUntilDistributionDeployedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilDistributionDeployedReturns.result1
}

func (fake *FakeCloudFrontAPI) WaitUntilDistributionDeployedCallCount() int {
	fake.waitUntilDistributionDeployedMutex.RLock()
	defer fake.waitUntilDistributionDeployedMutex.RUnlock()
	return len(fake.waitUntilDistributionDeployedArgsForCall)
}

func (fake *FakeCloudFrontAPI) WaitUntilDistributionDeployedArgsForCall(i int) *cloudfront.GetDistributionInput {
	fake.waitUntilDistributionDeployedMutex.RLock()
	defer fake.waitUntilDistributionDeployedMutex.RUnlock()
	return fake.waitUntilDistributionDeployedArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) WaitUntilDistributionDeployedReturns(result1 error) {
	fake.WaitUntilDistributionDeployedStub = nil
	fake.waitUntilDistributionDeployedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) WaitUntilDistributionDeployedReturnsOnCall(i int, result1 error) {
	fake.WaitUntilDistributionDeployedStub = nil
	if fake.waitUntilDistributionDeployedReturnsOnCall == nil {
		fake.waitUntilDistributionDeployedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDistributionDeployedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) WaitUntilDistributionDeployedWithContext(arg1 aws.Context, arg2 *cloudfront.GetDistributionInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilDistributionDeployedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilDistributionDeployedWithContextReturnsOnCall[len(fake.waitUntilDistributionDeployedWithContextArgsForCall)]
	fake.waitUntilDistributionDeployedWithContextArgsForCall = append(fake.waitUntilDistributionDeployedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.GetDistributionInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilDistributionDeployedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilDistributionDeployedWithContextMutex.Unlock()
	if fake.WaitUntilDistributionDeployedWithContextStub != nil {
		return fake.WaitUntilDistributionDeployedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilDistributionDeployedWithContextReturns.result1
}

func (fake *FakeCloudFrontAPI) WaitUntilDistributionDeployedWithContextCallCount() int {
	fake.waitUntilDistributionDeployedWithContextMutex.RLock()
	defer fake.waitUntilDistributionDeployedWithContextMutex.RUnlock()
	return len(fake.waitUntilDistributionDeployedWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) WaitUntilDistributionDeployedWithContextArgsForCall(i int) (aws.Context, *cloudfront.GetDistributionInput, []request.WaiterOption) {
	fake.waitUntilDistributionDeployedWithContextMutex.RLock()
	defer fake.waitUntilDistributionDeployedWithContextMutex.RUnlock()
	return fake.waitUntilDistributionDeployedWithContextArgsForCall[i].arg1, fake.waitUntilDistributionDeployedWithContextArgsForCall[i].arg2, fake.waitUntilDistributionDeployedWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) WaitUntilDistributionDeployedWithContextReturns(result1 error) {
	fake.WaitUntilDistributionDeployedWithContextStub = nil
	fake.waitUntilDistributionDeployedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) WaitUntilDistributionDeployedWithContextReturnsOnCall(i int, result1 error) {
	fake.WaitUntilDistributionDeployedWithContextStub = nil
	if fake.waitUntilDistributionDeployedWithContextReturnsOnCall == nil {
		fake.waitUntilDistributionDeployedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilDistributionDeployedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) WaitUntilInvalidationCompleted(arg1 *cloudfront.GetInvalidationInput) error {
	fake.waitUntilInvalidationCompletedMutex.Lock()
	ret, specificReturn := fake.waitUntilInvalidationCompletedReturnsOnCall[len(fake.waitUntilInvalidationCompletedArgsForCall)]
	fake.waitUntilInvalidationCompletedArgsForCall = append(fake.waitUntilInvalidationCompletedArgsForCall, struct {
		arg1 *cloudfront.GetInvalidationInput
	}{arg1})
	fake.recordInvocation("WaitUntilInvalidationCompleted", []interface{}{arg1})
	fake.waitUntilInvalidationCompletedMutex.Unlock()
	if fake.WaitUntilInvalidationCompletedStub != nil {
		return fake.WaitUntilInvalidationCompletedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilInvalidationCompletedReturns.result1
}

func (fake *FakeCloudFrontAPI) WaitUntilInvalidationCompletedCallCount() int {
	fake.waitUntilInvalidationCompletedMutex.RLock()
	defer fake.waitUntilInvalidationCompletedMutex.RUnlock()
	return len(fake.waitUntilInvalidationCompletedArgsForCall)
}

func (fake *FakeCloudFrontAPI) WaitUntilInvalidationCompletedArgsForCall(i int) *cloudfront.GetInvalidationInput {
	fake.waitUntilInvalidationCompletedMutex.RLock()
	defer fake.waitUntilInvalidationCompletedMutex.RUnlock()
	return fake.waitUntilInvalidationCompletedArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) WaitUntilInvalidationCompletedReturns(result1 error) {
	fake.WaitUntilInvalidationCompletedStub = nil
	fake.waitUntilInvalidationCompletedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) WaitUntilInvalidationCompletedReturnsOnCall(i int, result1 error) {
	fake.WaitUntilInvalidationCompletedStub = nil
	if fake.waitUntilInvalidationCompletedReturnsOnCall == nil {
		fake.waitUntilInvalidationCompletedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInvalidationCompletedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) WaitUntilInvalidationCompletedWithContext(arg1 aws.Context, arg2 *cloudfront.GetInvalidationInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilInvalidationCompletedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilInvalidationCompletedWithContextReturnsOnCall[len(fake.waitUntilInvalidationCompletedWithContextArgsForCall)]
	fake.waitUntilInvalidationCompletedWithContextArgsForCall = append(fake.waitUntilInvalidationCompletedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.GetInvalidationInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilInvalidationCompletedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilInvalidationCompletedWithContextMutex.Unlock()
	if fake.WaitUntilInvalidationCompletedWithContextStub != nil {
		return fake.WaitUntilInvalidationCompletedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilInvalidationCompletedWithContextReturns.result1
}

func (fake *FakeCloudFrontAPI) WaitUntilInvalidationCompletedWithContextCallCount() int {
	fake.waitUntilInvalidationCompletedWithContextMutex.RLock()
	defer fake.waitUntilInvalidationCompletedWithContextMutex.RUnlock()
	return len(fake.waitUntilInvalidationCompletedWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) WaitUntilInvalidationCompletedWithContextArgsForCall(i int) (aws.Context, *cloudfront.GetInvalidationInput, []request.WaiterOption) {
	fake.waitUntilInvalidationCompletedWithContextMutex.RLock()
	defer fake.waitUntilInvalidationCompletedWithContextMutex.RUnlock()
	return fake.waitUntilInvalidationCompletedWithContextArgsForCall[i].arg1, fake.waitUntilInvalidationCompletedWithContextArgsForCall[i].arg2, fake.waitUntilInvalidationCompletedWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) WaitUntilInvalidationCompletedWithContextReturns(result1 error) {
	fake.WaitUntilInvalidationCompletedWithContextStub = nil
	fake.waitUntilInvalidationCompletedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) WaitUntilInvalidationCompletedWithContextReturnsOnCall(i int, result1 error) {
	fake.WaitUntilInvalidationCompletedWithContextStub = nil
	if fake.waitUntilInvalidationCompletedWithContextReturnsOnCall == nil {
		fake.waitUntilInvalidationCompletedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilInvalidationCompletedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) WaitUntilStreamingDistributionDeployed(arg1 *cloudfront.GetStreamingDistributionInput) error {
	fake.waitUntilStreamingDistributionDeployedMutex.Lock()
	ret, specificReturn := fake.waitUntilStreamingDistributionDeployedReturnsOnCall[len(fake.waitUntilStreamingDistributionDeployedArgsForCall)]
	fake.waitUntilStreamingDistributionDeployedArgsForCall = append(fake.waitUntilStreamingDistributionDeployedArgsForCall, struct {
		arg1 *cloudfront.GetStreamingDistributionInput
	}{arg1})
	fake.recordInvocation("WaitUntilStreamingDistributionDeployed", []interface{}{arg1})
	fake.waitUntilStreamingDistributionDeployedMutex.Unlock()
	if fake.WaitUntilStreamingDistributionDeployedStub != nil {
		return fake.WaitUntilStreamingDistributionDeployedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilStreamingDistributionDeployedReturns.result1
}

func (fake *FakeCloudFrontAPI) WaitUntilStreamingDistributionDeployedCallCount() int {
	fake.waitUntilStreamingDistributionDeployedMutex.RLock()
	defer fake.waitUntilStreamingDistributionDeployedMutex.RUnlock()
	return len(fake.waitUntilStreamingDistributionDeployedArgsForCall)
}

func (fake *FakeCloudFrontAPI) WaitUntilStreamingDistributionDeployedArgsForCall(i int) *cloudfront.GetStreamingDistributionInput {
	fake.waitUntilStreamingDistributionDeployedMutex.RLock()
	defer fake.waitUntilStreamingDistributionDeployedMutex.RUnlock()
	return fake.waitUntilStreamingDistributionDeployedArgsForCall[i].arg1
}

func (fake *FakeCloudFrontAPI) WaitUntilStreamingDistributionDeployedReturns(result1 error) {
	fake.WaitUntilStreamingDistributionDeployedStub = nil
	fake.waitUntilStreamingDistributionDeployedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) WaitUntilStreamingDistributionDeployedReturnsOnCall(i int, result1 error) {
	fake.WaitUntilStreamingDistributionDeployedStub = nil
	if fake.waitUntilStreamingDistributionDeployedReturnsOnCall == nil {
		fake.waitUntilStreamingDistributionDeployedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilStreamingDistributionDeployedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) WaitUntilStreamingDistributionDeployedWithContext(arg1 aws.Context, arg2 *cloudfront.GetStreamingDistributionInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilStreamingDistributionDeployedWithContextReturnsOnCall[len(fake.waitUntilStreamingDistributionDeployedWithContextArgsForCall)]
	fake.waitUntilStreamingDistributionDeployedWithContextArgsForCall = append(fake.waitUntilStreamingDistributionDeployedWithContextArgsForCall, struct {
		arg1 aws.Context
		arg2 *cloudfront.GetStreamingDistributionInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilStreamingDistributionDeployedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.Unlock()
	if fake.WaitUntilStreamingDistributionDeployedWithContextStub != nil {
		return fake.WaitUntilStreamingDistributionDeployedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.waitUntilStreamingDistributionDeployedWithContextReturns.result1
}

func (fake *FakeCloudFrontAPI) WaitUntilStreamingDistributionDeployedWithContextCallCount() int {
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.RLock()
	defer fake.waitUntilStreamingDistributionDeployedWithContextMutex.RUnlock()
	return len(fake.waitUntilStreamingDistributionDeployedWithContextArgsForCall)
}

func (fake *FakeCloudFrontAPI) WaitUntilStreamingDistributionDeployedWithContextArgsForCall(i int) (aws.Context, *cloudfront.GetStreamingDistributionInput, []request.WaiterOption) {
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.RLock()
	defer fake.waitUntilStreamingDistributionDeployedWithContextMutex.RUnlock()
	return fake.waitUntilStreamingDistributionDeployedWithContextArgsForCall[i].arg1, fake.waitUntilStreamingDistributionDeployedWithContextArgsForCall[i].arg2, fake.waitUntilStreamingDistributionDeployedWithContextArgsForCall[i].arg3
}

func (fake *FakeCloudFrontAPI) WaitUntilStreamingDistributionDeployedWithContextReturns(result1 error) {
	fake.WaitUntilStreamingDistributionDeployedWithContextStub = nil
	fake.waitUntilStreamingDistributionDeployedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) WaitUntilStreamingDistributionDeployedWithContextReturnsOnCall(i int, result1 error) {
	fake.WaitUntilStreamingDistributionDeployedWithContextStub = nil
	if fake.waitUntilStreamingDistributionDeployedWithContextReturnsOnCall == nil {
		fake.waitUntilStreamingDistributionDeployedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilStreamingDistributionDeployedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFrontAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityMutex.RUnlock()
	fake.createCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	fake.createCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.createCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	fake.createDistributionMutex.RLock()
	defer fake.createDistributionMutex.RUnlock()
	fake.createDistributionWithContextMutex.RLock()
	defer fake.createDistributionWithContextMutex.RUnlock()
	fake.createDistributionRequestMutex.RLock()
	defer fake.createDistributionRequestMutex.RUnlock()
	fake.createDistributionWithTagsMutex.RLock()
	defer fake.createDistributionWithTagsMutex.RUnlock()
	fake.createDistributionWithTagsWithContextMutex.RLock()
	defer fake.createDistributionWithTagsWithContextMutex.RUnlock()
	fake.createDistributionWithTagsRequestMutex.RLock()
	defer fake.createDistributionWithTagsRequestMutex.RUnlock()
	fake.createInvalidationMutex.RLock()
	defer fake.createInvalidationMutex.RUnlock()
	fake.createInvalidationWithContextMutex.RLock()
	defer fake.createInvalidationWithContextMutex.RUnlock()
	fake.createInvalidationRequestMutex.RLock()
	defer fake.createInvalidationRequestMutex.RUnlock()
	fake.createStreamingDistributionMutex.RLock()
	defer fake.createStreamingDistributionMutex.RUnlock()
	fake.createStreamingDistributionWithContextMutex.RLock()
	defer fake.createStreamingDistributionWithContextMutex.RUnlock()
	fake.createStreamingDistributionRequestMutex.RLock()
	defer fake.createStreamingDistributionRequestMutex.RUnlock()
	fake.createStreamingDistributionWithTagsMutex.RLock()
	defer fake.createStreamingDistributionWithTagsMutex.RUnlock()
	fake.createStreamingDistributionWithTagsWithContextMutex.RLock()
	defer fake.createStreamingDistributionWithTagsWithContextMutex.RUnlock()
	fake.createStreamingDistributionWithTagsRequestMutex.RLock()
	defer fake.createStreamingDistributionWithTagsRequestMutex.RUnlock()
	fake.deleteCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityMutex.RUnlock()
	fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	fake.deleteCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.deleteCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	fake.deleteDistributionMutex.RLock()
	defer fake.deleteDistributionMutex.RUnlock()
	fake.deleteDistributionWithContextMutex.RLock()
	defer fake.deleteDistributionWithContextMutex.RUnlock()
	fake.deleteDistributionRequestMutex.RLock()
	defer fake.deleteDistributionRequestMutex.RUnlock()
	fake.deleteServiceLinkedRoleMutex.RLock()
	defer fake.deleteServiceLinkedRoleMutex.RUnlock()
	fake.deleteServiceLinkedRoleWithContextMutex.RLock()
	defer fake.deleteServiceLinkedRoleWithContextMutex.RUnlock()
	fake.deleteServiceLinkedRoleRequestMutex.RLock()
	defer fake.deleteServiceLinkedRoleRequestMutex.RUnlock()
	fake.deleteStreamingDistributionMutex.RLock()
	defer fake.deleteStreamingDistributionMutex.RUnlock()
	fake.deleteStreamingDistributionWithContextMutex.RLock()
	defer fake.deleteStreamingDistributionWithContextMutex.RUnlock()
	fake.deleteStreamingDistributionRequestMutex.RLock()
	defer fake.deleteStreamingDistributionRequestMutex.RUnlock()
	fake.getCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityMutex.RUnlock()
	fake.getCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	fake.getCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	fake.getCloudFrontOriginAccessIdentityConfigMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigMutex.RUnlock()
	fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigWithContextMutex.RUnlock()
	fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.RLock()
	defer fake.getCloudFrontOriginAccessIdentityConfigRequestMutex.RUnlock()
	fake.getDistributionMutex.RLock()
	defer fake.getDistributionMutex.RUnlock()
	fake.getDistributionWithContextMutex.RLock()
	defer fake.getDistributionWithContextMutex.RUnlock()
	fake.getDistributionRequestMutex.RLock()
	defer fake.getDistributionRequestMutex.RUnlock()
	fake.getDistributionConfigMutex.RLock()
	defer fake.getDistributionConfigMutex.RUnlock()
	fake.getDistributionConfigWithContextMutex.RLock()
	defer fake.getDistributionConfigWithContextMutex.RUnlock()
	fake.getDistributionConfigRequestMutex.RLock()
	defer fake.getDistributionConfigRequestMutex.RUnlock()
	fake.getInvalidationMutex.RLock()
	defer fake.getInvalidationMutex.RUnlock()
	fake.getInvalidationWithContextMutex.RLock()
	defer fake.getInvalidationWithContextMutex.RUnlock()
	fake.getInvalidationRequestMutex.RLock()
	defer fake.getInvalidationRequestMutex.RUnlock()
	fake.getStreamingDistributionMutex.RLock()
	defer fake.getStreamingDistributionMutex.RUnlock()
	fake.getStreamingDistributionWithContextMutex.RLock()
	defer fake.getStreamingDistributionWithContextMutex.RUnlock()
	fake.getStreamingDistributionRequestMutex.RLock()
	defer fake.getStreamingDistributionRequestMutex.RUnlock()
	fake.getStreamingDistributionConfigMutex.RLock()
	defer fake.getStreamingDistributionConfigMutex.RUnlock()
	fake.getStreamingDistributionConfigWithContextMutex.RLock()
	defer fake.getStreamingDistributionConfigWithContextMutex.RUnlock()
	fake.getStreamingDistributionConfigRequestMutex.RLock()
	defer fake.getStreamingDistributionConfigRequestMutex.RUnlock()
	fake.listCloudFrontOriginAccessIdentitiesMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesMutex.RUnlock()
	fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesWithContextMutex.RUnlock()
	fake.listCloudFrontOriginAccessIdentitiesRequestMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesRequestMutex.RUnlock()
	fake.listCloudFrontOriginAccessIdentitiesPagesMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesMutex.RUnlock()
	fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.RLock()
	defer fake.listCloudFrontOriginAccessIdentitiesPagesWithContextMutex.RUnlock()
	fake.listDistributionsMutex.RLock()
	defer fake.listDistributionsMutex.RUnlock()
	fake.listDistributionsWithContextMutex.RLock()
	defer fake.listDistributionsWithContextMutex.RUnlock()
	fake.listDistributionsRequestMutex.RLock()
	defer fake.listDistributionsRequestMutex.RUnlock()
	fake.listDistributionsPagesMutex.RLock()
	defer fake.listDistributionsPagesMutex.RUnlock()
	fake.listDistributionsPagesWithContextMutex.RLock()
	defer fake.listDistributionsPagesWithContextMutex.RUnlock()
	fake.listDistributionsByWebACLIdMutex.RLock()
	defer fake.listDistributionsByWebACLIdMutex.RUnlock()
	fake.listDistributionsByWebACLIdWithContextMutex.RLock()
	defer fake.listDistributionsByWebACLIdWithContextMutex.RUnlock()
	fake.listDistributionsByWebACLIdRequestMutex.RLock()
	defer fake.listDistributionsByWebACLIdRequestMutex.RUnlock()
	fake.listInvalidationsMutex.RLock()
	defer fake.listInvalidationsMutex.RUnlock()
	fake.listInvalidationsWithContextMutex.RLock()
	defer fake.listInvalidationsWithContextMutex.RUnlock()
	fake.listInvalidationsRequestMutex.RLock()
	defer fake.listInvalidationsRequestMutex.RUnlock()
	fake.listInvalidationsPagesMutex.RLock()
	defer fake.listInvalidationsPagesMutex.RUnlock()
	fake.listInvalidationsPagesWithContextMutex.RLock()
	defer fake.listInvalidationsPagesWithContextMutex.RUnlock()
	fake.listStreamingDistributionsMutex.RLock()
	defer fake.listStreamingDistributionsMutex.RUnlock()
	fake.listStreamingDistributionsWithContextMutex.RLock()
	defer fake.listStreamingDistributionsWithContextMutex.RUnlock()
	fake.listStreamingDistributionsRequestMutex.RLock()
	defer fake.listStreamingDistributionsRequestMutex.RUnlock()
	fake.listStreamingDistributionsPagesMutex.RLock()
	defer fake.listStreamingDistributionsPagesMutex.RUnlock()
	fake.listStreamingDistributionsPagesWithContextMutex.RLock()
	defer fake.listStreamingDistributionsPagesWithContextMutex.RUnlock()
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	fake.updateCloudFrontOriginAccessIdentityMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityMutex.RUnlock()
	fake.updateCloudFrontOriginAccessIdentityWithContextMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityWithContextMutex.RUnlock()
	fake.updateCloudFrontOriginAccessIdentityRequestMutex.RLock()
	defer fake.updateCloudFrontOriginAccessIdentityRequestMutex.RUnlock()
	fake.updateDistributionMutex.RLock()
	defer fake.updateDistributionMutex.RUnlock()
	fake.updateDistributionWithContextMutex.RLock()
	defer fake.updateDistributionWithContextMutex.RUnlock()
	fake.updateDistributionRequestMutex.RLock()
	defer fake.updateDistributionRequestMutex.RUnlock()
	fake.updateStreamingDistributionMutex.RLock()
	defer fake.updateStreamingDistributionMutex.RUnlock()
	fake.updateStreamingDistributionWithContextMutex.RLock()
	defer fake.updateStreamingDistributionWithContextMutex.RUnlock()
	fake.updateStreamingDistributionRequestMutex.RLock()
	defer fake.updateStreamingDistributionRequestMutex.RUnlock()
	fake.waitUntilDistributionDeployedMutex.RLock()
	defer fake.waitUntilDistributionDeployedMutex.RUnlock()
	fake.waitUntilDistributionDeployedWithContextMutex.RLock()
	defer fake.waitUntilDistributionDeployedWithContextMutex.RUnlock()
	fake.waitUntilInvalidationCompletedMutex.RLock()
	defer fake.waitUntilInvalidationCompletedMutex.RUnlock()
	fake.waitUntilInvalidationCompletedWithContextMutex.RLock()
	defer fake.waitUntilInvalidationCompletedWithContextMutex.RUnlock()
	fake.waitUntilStreamingDistributionDeployedMutex.RLock()
	defer fake.waitUntilStreamingDistributionDeployedMutex.RUnlock()
	fake.waitUntilStreamingDistributionDeployedWithContextMutex.RLock()
	defer fake.waitUntilStreamingDistributionDeployedWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudFrontAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloudfrontiface.CloudFrontAPI = new(FakeCloudFrontAPI)
